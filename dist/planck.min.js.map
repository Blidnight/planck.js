{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./lib/World.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./lib/index.js","webpack://planck/./lib/Serializer.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_ASSERT","Vec2","common","Math","x","y","this","assert","_serialize","_deserialize","data","obj","zero","neo","clone","v","toString","JSON","stringify","isValid","isFinite","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","EPSILON","invLength","sqrt","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","max","lower","min","clamp","lengthSqr","invSqrt","scaleFn","translateFn","native","math","isNaN","nextPowerOfTwo","isPowerOfTwo","mod","num","random","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Vec3","z","Position","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","TYPES","clazz","type","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","separations","dist","nullState","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","centroid","normals","count","getVertex","index","push","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","edge","vs","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","numerator","denominator","minX","minY","maxX","maxY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","stats","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","radius","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","vertex1","vertex2","vertex0","vertex3","hasVertex0","hasVertex3","setPrev","setNext","v3","v0","World","options","BroadPhase","Solver","Body","WorldDef","gravity","allowSleep","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_broadPhase","m_contactCount","m_bodyList","m_bodyCount","m_jointList","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_newFixture","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","bodies","getBodyList","world","reverse","forEach","_addBody","getJointList","getContactList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","isLocked","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","body","m_force","m_torque","queryAABB","queryCallback","broadPhase","query","proxyId","fixture","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","m_xf","createBody","createDynamicBody","createKinematicBody","destroyBody","m_destroyed","je","je0","publish","destroyJoint","ce","ce0","destroyContact","m_fixtureList","f0","destroyProxies","createJoint","s_step","TimeStep","timeStep","findNewContacts","reset","updateContacts","solveWorld","isStatic","synchronizeFixtures","solveWorldTOI","updatePairs","shouldCollide","next_c","activeA","isAwake","activeB","proxyIdA","m_proxies","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","awake","active","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","MassData","fixtures","_addFixture","isWorldLocked","getWorld","getFixtureList","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","proxyCount","m_proxyCount","touchProxy","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","setActive","createProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","scale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","jn","createFixture","fixdef","destroyFixture","found","node","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","string","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","m_isLoop","_createLoop","_createChain","isLoop","prevVertex","nextVertex","hasPrevVertex","hasNextVertex","map","_setPrevVertex","_setNextVertex","createChain","getChildEdge","Pool","TreeNode","parent","child1","child2","height","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","createProxy","insertLeaf","destroyProxy","removeLeaf","moveProxy","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stack","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","h","parents","states","root","close","iterator","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","xf1","xf2","aabb1","aabb2","displacement","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","timer","Timer","now","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","time","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","internal","Serializer","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","toJson","fromJson","parse","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","opts","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","size","item","shift","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","minContact","minAlpha","collideA","collideB","backup1","backup2","backup","solveIslandTOI","subStep","normalImpulses","tangentImpulses","Date","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy"],"mappings":"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","file":"planck.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 39);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y\n  };\n};\n\nVec2._deserialize = function(data) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  return obj;\n};\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.x) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y,\n    z: this.z\n  };\n};\n\nVec3._deserialize = function(data) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  obj.z = data.z;\n  return obj;\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.prototype._serialize = function() {\n  return {};\n};\n\nShape.TYPES = {};\n\nShape._deserialize = function(data) {\n  var clazz = Shape.TYPES[data.type];\n  return clazz && clazz._deserialize && clazz._deserialize(data);\n};\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  b = b || this;\n\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\nShape.TYPES[PolygonShape.TYPE] = PolygonShape;\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    centroid: this.m_centroid,\n\n    vertices: this.m_vertices,\n    normals: this.m_normals,\n    count: this.m_count,\n  };\n};\n\nPolygonShape._deserialize = function(data) {\n  var shape = new PolygonShape(data.vertices);\n  return shape;\n};\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\nShape.TYPES[CircleShape.TYPE] = CircleShape;\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    p: this.m_p,\n    radius: this.m_radius,\n  };\n};\n\nCircleShape._deserialize = function(data) {\n  return new CircleShape(data.p, data.radius);\n};\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\nShape.TYPES[EdgeShape.TYPE] = EdgeShape;\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertex1: this.m_vertex1,\n    vertex2: this.m_vertex2,\n\n    vertex0: this.m_vertex0,\n    vertex3: this.m_vertex3,\n    hasVertex0: this.m_hasVertex0,\n    hasVertex3: this.m_hasVertex3,\n  };\n};\n\nEdgeShape._deserialize = function(data) {\n  var shape = new EdgeShape(data.vertex1, data.vertex2);\n  if (shape.hasVertex0) {\n    shape.setPrev(data.vertex0);\n  }\n  if (shape.hasVertex3) {\n    shape.setNext(data.vertex3);\n  }\n  return shape;\n};\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\nWorld.prototype._serialize = function() {\n  var bodies = [];\n  var joints = [];\n\n  for (var b = this.getBodyList(); b; b = b.getNext()) {\n    bodies.push(b);\n  }\n\n  // for (var j = this.getJointList(); j; j = j.getNext()) {\n  //   joints.push(j);\n  // }\n\n  return {\n    gravity: this.m_gravity,\n    bodies: bodies,\n    // joints: joints,\n  };\n};\n\nWorld._deserialize = function(data) {\n  var world = new World(data.gravity);\n  data.bodies && data.bodies.reverse().forEach(function(data) {\n    world._addBody(Body._deserialize(world, data));\n  });\n\n  return world;\n};\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} body\n */\nWorld.prototype._addBody = function(body) {\n  _ASSERT && common.assert(this.isLocked() === false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  this._addBody(body);\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext()\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop angularVelocity\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {World} world\n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype._serialize = function() {\n  var fixtures = [];\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    fixtures.push(f);\n  }\n  return {\n    type: this.m_type,\n    position: this.m_xf.p,\n    angle: this.m_xf.q.getAngle(),\n    linearVelocity: this.m_linearVelocity,\n    angularVelocity: this.m_angularVelocity,\n    fixtures: fixtures,\n  };\n};\n\nBody._deserialize = function(world, data) {\n  var body = new Body(world, data);\n\n  data.fixtures.forEach(function(data) {\n    var fixture = Fixture._deserialize(body, data);\n    body._addFixture(fixture);\n  });\n\n  return body;\n};\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nBody.prototype._addFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. This will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n  this._addFixture(fixture);\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\nShape.TYPES[ChainShape.TYPE] = ChainShape;\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  this.m_isLoop = loop;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\nChainShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertices: this.m_vertices,\n    isLoop: this.m_isLoop,\n    prevVertex: this.m_prevVertex,\n    nextVertex: this.m_nextVertex,\n    hasPrevVertex: this.m_hasPrevVertex,\n    hasNextVertex: this.m_hasNextVertex,\n  };\n};\n\nChainShape._deserialize = function(data) {\n  var shape = new ChainShape(data.vertices.map(Vec2._deserialize), data.isLoop);\n  return shape;\n};\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\nvar Shape = require('./Shape');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Body} body\n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\nFixture.prototype._serialize = function() {\n  return {\n    friction: this.m_friction,\n    restitution: this.m_restitution,\n    density: this.m_density,\n    isSensor: this.m_isSensor,\n\n    filterGroupIndex: this.m_filterGroupIndex,\n    filterCategoryBits: this.m_filterCategoryBits,\n    filterMaskBits: this.m_filterMaskBits,\n\n    shape: this.m_shape,\n\n    userData: this.m_userData,\n  };\n};\n\nFixture._deserialize = function(body, data) {\n  var shape = Shape._deserialize(data.shape);\n  var fixture = shape && new Fixture(body, shape, data);\n  return fixture;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","exports.internal = {};\n\nexports.Serializer = require('./Serializer');\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","var World = require('./World');\n\nexports.toJson = function(world) {\n  return JSON.stringify(world._serialize(), function(key, value) {\n    if (typeof value === 'object') {\n      if (value !== null) {\n        if (typeof value._serialize === 'function') {\n          value = value._serialize();\n        }\n      }\n    }\n    return value;\n  }, '  ');\n};\n\nexports.fromJson = function(string) {\n  return World._deserialize(JSON.parse(string));\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree to keep track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n"],"sourceRoot":""}