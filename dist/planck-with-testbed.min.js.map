{"version":3,"sources":["webpack://planck/webpack/bootstrap","webpack://planck/./lib/common/Vec2.js","webpack://planck/./lib/common/Math.js","webpack://planck/./lib/util/common.js","webpack://planck/./lib/common/Rot.js","webpack://planck/./lib/Settings.js","webpack://planck/./lib/common/Transform.js","webpack://planck/./lib/util/create.js","webpack://planck/./lib/util/options.js","webpack://planck/./lib/common/Sweep.js","webpack://planck/./lib/common/Mat22.js","webpack://planck/./lib/common/Vec3.js","webpack://planck/./lib/common/Velocity.js","webpack://planck/./lib/common/Position.js","webpack://planck/./lib/common/Mat33.js","webpack://planck/./lib/Joint.js","webpack://planck/./lib/Shape.js","webpack://planck/./lib/collision/AABB.js","webpack://planck/./lib/Contact.js","webpack://planck/./lib/Manifold.js","webpack://planck/./node_modules/stage-js/lib/core.js","webpack://planck/./lib/shape/PolygonShape.js","webpack://planck/./lib/collision/Distance.js","webpack://planck/./lib/shape/CircleShape.js","webpack://planck/./lib/shape/EdgeShape.js","webpack://planck/./node_modules/stage-js/lib/util/create.js","webpack://planck/./node_modules/stage-js/lib/pin.js","webpack://planck/./lib/World.js","webpack://planck/./lib/Body.js","webpack://planck/./lib/common/stats.js","webpack://planck/./lib/shape/ChainShape.js","webpack://planck/./node_modules/stage-js/lib/loop.js","webpack://planck/./lib/collision/DynamicTree.js","webpack://planck/./lib/Fixture.js","webpack://planck/./lib/collision/TimeOfImpact.js","webpack://planck/./lib/joint/RevoluteJoint.js","webpack://planck/./lib/joint/PrismaticJoint.js","webpack://planck/./node_modules/stage-js/lib/util/stats.js","webpack://planck/./node_modules/stage-js/lib/util/extend.js","webpack://planck/./node_modules/stage-js/lib/util/is.js","webpack://planck/./lib/index.js","webpack://planck/./lib/Serializer.js","webpack://planck/./lib/collision/BroadPhase.js","webpack://planck/./lib/util/Pool.js","webpack://planck/./lib/Solver.js","webpack://planck/./lib/util/Timer.js","webpack://planck/./lib/shape/BoxShape.js","webpack://planck/./lib/shape/CollideCircle.js","webpack://planck/./lib/shape/CollideEdgeCircle.js","webpack://planck/./lib/shape/CollidePolygon.js","webpack://planck/./lib/shape/CollideCirclePolygone.js","webpack://planck/./lib/shape/CollideEdgePolygon.js","webpack://planck/./lib/joint/DistanceJoint.js","webpack://planck/./lib/joint/FrictionJoint.js","webpack://planck/./lib/joint/GearJoint.js","webpack://planck/./lib/joint/MotorJoint.js","webpack://planck/./lib/joint/MouseJoint.js","webpack://planck/./lib/joint/PulleyJoint.js","webpack://planck/./lib/joint/RopeJoint.js","webpack://planck/./lib/joint/WeldJoint.js","webpack://planck/./lib/joint/WheelJoint.js","webpack://planck/./node_modules/stage-js/lib/texture.js","webpack://planck/./node_modules/stage-js/lib/util/math.js","webpack://planck/./node_modules/stage-js/lib/matrix.js","webpack://planck/./testbed/index.js","webpack://planck/./node_modules/stage-js/platform/web.js","webpack://planck/./node_modules/stage-js/lib/index.js","webpack://planck/./node_modules/stage-js/lib/util/await.js","webpack://planck/./node_modules/stage-js/lib/atlas.js","webpack://planck/./node_modules/stage-js/lib/util/string.js","webpack://planck/./node_modules/stage-js/lib/tree.js","webpack://planck/./node_modules/stage-js/lib/event.js","webpack://planck/./node_modules/stage-js/lib/util/event.js","webpack://planck/./node_modules/stage-js/lib/root.js","webpack://planck/./node_modules/stage-js/lib/canvas.js","webpack://planck/./node_modules/stage-js/lib/image.js","webpack://planck/./node_modules/stage-js/lib/util/repeat.js","webpack://planck/./node_modules/stage-js/lib/anim.js","webpack://planck/./node_modules/stage-js/lib/str.js","webpack://planck/./node_modules/stage-js/lib/layout.js","webpack://planck/./node_modules/stage-js/lib/addon/tween.js","webpack://planck/./node_modules/stage-js/lib/addon/easing.js","webpack://planck/./node_modules/stage-js/lib/addon/mouse.js","webpack://planck/./node_modules/stage-js/lib/loader/web.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_ASSERT","Vec2","common","Math","x","y","this","assert","_serialize","_deserialize","data","obj","zero","neo","clone","v","toString","JSON","stringify","isValid","isFinite","Error","setZero","set","wSet","a","b","w","setCombine","setMul","add","wAdd","addCombine","addMul","wSub","subCombine","subMul","sub","mul","length","lengthOf","lengthSquared","normalize","EPSILON","invLength","sqrt","distance","dx","dy","distanceSquared","areEqual","skew","dot","cross","addCross","combine","neg","abs","mid","upper","max","lower","min","clamp","lengthSqr","invSqrt","scaleFn","translateFn","native","math","isNaN","nextPowerOfTwo","isPowerOfTwo","mod","num","random","debug","statement","err","log","Rot","angle","setAngle","setIdentity","rot","identity","sin","cos","getAngle","atan2","getXAxis","getYAxis","qr","mulRot","mulVec2","mulSub","mulT","mulTRot","mulTVec2","Settings","maxManifoldPoints","maxPolygonVertices","aabbExtension","aabbMultiplier","linearSlop","linearSlopSquared","angularSlop","PI","polygonRadius","maxSubSteps","maxTOIContacts","maxTOIIterations","maxDistnceIterations","velocityThreshold","maxLinearCorrection","maxAngularCorrection","maxTranslation","maxTranslationSquared","maxRotation","maxRotationSquared","baumgarte","toiBaugarte","timeToSleep","linearSleepTolerance","linearSleepToleranceSqr","pow","angularSleepTolerance","angularSleepToleranceSqr","Transform","position","rotation","q","xf","Array","isArray","arr","mulAll","mulFn","mulXf","px","py","mulTXf","proto","props","noop","propertyIsEnumerable","to","from","getOwnPropertySymbols","symbols","symbol","Sweep","localCenter","alpha0","c0","a0","setTransform","setLocalCenter","getTransform","beta","advance","alpha","forward","that","Mat22","ex","ey","getInverse","det","imx","solve","mx","mulMat22","mulTMat22","mx1","mx2","Vec3","z","Position","Mat33","ez","solve33","solve22","a11","a12","a21","a22","getInverse22","M","getSymInverse33","a13","a23","a33","mulVec3","Joint","JointEdge","other","joint","prev","next","def","bodyA","bodyB","m_type","m_bodyA","m_bodyB","m_index","m_collideConnected","collideConnected","m_prev","m_next","m_edgeA","m_edgeB","m_islandFlag","m_userData","userData","isActive","getType","getBodyA","getBodyB","getNext","getUserData","setUserData","getCollideConnected","getAnchorA","getAnchorB","getReactionForce","inv_dt","getReactionTorque","shiftOrigin","newOrigin","initVelocityConstraints","step","solveVelocityConstraints","solvePositionConstraints","Shape","m_radius","TYPES","clazz","type","shape","getRadius","_clone","getChildCount","testPoint","rayCast","output","input","transform","childIndex","computeAABB","aabb","computeMass","massData","density","computeDistanceProxy","proxy","AABB","lowerBound","upperBound","getCenter","getExtents","getPerimeter","lowerA","upperA","lowerB","upperB","lowerX","lowerY","upperX","upperY","combinePoints","contains","result","extend","testOverlap","d1x","d2x","d1y","d2y","diff","wD","hD","tmin","Infinity","tmax","p1","p2","absD","normal","f","inv_d","t1","t2","temp","maxFraction","fraction","Manifold","Distance","ContactEdge","contact","Contact","fA","indexA","fB","indexB","evaluateFcn","m_nodeA","m_nodeB","m_fixtureA","m_fixtureB","m_indexA","m_indexB","m_evaluateFcn","m_manifold","m_toi","m_toiCount","m_toiFlag","m_friction","mixFriction","m_restitution","mixRestitution","m_tangentSpeed","m_enabledFlag","m_touchingFlag","m_filterFlag","m_bulletHitFlag","v_points","v_normal","v_normalMass","v_K","v_pointCount","v_tangentSpeed","v_friction","v_restitution","v_invMassA","v_invMassB","v_invIA","v_invIB","p_localPoints","p_localNormal","p_localPoint","p_localCenterA","p_localCenterB","p_type","p_radiusA","p_radiusB","p_pointCount","p_invMassA","p_invMassB","p_invIA","p_invIB","VelocityConstraintPoint","rA","rB","normalImpulse","tangentImpulse","normalMass","tangentMass","velocityBias","friction1","friction2","restitution1","restitution2","initConstraint","fixtureA","fixtureB","shapeA","getShape","shapeB","getBody","manifold","getManifold","pointCount","m_invMass","m_invI","m_sweep","localNormal","localPoint","j","cp","points","vcp","warmStarting","dtRatio","getWorldManifold","worldManifold","setEnabled","flag","isEnabled","isTouching","getFixtureA","getFixtureB","getChildIndexA","getChildIndexB","flagForFiltering","setFriction","friction","getFriction","resetFriction","setRestitution","restitution","getRestitution","resetRestitution","setTangentSpeed","speed","getTangentSpeed","evaluate","xfA","xfB","update","listener","touching","wasTouching","sensorA","isSensor","sensorB","sensor","oldManifold","nmp","omp","id","setAwake","beginContact","endContact","preSolve","solvePositionConstraint","_solvePositionConstraint","solvePositionConstraintTOI","toiA","toiB","toi","positionA","c_velocity","c_position","positionB","localCenterA","localCenterB","mA","iA","mB","iB","cA","aA","cB","aB","minSeparation","point","separation","e_circles","pointA","pointB","e_faceA","planePoint","clipPoint","e_faceB","C","rnA","rnB","K","impulse","P","initVelocityConstraint","velocityA","velocityB","radiusA","radiusB","vA","wA","vB","wB","kNormal","tangent","rtA","rtB","kTangent","vRel","blockSolve","vcp1","vcp2","rn1A","rn1B","rn2A","rn2B","k11","k22","k12","warmStartConstraint","storeConstraintImpulses","solveVelocityConstraint","m_body","dv","vt","lambda","maxFriction","newImpulse","vn","dv1","dv2","vn1","vn2","P1","P2","s_registers","addType","type1","type2","callback","typeA","typeB","m_contactList","destroy","destroyFcn","ManifoldPoint","ContactID","cf","ContactFeature","clipSegmentToLine","vOut","vIn","offset","vertexIndexA","numOut","distance0","distance1","interp","e_vertex","e_face","clipVertex","ClipVertex","getPointStates","state1","state2","manifold1","manifold2","PointState","removeState","persistState","addState","configurable","wm","separations","dist","nullState","stats","is","_await","Class","arg","fn","app","apply","arguments","atlas","_init","push","_load","_config","config","string","_app_queue","_stages","_loaded","_paused","opts","loader","stage","canvas","start","loading","preload","load","url","resolve","test","src","el","document","createElement","addEventListener","Date","now","body","appendChild","loadScript","then","args","shift","pause","resume","window","scripts","getElementsByTagName","currentScript","stack","split","match","readyState","location","href","getScriptSrc","substring","lastIndexOf","PolygonShape","vertices","_super","TYPE","m_centroid","m_vertices","m_normals","m_count","_set","centroid","normals","count","getVertex","index","_setAsBox","ps","tempCount","unique","i0","x0","hull","ih","ie","i1","i2","edge","vs","area","pRef","p3","e1","e2","triangleArea","ComputeCentroid","hx","hy","center","pLocal","numerator","denominator","minX","minY","maxX","maxY","I","D","ex1","ey1","ex2","ey2","mass","validate","e","Input","DistanceInput","Output","DistanceOutput","Proxy","DistanceProxy","Cache","SimplexCache","proxyA","proxyB","transformA","transformB","useRadii","iterations","metric","cache","gjkCalls","simplex","Simplex","readCache","m_v","k_maxIters","saveA","saveB","saveCount","iter","getClosestPoint","getSearchDirection","vertex","getSupport","gjkIters","duplicate","gjkMaxIters","getWitnessPoints","writeCache","m_buffer","SimplexVertex","m_v1","m_v2","m_v3","getVertexCount","bestIndex","bestValue","getSupportVertex","print","wALocal","wBLocal","metric1","metric2","getMetric","e12","pA","pB","solve2","solve3","w1","w2","d12_2","d12_1","inv_d12","w3","w1e12","e13","w1e13","d13_1","d13_2","e23","w2e23","d23_1","d23_2","n123","d123_1","d123_2","d123_3","inv_d13","inv_d23","inv_d123","CircleShape","m_p","radius","rr","sigma","EdgeShape","v1","v2","m_vertex1","m_vertex2","m_vertex0","m_vertex3","m_hasVertex0","m_hasVertex3","vertex1","vertex2","vertex0","vertex3","hasVertex0","hasVertex3","setPrev","setNext","v3","v0","Matrix","iid","Pin","owner","_owner","_parent","_relativeMatrix","_absoluteMatrix","reset","_pin","matrix","relative","relativeMatrix","absoluteMatrix","pin","_textureAlpha","_alpha","_width","_height","_scaleX","_scaleY","_skewX","_skewY","_rotation","_pivoted","_pivotX","_pivotY","_handled","_handleX","_handleY","_aligned","_alignX","_alignY","_offsetX","_offsetY","_boxX","_boxY","_boxWidth","_boxHeight","_ts_translate","_ts_transform","_ts_matrix","_update","_mo_handle","_mo_align","ts","_mo_abs","concat","_mo_rel","rel","translate","scale","rotate","_x","_y","getters","setters","_ts_pin","touch","textureAlpha","width","height","boxWidth","boxHeight","scaleX","scaleY","skewX","skewY","pivotX","pivotY","offsetX","offsetY","alignX","alignY","handleX","handleY","_width_","_height_","pivot","align","handle","resizeMode","all","scaleTo","resizeWidth","resizeHeight","scaleMode","scaleWidth","scaleHeight","h","_add_shortcuts","size","ta","World","options","BroadPhase","Solver","Body","WorldDef","gravity","allowSleep","continuousPhysics","subStepping","velocityIterations","positionIterations","m_solver","m_broadPhase","m_contactCount","m_bodyList","m_bodyCount","m_jointList","m_jointCount","m_stepComplete","m_allowSleep","m_gravity","m_clearForces","m_newFixture","m_locked","m_warmStarting","m_continuousPhysics","m_subStepping","m_blockSolve","m_velocityIterations","m_positionIterations","m_t","m_stepCount","addPair","createContact","bodies","getBodyList","world","reverse","forEach","_addBody","getJointList","getContactList","getBodyCount","getJointCount","getContactCount","setGravity","getGravity","isLocked","setAllowSleeping","getAllowSleeping","setWarmStarting","getWarmStarting","setContinuousPhysics","getContinuousPhysics","setSubStepping","getSubStepping","setAutoClearForces","getAutoClearForces","clearForces","m_force","m_torque","queryAABB","queryCallback","broadPhase","query","proxyId","fixture","point1","point2","reportFixtureCallback","getProxyCount","getTreeHeight","getTreeBalance","getTreeQuality","m_xf","createBody","createDynamicBody","createKinematicBody","destroyBody","m_destroyed","je","je0","publish","destroyJoint","ce","ce0","destroyContact","m_fixtureList","f0","destroyProxies","createJoint","s_step","TimeStep","timeStep","findNewContacts","updateContacts","solveWorld","isStatic","synchronizeFixtures","solveWorldTOI","updatePairs","shouldCollide","next_c","activeA","isAwake","activeB","proxyIdA","m_proxies","proxyIdB","_listeners","on","off","listeners","indexOf","splice","arg1","arg2","arg3","postSolve","Velocity","Fixture","staticBody","STATIC","kinematicBody","KINEMATIC","dynamicBody","DYNAMIC","BodyDef","linearVelocity","angularVelocity","linearDamping","angularDamping","fixedRotation","bullet","gravityScale","awake","active","m_world","m_awakeFlag","m_autoSleepFlag","m_bulletFlag","m_fixedRotationFlag","m_activeFlag","m_mass","m_I","m_linearVelocity","m_angularVelocity","m_linearDamping","m_angularDamping","m_gravityScale","m_sleepTime","MassData","fixtures","_addFixture","isWorldLocked","getWorld","getFixtureList","isDynamic","isKinematic","setStatic","setType","setDynamic","setKinematic","resetMassData","proxyCount","m_proxyCount","touchProxy","isBullet","setBullet","isSleepingAllowed","setSleepingAllowed","setActive","createProxies","isFixedRotation","setFixedRotation","synchronize","synchronizeTransform","getPosition","setPosition","getWorldCenter","getLocalCenter","getLinearVelocity","getLinearVelocityFromWorldPoint","worldPoint","getLinearVelocityFromLocalPoint","getWorldPoint","setLinearVelocity","getAngularVelocity","setAngularVelocity","getLinearDamping","setLinearDamping","getAngularDamping","setAngularDamping","getGravityScale","setGravityScale","getMass","getInertia","getMassData","m_density","oldCenter","setMassData","applyForce","force","wake","applyForceToCenter","applyTorque","torque","applyLinearImpulse","applyAngularImpulse","jn","createFixture","fixdef","destroyFixture","found","node","getWorldVector","localVector","getLocalPoint","getLocalVector","worldVector","newline","ChainShape","loop","m_prevVertex","m_nextVertex","m_hasPrevVertex","m_hasNextVertex","m_isLoop","_createLoop","_createChain","isLoop","prevVertex","nextVertex","hasPrevVertex","hasNextVertex","map","_setPrevVertex","_setNextVertex","createChain","getChildEdge","_textures","render","context","_visible","globalAlpha","draw","child","_first","_next","_tickBefore","_tickAfter","MAX_ELAPSE","_tick","elapsed","last","ticked","tick","_flag","ticker","before","untick","timeout","time","setTimeout","timer","clearTimeout","Pool","TreeNode","parent","child1","child2","DynamicTree","m_root","m_nodes","m_lastProxyId","m_pool","isLeaf","getFatAABB","allocateNode","allocate","freeNode","release","createProxy","insertLeaf","destroyProxy","removeLeaf","moveProxy","leaf","leafAABB","combinedAABB","cost1","cost2","combinedArea","cost","inheritanceCost","oldArea","sibling","oldParent","newParent","balance","grandParent","A","B","F","G","E","getHeight","getAreaRatio","rootArea","totalArea","it","iteratorPool","preorder","computeHeight","height1","ComputeHeight","height2","validateStructure","validateMetrics","ValidateStructure","ValidateMetrics","getMaxBalance","maxBalance","rebuildBottomUp","nodes","minCost","iMin","jMin","aabbi","aabbj","stackPool","pop","rayCastCallback","abs_v","segmentAABB","subInput","inputPool","parents","states","root","close","iterator","FixtureDef","filterGroupIndex","filterCategoryBits","filterMaskBits","FixtureProxy","m_isSensor","m_filterGroupIndex","m_filterCategoryBits","m_filterMaskBits","m_shape","childCount","setSensor","getDensity","setDensity","getAABB","xf1","xf2","aabb1","aabb2","displacement","setFilterData","filter","groupIndex","categoryBits","maskBits","refilter","getFilterGroupIndex","getFilterCategoryBits","getFilterMaskBits","Timer","toiCalls","state","TOIOutput","e_unknown","tMax","sweepA","sweepB","totalRadius","target","tolerance","k_maxIterations","distanceInput","distanceOutput","e_overlapped","e_touching","fcn","SeparationFunction","initialize","done","pushBackIter","s2","findMinSeparation","e_separated","s1","e_failed","rootIterCount","a1","a2","toiRootIters","toiMaxRootIters","toiIters","toiMaxIters","toiMaxTime","toiTime","m_proxyA","m_proxyB","m_sweepA","m_sweepB","m_localPoint","m_axis","localPointA","localPointB","localPointB1","localPointB2","localPointA1","localPointA2","compute","find","axisA","axisB","RevoluteJoint","inactiveLimit","DEFAULTS","lowerAngle","upperAngle","maxMotorTorque","motorSpeed","enableLimit","enableMotor","anchor","m_localAnchorA","localAnchorA","m_localAnchorB","localAnchorB","m_referenceAngle","referenceAngle","m_impulse","m_motorImpulse","m_lowerAngle","m_upperAngle","m_maxMotorTorque","m_motorSpeed","m_enableLimit","m_enableMotor","m_rA","m_rB","m_localCenterA","m_localCenterB","m_invMassA","m_invMassB","m_invIA","m_invIB","m_motorMass","m_limitState","getLocalAnchorA","getLocalAnchorB","getReferenceAngle","getJointAngle","bA","getJointSpeed","isMotorEnabled","getMotorTorque","setMotorSpeed","getMotorSpeed","setMaxMotorTorque","isLimitEnabled","getLowerLimit","getUpperLimit","setLimits","qA","qB","jointAngle","Cdot","oldImpulse","maxImpulse","dt","Cdot1","Cdot2","rhs","reduced","positionError","angularError","limitImpulse","PrismaticJoint","lowerTranslation","upperTranslation","maxMotorForce","axis","m_localXAxisA","localAxisA","m_localYAxisA","m_lowerTranslation","m_upperTranslation","m_maxMotorForce","m_perp","m_s1","m_s2","m_a1","m_a2","m_K","getLocalAxisA","getJointTranslation","bB","setMaxMotorForce","getMotorForce","k13","k23","k33","jointTranslation","LA","LB","f1","df","f2r","perp","C1","linearError","C2","translation","impulse1","base","objProto","owns","toStr","hexRegex","an","defined","empty","equal","getTime","instance","constructor","nil","undef","array","emptyarray","arraylike","boolean","number","element","undefined","HTMLElement","nodeType","nan","hash","setInterval","regexp","hex","internal","Serializer","Circle","Edge","Polygon","Chain","Box","CollidePolygons","DistanceJoint","FrictionJoint","GearJoint","MotorJoint","MouseJoint","PulleyJoint","RopeJoint","WeldJoint","WheelJoint","TimeOfImpact","toJson","fromJson","parse","m_tree","m_moveBuffer","aabbA","aabbB","bufferMove","unbufferMove","addPairCallback","m_callback","m_queryProxyId","fatAABB","userDataA","userDataB","_list","_max","_createFn","_outFn","_inFn","_discardFn","discard","_createCount","_outCount","_inCount","_discardCount","item","TOIInput","inv_dt0","m_stack","m_bodies","m_contacts","m_joints","clear","addBody","addContact","addJoint","seed","solveIsland","ratio","positionSolved","contactsOkay","jointsOkay","jointOkay","postSolveIsland","minSleepTime","linTolSqr","angTolSqr","printBodies","tag","s_subStep","minContact","minAlpha","collideA","collideB","backup1","backup2","backup","solveIslandTOI","subStep","normalImpulses","tangentImpulses","BoxShape","CollideCircles","circleA","circleB","distSqr","CollideEdgeCircle","edgeA","Q","u","A1","B1","B2","A2","den","chain","FindMaxSeparation","poly1","poly2","count1","count2","n1s","v1s","v2s","maxSeparation","si","sij","_maxSeparation","_bestIndex","polyA","polyB","separationA","edgeB","separationB","edge1","flip","incidentEdge","normals1","vertices2","normals2","normal1","minDot","FindIncidentEdge","vertices1","iv1","iv2","v11","v12","localTangent","frontOffset","sideOffset1","sideOffset2","clipPoints1","clipPoints2","polygonA","cLocal","normalIndex","vertexCount","vertIndex1","vertIndex2","u1","u2","faceCenter","CollidePolygonCircle","CollideEdgePolygon","e_edgeA","e_edgeB","EPAxis","edgeAxis","polygonAxis","polygonBA","rf","sideNormal1","sideNormal2","polygonB","centroidB","front","offset1","offset0","offset2","convex1","convex2","edge0","normal0","edge2","normal2","lowerLimit","upperLimit","primaryAxis","frequencyHz","dampingRatio","anchorA","anchorB","m_length","m_frequencyHz","m_dampingRatio","m_gamma","m_bias","m_u","setLength","getLength","setFrequency","hz","getFrequency","setDampingRatio","getDampingRatio","crAu","crBu","invMass","omega","k","vpA","vpB","maxForce","maxTorque","m_linearImpulse","m_angularImpulse","m_maxForce","m_maxTorque","m_linearMass","m_angularMass","setMaxForce","getMaxForce","setMaxTorque","getMaxTorque","joint1","joint2","coordinateA","coordinateB","m_joint1","m_joint2","m_ratio","m_type1","m_type2","m_bodyC","xfC","aC","revolute","m_localAnchorC","m_referenceAngleA","m_localAxisC","prismatic","pC","m_bodyD","xfD","aD","m_localAnchorD","m_referenceAngleB","m_localAxisD","pD","m_constant","m_lcA","m_lcB","m_lcC","m_lcD","m_mA","m_mB","m_mC","m_mD","m_iA","m_iB","m_iC","m_iD","m_JvAC","m_JvBD","m_JwA","m_JwB","m_JwC","m_JwD","getJoint1","getJoint2","setRatio","getRatio","vC","wC","vD","qC","qD","rC","rD","JvAC","JvBD","JwA","JwB","JwC","JwD","cC","cD","correctionFactor","m_linearOffset","linearOffset","angleA","angleB","m_angularOffset","m_correctionFactor","m_linearError","m_angularError","setCorrectionFactor","factor","getCorrectionFactor","setLinearOffset","getLinearOffset","setAngularOffset","angularOffset","getAngularOffset","inv_h","m_targetA","m_beta","m_C","setTarget","getTarget","velocity","MIN_PULLEY_LENGTH","PulleyJointDef","groundA","groundB","m_groundAnchorA","groundAnchorA","m_groundAnchorB","groundAnchorB","m_lengthA","lengthA","m_lengthB","lengthB","m_uA","m_uB","getGroundAnchorA","getGroundAnchorB","getLengthA","getLengthB","getCurrentLengthA","getCurrentLengthB","ruA","ruB","PA","PB","uA","uB","maxLength","m_maxLength","m_state","setMaxLength","getMaxLength","getLimitState","crA","crB","invM","impulse2","m_localAxis","m_springMass","m_springImpulse","m_ax","m_ay","m_sAx","m_sBx","m_sAy","m_sBy","getMaxMotorTorque","setSpringFrequencyHz","getSpringFrequencyHz","setSpringDampingRatio","getSpringDampingRatio","ay","sAy","sBy","Texture","image","pipe","_image","_sx","_dx","_sy","_dy","_sw","_dw","_sh","_dh","dest","x1","y1","x2","y2","x3","y3","x4","y4","sx","sy","sw","sh","dw","dh","limit","drawImage","_draw_failed","console","_dirty","inverse","inversed","mapX","mapY","planck","Stage","Viewer","label","_options","lineWidth","_world","elapsedTime","renderWorld","ui","remove","testbed","Mouse","START","focus","activeElement","blur","paused","_resume","_pause","isPaused","togglePause","activeKeys","background","statusText","statusMap","statusSet","status","statusMerge","_status","info","text","_info","lastDrawHash","drawHash","drawingTexture","append","buffer","ctx","save","lineCap","drawing","restore","drawPoint","color","beginPath","arc","strokeStyle","stroke","drawCircle","drawSegment","moveTo","lineTo","drawPolygon","closePath","drawAABB","g","viewer","lastX","lastY","targetBody","mouseMove","viewbox","prepend","mouseJoint","mouseGround","attr","findBody","mouseForce","MOVE","END","CANCEL","keyCode","charCodeAt","downKeys","updateActiveKeys","keydown","String","fromCharCode","keyup","down","char","right","left","up","fire","_create","fill","fillStyle","drawEdge","drawChain","appendTo","__lastX","__lastY","__lastR","drawJoint","cx","cy","lw","texture","stretch","Image","_extend","fork","_atlases_map","_atlases_arr","Atlas","deprecated","ppu","trim","textures","factory","cutouts","sprites","make","top","bottom","startsWith","subquery","select","Selection","imagePath","imageRatio","imageloader","nfTexture","nfSelection","link","one","msg","replace","slice","error","str","_ensure","_last","_prev","_ts_parent","_ts_children","insertBefore","self","insertAfter","_label","_attrs","_flags","visible","hide","show","first","visit","visitor","end","more","prependTo","insertNext","insertPrev","_ts_touch","hitTest","hit","listen","types","join","trigger","Root","request","lastTime","_mo_touch","fps","touch_root","viewport","_viewport","_viewbox","box","attributes","getContext","repeat","img","setImage","tile","inner","_repeat","insert","_repeatTicker","_mo_stretch","owidth","oheight","Anim","_fps","FPS","_ft","_time","_index","_frames","ignore","moveFrame","stop","_callback","anim","frames","gotoFrame","setFrames","frame","resize","move","play","Str","setFont","_item","setValue","_value","_spacing","row","sequence","column","_padding","_layoutTiker","_mo_seq","alignChildren","_mo_seqAlign","_mo_box","layer","padding","pad","spacing","space","Easing","Tween","duration","delay","_end","_duration","_delay","pinning","tween","_tweens","ticktime","head","unshift","over","_start","_easing","_done","ease","easing","_identity","_cache","_modes","_easings","token","exec","params","fc","names","asin","elem","locate","event","ev","loc","touches","clientX","clientY","rect","getBoundingClientRect","clientLeft","clientTop","locateElevent","lookup","collect","targets","timeStamp","mouse","raw","cancel","subscribe","CLICK","handleStart","handleEnd","handleMove","handleCancel","clicklist","cancellist","preventDefault","defineValue","_supported","app-loader","configs","full","getElementById","style","firstChild","devicePixelRatio","backingStoreRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","requestAnimationFrame","msRequestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","oRequestAnimationFrame","clearRect","innerWidth","screen","innerHeight","clientWidth","clientHeight","backgroundColor","image-loader","success","onload","onerror"],"mappings":"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","file":"planck-with-testbed.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 63);\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec2;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec2(x, y) {\n  if (!(this instanceof Vec2)) {\n    return new Vec2(x, y);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0;\n    this.y = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    this.x = x;\n    this.y = y;\n  }\n  _ASSERT && Vec2.assert(this);\n}\n\nVec2.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y\n  };\n};\n\nVec2._deserialize = function(data) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  return obj;\n};\n\nVec2.zero = function() {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = 0;\n  obj.y = 0;\n  return obj;\n};\n\nVec2.neo = function(x, y) {\n  var obj = Object.create(Vec2.prototype);\n  obj.x = x;\n  obj.y = y;\n  return obj;\n};\n\nVec2.clone = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(v.x, v.y);\n};\n\nVec2.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec2.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y);\n}\n\nVec2.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec2.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec2!');\n  }\n}\n\nVec2.prototype.clone = function() {\n  return Vec2.clone(this);\n}\n\n/**\n * Set this vector to all zeros.\n * \n * @returns this\n */\nVec2.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  return this;\n}\n\n/**\n * Set this vector to some specified coordinates.\n * \n * @returns this\n */\nVec2.prototype.set = function(x, y) {\n  if (typeof x === 'object') {\n    _ASSERT && Vec2.assert(x);\n    this.x = x.x;\n    this.y = x.y;\n  } else {\n    _ASSERT && Math.assert(x);\n    _ASSERT && Math.assert(y);\n    this.x = x;\n    this.y = y;\n  }\n  return this;\n}\n\n/**\n * @deprecated Use setCombine or setMul\n */\nVec2.prototype.wSet = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.setCombine(a, v, b, w);\n  } else {\n    return this.setMul(a, v);\n  }\n}\n\n/**\n * Set linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.setCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\nVec2.prototype.setMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x = x;\n  this.y = y;\n  return this;\n}\n\n/**\n * Add a vector to this vector.\n * \n * @returns this\n */\nVec2.prototype.add = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x += w.x;\n  this.y += w.y;\n  return this;\n}\n\n/**\n * @deprecated Use addCombine or addMul\n */\nVec2.prototype.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.addCombine(a, v, b, w);\n  } else {\n    return this.addMul(a, v);\n  }\n}\n\n/**\n * Add linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.addCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\nVec2.prototype.addMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x += x;\n  this.y += y;\n  return this;\n}\n\n/**\n * @deprecated Use subCombine or subMul\n */\nVec2.prototype.wSub = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return this.subCombine(a, v, b, w);\n  } else {\n    return this.subMul(a, v);\n  }}\n\n/**\n * Subtract linear combination of v and w: `a * v + b * w`\n */\nVec2.prototype.subCombine = function(a, v, b, w) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Math.assert(b);\n  _ASSERT && Vec2.assert(w);\n  var x = a * v.x + b * w.x;\n  var y = a * v.y + b * w.y;\n\n  // `this` may be `w`\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\nVec2.prototype.subMul = function(a, v) {\n  _ASSERT && Math.assert(a);\n  _ASSERT && Vec2.assert(v);\n  var x = a * v.x;\n  var y = a * v.y;\n\n  this.x -= x;\n  this.y -= y;\n  return this;\n}\n\n/**\n * Subtract a vector from this vector\n * \n * @returns this\n */\nVec2.prototype.sub = function(w) {\n  _ASSERT && Vec2.assert(w);\n  this.x -= w.x;\n  this.y -= w.y;\n  return this;\n}\n\n/**\n * Multiply this vector by a scalar.\n * \n * @returns this\n */\nVec2.prototype.mul = function(m) {\n  _ASSERT && Math.assert(m);\n  this.x *= m;\n  this.y *= m;\n  return this;\n}\n\n/**\n * Get the length of this vector (the norm).\n * \n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.prototype.length = function() {\n  return Vec2.lengthOf(this);\n}\n\n/**\n * Get the length squared.\n */\nVec2.prototype.lengthSquared = function() {\n  return Vec2.lengthSquared(this);\n}\n\n/**\n * Convert this vector into a unit vector.\n * \n * @returns old length\n */\nVec2.prototype.normalize = function() {\n  var length = this.length();\n  if (length < Math.EPSILON) {\n    return 0.0;\n  }\n  var invLength = 1.0 / length;\n  this.x *= invLength;\n  this.y *= invLength;\n  return length;\n}\n\n/**\n * Get the length of this vector (the norm).\n *\n * For performance, use this instead of lengthSquared (if possible).\n */\nVec2.lengthOf = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Math.sqrt(v.x * v.x + v.y * v.y);\n}\n\n/**\n * Get the length squared.\n */\nVec2.lengthSquared = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return v.x * v.x + v.y * v.y;\n}\n\nVec2.distance = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nVec2.distanceSquared = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  var dx = v.x - w.x, dy = v.y - w.y;\n  return dx * dx + dy * dy;\n}\n\nVec2.areEqual = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v == w || typeof w === 'object' && w !== null && v.x === w.x && v.y === w.y;\n}\n\n/**\n * Get the skew vector such that dot(skew_vec, other) == cross(vec, other)\n */\nVec2.skew = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.y, v.x);\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec2.dot = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return v.x * w.x + v.y * w.y;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n * \n * Perform the cross product on a vector and a scalar. In 2D this produces a\n * vector.\n */\nVec2.cross = function(v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y, -w * v.x);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y, v * w.x);\n\n  } else {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return v.x * w.y - v.y * w.x\n  }\n}\n\n/**\n * Returns `a + (v x w)`\n */\nVec2.addCross = function(a, v, w) {\n  if (typeof w === 'number') {\n    _ASSERT && Vec2.assert(v);\n    _ASSERT && Math.assert(w);\n    return Vec2.neo(w * v.y + a.x, -w * v.x + a.y);\n\n  } else if (typeof v === 'number') {\n    _ASSERT && Math.assert(v);\n    _ASSERT && Vec2.assert(w);\n    return Vec2.neo(-v * w.y + a.x, v * w.x + a.y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nVec2.add = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x + w.x, v.y + w.y);\n}\n\n/**\n * @deprecated Use combine\n */\nVec2.wAdd = function(a, v, b, w) {\n  if (typeof b !== 'undefined' || typeof w !== 'undefined') {\n    return Vec2.combine(a, v, b, w);\n  } else {\n    return Vec2.mul(a, v);\n  }\n}\n\nVec2.combine = function(a, v, b, w) {\n  return Vec2.zero().setCombine(a, v, b, w);\n}\n\nVec2.sub = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(v.x - w.x, v.y - w.y);\n}\n\nVec2.mul = function(a, b) {\n  if (typeof a === 'object') {\n    _ASSERT && Vec2.assert(a);\n    _ASSERT && Math.assert(b);\n    return Vec2.neo(a.x * b, a.y * b);\n\n  } else if (typeof b === 'object') {\n    _ASSERT && Math.assert(a);\n    _ASSERT && Vec2.assert(b);\n    return Vec2.neo(a * b.x, a * b.y);\n  }\n}\n\nVec2.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  return this;\n}\n\nVec2.neg = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(-v.x, -v.y);\n}\n\nVec2.abs = function(v) {\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Math.abs(v.x), Math.abs(v.y));\n}\n\nVec2.mid = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo((v.x + w.x) * 0.5, (v.y + w.y) * 0.5);\n}\n\nVec2.upper = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.max(v.x, w.x), Math.max(v.y, w.y));\n}\n\nVec2.lower = function(v, w) {\n  _ASSERT && Vec2.assert(v);\n  _ASSERT && Vec2.assert(w);\n  return Vec2.neo(Math.min(v.x, w.x), Math.min(v.y, w.y));\n}\n\nVec2.prototype.clamp = function(max) {\n  var lengthSqr = this.x * this.x + this.y * this.y;\n  if (lengthSqr > max * max) {\n    var invLength = Math.invSqrt(lengthSqr);\n    this.x *= invLength * max;\n    this.y *= invLength * max;\n  }\n  return this;\n}\n\nVec2.clamp = function(v, max) {\n  v = Vec2.neo(v.x, v.y);\n  v.clamp(max);\n  return v;\n}\n\n/**\n * @experimental\n */\nVec2.scaleFn = function (x, y) {\n  return function (v) {\n    return Vec2.neo(v.x * x, v.y * y);\n  };\n}\n\n/**\n * @experimental\n */\nVec2.translateFn = function(x, y) {\n  return function (v) {\n    return Vec2.neo(v.x + x, v.y + y);\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar native = Math;\nvar math = module.exports = create(native);\n\nmath.EPSILON = 1e-9; // TODO\n\n/**\n * This function is used to ensure that a floating point number is not a NaN or\n * infinity.\n */\nmath.isFinite = function(x) {\n  return (typeof x === 'number') && isFinite(x) && !isNaN(x);\n}\n\nmath.assert = function(x) {\n  if (!_ASSERT) return;\n  if (!math.isFinite(x)) {\n    _DEBUG && common.debug(x);\n    throw new Error('Invalid Number!');\n  }\n}\n\n/**\n * TODO: This is a approximate yet fast inverse square-root.\n */\nmath.invSqrt = function(x) {\n  // TODO\n  return 1 / native.sqrt(x);\n}\n\n/**\n * Next Largest Power of 2 Given a binary integer value x, the next largest\n * power of 2 can be computed by a SWAR algorithm that recursively \"folds\" the\n * upper bits into the lower bits. This process yields a bit vector with the\n * same most significant 1 as x, but all 1's below it. Adding 1 to that value\n * yields the next largest power of 2. For a 32-bit value:\n */\nmath.nextPowerOfTwo = function(x) {\n  // TODO\n  x |= (x >> 1);\n  x |= (x >> 2);\n  x |= (x >> 4);\n  x |= (x >> 8);\n  x |= (x >> 16);\n  return x + 1;\n}\n\nmath.isPowerOfTwo = function(x) {\n  return x > 0 && (x & (x - 1)) == 0;\n}\n\nmath.mod = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmath.clamp = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmath.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1;\n    min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min;\n    min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.debug = function() {\n  if (!_DEBUG) return;\n  console.log.apply(console, arguments);\n};\n\nexports.assert = function(statement, err, log) {\n  if (!_ASSERT) return;\n  if (statement) return;\n  log && console.log(log);\n  throw new Error(err);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Rot;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Math = require('./Math');\n\n// TODO merge with Transform\n\n/**\n * Initialize from an angle in radians.\n */\nfunction Rot(angle) {\n  if (!(this instanceof Rot)) {\n    return new Rot(angle);\n  }\n  if (typeof angle === 'number') {\n    this.setAngle(angle);\n  } else if (typeof angle === 'object') {\n      this.set(angle);\n  } else {\n    this.setIdentity();\n  }\n}\n\nRot.neo = function(angle) {\n  var obj = Object.create(Rot.prototype);\n  obj.setAngle(angle);\n  return obj;\n};\n\nRot.clone = function(rot) {\n  _ASSERT && Rot.assert(rot);\n  var obj = Object.create(Rot.prototype);\n  obj.s = rot.s;\n  obj.c = rot.c;\n  return obj;\n};\n\nRot.identity = function() {\n  var obj = Object.create(Rot.prototype);\n  obj.s = 0.0;\n  obj.c = 1.0;\n  return obj;\n};\n\nRot.isValid = function(o) {\n  return o && Math.isFinite(o.s) && Math.isFinite(o.c);\n}\n\nRot.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Rot.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Rot!');\n  }\n}\n\n/**\n * Set to the identity rotation.\n */\nRot.prototype.setIdentity = function() {\n  this.s = 0.0;\n  this.c = 1.0;\n}\n\nRot.prototype.set = function(angle) {\n  if (typeof angle === 'object') {\n    _ASSERT && Rot.assert(angle);\n    this.s = angle.s;\n    this.c = angle.c;\n\n  } else {\n    _ASSERT && Math.assert(angle);\n    // TODO_ERIN optimize\n    this.s = Math.sin(angle);\n    this.c = Math.cos(angle);\n  }\n}\n\n/**\n * Set using an angle in radians.\n */\nRot.prototype.setAngle = function(angle) {\n  _ASSERT && Math.assert(angle);\n  // TODO_ERIN optimize\n  this.s = Math.sin(angle);\n  this.c = Math.cos(angle);\n};\n\n/**\n * Get the angle in radians.\n */\nRot.prototype.getAngle = function() {\n  return Math.atan2(this.s, this.c);\n}\n\n/**\n * Get the x-axis.\n */\nRot.prototype.getXAxis = function() {\n  return Vec2.neo(this.c, this.s);\n}\n\n/**\n * Get the u-axis.\n */\nRot.prototype.getYAxis = function() {\n  return Vec2.neo(-this.s, this.c);\n}\n\n/**\n * Multiply two rotations: q * r\n * \n * @returns Rot\n * \n * Rotate a vector\n * \n * @returns Vec2\n */\nRot.mul = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n    // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n    // s = qs * rc + qc * rs\n    // c = qc * rc - qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.s * m.c + rot.c * m.s;\n    qr.c = rot.c * m.c - rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulRot = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Rot.assert(m);\n  // [qc -qs] * [rc -rs] = [qc*rc-qs*rs -qc*rs-qs*rc]\n  // [qs qc] [rs rc] [qs*rc+qc*rs -qs*rs+qc*rc]\n  // s = qs * rc + qc * rs\n  // c = qc * rc - qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.s * m.c + rot.c * m.s;\n  qr.c = rot.c * m.c - rot.s * m.s;\n  return qr;\n}\n\nRot.mulVec2 = function(rot, m) {\n  _ASSERT && Rot.assert(rot);\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x - rot.s * m.y, rot.s * m.x + rot.c * m.y);\n}\n\nRot.mulSub = function(rot, v, w) {\n  var x = rot.c * (v.x - w.x) - rot.s * (v.y - w.y);\n  var y = rot.s * (v.x - w.x) + rot.c * (v.y - w.y);\n  return Vec2.neo(x, y);\n}\n\n/**\n * Transpose multiply two rotations: qT * r\n * \n * @returns Rot\n * \n * Inverse rotate a vector\n * \n * @returns Vec2\n */\nRot.mulT = function(rot, m) {\n  if ('c' in m && 's' in m) {\n    _ASSERT && Rot.assert(m);\n    // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n    // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n    // s = qc * rs - qs * rc\n    // c = qc * rc + qs * rs\n    var qr = Rot.identity();\n    qr.s = rot.c * m.s - rot.s * m.c;\n    qr.c = rot.c * m.c + rot.s * m.s;\n    return qr;\n\n  } else if ('x' in m && 'y' in m) {\n    _ASSERT && Vec2.assert(m);\n    return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n  }\n}\n\nRot.mulTRot = function(rot, m) {\n  _ASSERT && Rot.assert(m);\n  // [ qc qs] * [rc -rs] = [qc*rc+qs*rs -qc*rs+qs*rc]\n  // [-qs qc] [rs rc] [-qs*rc+qc*rs qs*rs+qc*rc]\n  // s = qc * rs - qs * rc\n  // c = qc * rc + qs * rs\n  var qr = Rot.identity();\n  qr.s = rot.c * m.s - rot.s * m.c;\n  qr.c = rot.c * m.c + rot.s * m.s;\n  return qr;\n}\n\nRot.mulTVec2 = function(rot, m) {\n  _ASSERT && Vec2.assert(m);\n  return Vec2.neo(rot.c * m.x + rot.s * m.y, -rot.s * m.x + rot.c * m.y);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\n// TODO merge with World options?\n\nvar Settings = exports;\n\n/**\n * Tuning constants based on meters-kilograms-seconds (MKS) units.\n */\n\n// Collision\n/**\n * The maximum number of contact points between two convex shapes. Do not change\n * this value.\n */\nSettings.maxManifoldPoints = 2;\n\n/**\n * The maximum number of vertices on a convex polygon. You cannot increase this\n * too much because BlockAllocator has a maximum object size.\n */\nSettings.maxPolygonVertices = 12;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This allows proxies to move\n * by a small amount without triggering a tree adjustment. This is in meters.\n */\nSettings.aabbExtension = 0.1;\n\n/**\n * This is used to fatten AABBs in the dynamic tree. This is used to predict the\n * future position based on the current displacement. This is a dimensionless\n * multiplier.\n */\nSettings.aabbMultiplier = 2.0;\n\n/**\n * A small length used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.linearSlop = 0.005;\nSettings.linearSlopSquared = Settings.linearSlop * Settings.linearSlop;\n\n/**\n * A small angle used as a collision and constraint tolerance. Usually it is\n * chosen to be numerically significant, but visually insignificant.\n */\nSettings.angularSlop = (2.0 / 180.0 * Math.PI);\n\n/**\n * The radius of the polygon/edge shape skin. This should not be modified.\n * Making this smaller means polygons will have an insufficient buffer for\n * continuous collision. Making it larger may create artifacts for vertex\n * collision.\n */\nSettings.polygonRadius = (2.0 * Settings.linearSlop);\n\n/**\n * Maximum number of sub-steps per contact in continuous physics simulation.\n */\nSettings.maxSubSteps = 8;\n\n// Dynamics\n\n/**\n * Maximum number of contacts to be handled to solve a TOI impact.\n */\nSettings.maxTOIContacts = 32;\n\n/**\n * Maximum iterations to solve a TOI.\n */\nSettings.maxTOIIterations = 20;\n\n/**\n * Maximum iterations to find Distance.\n */\nSettings.maxDistnceIterations = 20;\n\n/**\n * A velocity threshold for elastic collisions. Any collision with a relative\n * linear velocity below this threshold will be treated as inelastic.\n */\nSettings.velocityThreshold = 1.0;\n\n/**\n * The maximum linear position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxLinearCorrection = 0.2;\n\n/**\n * The maximum angular position correction used when solving constraints. This\n * helps to prevent overshoot.\n */\nSettings.maxAngularCorrection = (8.0 / 180.0 * Math.PI);\n\n/**\n * The maximum linear velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxTranslation = 2.0;\nSettings.maxTranslationSquared = (Settings.maxTranslation * Settings.maxTranslation);\n\n/**\n * The maximum angular velocity of a body. This limit is very large and is used\n * to prevent numerical problems. You shouldn't need to adjust this.\n */\nSettings.maxRotation = (0.5 * Math.PI)\nSettings.maxRotationSquared = (Settings.maxRotation * Settings.maxRotation)\n\n/**\n * This scale factor controls how fast overlap is resolved. Ideally this would\n * be 1 so that overlap is removed in one time step. However using values close\n * to 1 often lead to overshoot.\n */\nSettings.baumgarte = 0.2;\nSettings.toiBaugarte = 0.75;\n\n// Sleep\n\n/**\n * The time that a body must be still before it will go to sleep.\n */\nSettings.timeToSleep = 0.5;\n\n/**\n * A body cannot sleep if its linear velocity is above this tolerance.\n */\nSettings.linearSleepTolerance = 0.01;\n\nSettings.linearSleepToleranceSqr = Math.pow(Settings.linearSleepTolerance, 2);\n\n/**\n * A body cannot sleep if its angular velocity is above this tolerance.\n */\nSettings.angularSleepTolerance = (2.0 / 180.0 * Math.PI);\n\nSettings.angularSleepToleranceSqr = Math.pow(Settings.angularSleepTolerance, 2);\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Transform;\n\nvar common = require('../util/common');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n// TODO merge with Rot\n\n/**\n * A transform contains translation and rotation. It is used to represent the\n * position and orientation of rigid frames. Initialize using a position vector\n * and a rotation.\n *\n * @prop {Vec2} position\n * @prop {Rot} rotation\n */\nfunction Transform(position, rotation) {\n  if (!(this instanceof Transform)) {\n    return new Transform(position, rotation);\n  }\n  this.p = Vec2.zero();\n  this.q = Rot.identity();\n  if (typeof position !== 'undefined') {\n    this.p.set(position);\n  }\n  if (typeof rotation !== 'undefined') {\n    this.q.set(rotation);\n  }\n};\n\nTransform.clone = function(xf) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(xf.p);\n  obj.q = Rot.clone(xf.q);\n  return obj;\n};\n\nTransform.neo = function(position, rotation) {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.clone(position);\n  obj.q = Rot.clone(rotation);\n  return obj;\n};\n\nTransform.identity = function() {\n  var obj = Object.create(Transform.prototype);\n  obj.p = Vec2.zero();\n  obj.q = Rot.identity();\n  return obj;\n};\n\n/**\n * Set this to the identity transform.\n */\nTransform.prototype.setIdentity = function() {\n  this.p.setZero();\n  this.q.setIdentity();\n}\n\n/**\n * Set this based on the position and angle.\n */\nTransform.prototype.set = function(a, b) {\n  if (typeof b === 'undefined') {\n    this.p.set(a.p);\n    this.q.set(a.q);\n  } else {\n    this.p.set(a);\n    this.q.set(b);\n  }\n}\n\nTransform.isValid = function(o) {\n  return o && Vec2.isValid(o.p) && Rot.isValid(o.q);\n}\n\nTransform.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Transform.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Transform!');\n  }\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mul = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if (Array.isArray(b)) {\n    var arr = [];\n    for (var i = 0; i < b.length; i++) {\n      arr[i] = Transform.mul(a, b[i]);\n    }\n    return arr;\n\n  } else if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n    var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n    // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n    var xf = Transform.identity();\n    xf.q = Rot.mulRot(a.q, b.q);\n    xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n    return xf;\n  }\n}\n\n/**\n * @deprecated Use mulFn instead.\n */\nTransform.mulAll = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  var arr = [];\n  for (var i = 0; i < b.length; i++) {\n    arr[i] = Transform.mul(a, b[i]);\n  }\n  return arr;\n}\n\n/**\n * @experimental\n */\nTransform.mulFn = function(a) {\n  _ASSERT && Transform.assert(a);\n  return function(b) {\n    return Transform.mul(a, b);\n  };\n}\n\nTransform.mulVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = (a.q.c * b.x - a.q.s * b.y) + a.p.x;\n  var y = (a.q.s * b.x + a.q.c * b.y) + a.p.y;\n  return Vec2.neo(x, y);\n}\n\nTransform.mulXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q.Rot(B.q.Rot(v1) + B.p) + A.p\n  // = (A.q * B.q).Rot(v1) + A.q.Rot(B.p) + A.p\n  var xf = Transform.identity();\n  xf.q = Rot.mulRot(a.q, b.q);\n  xf.p = Vec2.add(Rot.mulVec2(a.q, b.p), a.p);\n  return xf;\n}\n\n/**\n * @param {Transform} a\n * @param {Vec2} b\n * @returns {Vec2}\n *\n * @param {Transform} a\n * @param {Transform} b\n * @returns {Transform}\n */\nTransform.mulT = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  if ('x' in b && 'y' in b) {\n    _ASSERT && Vec2.assert(b)\n    var px = b.x - a.p.x;\n    var py = b.y - a.p.y;\n    var x = (a.q.c * px + a.q.s * py);\n    var y = (-a.q.s * px + a.q.c * py);\n    return Vec2.neo(x, y);\n\n  } else if ('p' in b && 'q' in b) {\n    _ASSERT && Transform.assert(b);\n    // v2 = A.q' * (B.q * v1 + B.p - A.p)\n    // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n    var xf = Transform.identity();\n    xf.q.set(Rot.mulTRot(a.q, b.q));\n    xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n    return xf;\n  }\n}\n\nTransform.mulTVec2 = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Vec2.assert(b)\n  var px = b.x - a.p.x;\n  var py = b.y - a.p.y;\n  var x = (a.q.c * px + a.q.s * py);\n  var y = (-a.q.s * px + a.q.c * py);\n  return Vec2.neo(x, y);\n}\n\nTransform.mulTXf = function(a, b) {\n  _ASSERT && Transform.assert(a);\n  _ASSERT && Transform.assert(b);\n  // v2 = A.q' * (B.q * v1 + B.p - A.p)\n  // = A.q' * B.q * v1 + A.q' * (B.p - A.p)\n  var xf = Transform.identity();\n  xf.q.set(Rot.mulTRot(a.q, b.q));\n  xf.p.set(Rot.mulTVec2(a.q, Vec2.sub(b.p, a.p)));\n  return xf;\n}\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nmodule.exports = function(to, from) {\n  if (to === null || typeof to === 'undefined') {\n    to = {};\n  }\n\n  for ( var key in from) {\n    if (from.hasOwnProperty(key) && typeof to[key] === 'undefined') {\n      to[key] = from[key];\n    }\n  }\n\n  if (typeof Object.getOwnPropertySymbols === 'function') {\n    var symbols = Object.getOwnPropertySymbols(from);\n    for (var i = 0; i < symbols.length; i++) {\n      var symbol = symbols[i];\n      if (from.propertyIsEnumerable(symbol) && typeof to[key] === 'undefined') {\n        to[symbol] = from[symbol];\n      }\n    }\n  }\n  return to;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Sweep;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\nvar Transform = require('./Transform');\n\n/**\n * This describes the motion of a body/shape for TOI computation. Shapes are\n * defined with respect to the body origin, which may not coincide with the\n * center of mass. However, to support dynamics we must interpolate the center\n * of mass position.\n * \n * @prop {Vec2} localCenter Local center of mass position\n * @prop {Vec2} c World center position\n * @prop {float} a World angle\n * @prop {float} alpha0 Fraction of the current time step in the range [0,1], c0\n *       and a0 are c and a at alpha0.\n */\nfunction Sweep(c, a) {\n  _ASSERT && common.assert(typeof c === 'undefined');\n  _ASSERT && common.assert(typeof a === 'undefined');\n  this.localCenter = Vec2.zero();\n  this.c = Vec2.zero();\n  this.a = 0;\n  this.alpha0 = 0;\n  this.c0 = Vec2.zero();\n  this.a0 = 0;\n}\n\nSweep.prototype.setTransform = function(xf) {\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n\n  this.a = xf.q.getAngle();\n  this.a0 = xf.q.getAngle();\n};\n\nSweep.prototype.setLocalCenter = function(localCenter, xf) {\n  this.localCenter.set(localCenter);\n\n  var c = Transform.mulVec2(xf, this.localCenter);\n  this.c.set(c);\n  this.c0.set(c);\n};\n\n/**\n * Get the interpolated transform at a specific time.\n * \n * @param xf\n * @param beta A factor in [0,1], where 0 indicates alpha0\n */\nSweep.prototype.getTransform = function(xf, beta) {\n  beta = typeof beta === 'undefined' ? 0 : beta;\n  xf.q.setAngle((1.0 - beta) * this.a0 + beta * this.a);\n  xf.p.setCombine((1.0 - beta), this.c0, beta, this.c);\n\n  // shift to origin\n  xf.p.sub(Rot.mulVec2(xf.q, this.localCenter));\n};\n\n/**\n * Advance the sweep forward, yielding a new initial state.\n * \n * @param {float} alpha The new initial time\n */\nSweep.prototype.advance = function(alpha) {\n  _ASSERT && common.assert(this.alpha0 < 1.0);\n  var beta = (alpha - this.alpha0) / (1.0 - this.alpha0);\n  this.c0.setCombine(beta, this.c, 1 - beta, this.c0);\n  this.a0 = beta * this.a + (1 - beta) * this.a0;\n  this.alpha0 = alpha;\n};\n\nSweep.prototype.forward = function() {\n  this.a0 = this.a;\n  this.c0.set(this.c);\n};\n\n/**\n * normalize the angles in radians to be between -pi and pi.\n */\nSweep.prototype.normalize = function() {\n  var a0 = Math.mod(this.a0, -Math.PI, +Math.PI);\n  this.a -= this.a0 - a0;\n  this.a0 = a0;\n};\n\nSweep.prototype.clone = function() {\n  var clone = new Sweep();\n  clone.localCenter.set(this.localCenter);\n  clone.alpha0 = this.alpha0;\n  clone.a0 = this.a0;\n  clone.a = this.a;\n  clone.c0.set(this.c0);\n  clone.c.set(this.c);\n  return clone;\n};\n\nSweep.prototype.set = function(that) {\n  this.localCenter.set(that.localCenter);\n  this.alpha0 = that.alpha0;\n  this.a0 = that.a0;\n  this.a = that.a;\n  this.c0.set(that.c0);\n  this.c.set(that.c);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat22;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\n\n/**\n * A 2-by-2 matrix. Stored in column-major order.\n */\nfunction Mat22(a, b, c, d) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec2.clone(a);\n    this.ey = Vec2.clone(b);\n  } else if (typeof a === 'number') {\n    this.ex = Vec2.neo(a, c);\n    this.ey = Vec2.neo(b, d)\n  } else {\n    this.ex = Vec2.zero();\n    this.ey = Vec2.zero()\n  }\n};\n\nMat22.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat22.isValid = function(o) {\n  return o && Vec2.isValid(o.ex) && Vec2.isValid(o.ey);\n};\n\nMat22.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat22.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat22!');\n  }\n};\n\nMat22.prototype.set = function(a, b, c, d) {\n  if (typeof a === 'number' && typeof b === 'number' && typeof c === 'number'\n      && typeof d === 'number') {\n    this.ex.set(a, c);\n    this.ey.set(b, d);\n\n  } else if (typeof a === 'object' && typeof b === 'object') {\n    this.ex.set(a);\n    this.ey.set(b);\n\n  } else if (typeof a === 'object') {\n    _ASSERT && Mat22.assert(a);\n    this.ex.set(a.ex);\n    this.ey.set(a.ey);\n\n  } else {\n    _ASSERT && common.assert(false);\n  }\n}\n\nMat22.prototype.setIdentity = function() {\n  this.ex.x = 1.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 1.0;\n}\n\nMat22.prototype.setZero = function() {\n  this.ex.x = 0.0;\n  this.ey.x = 0.0;\n  this.ex.y = 0.0;\n  this.ey.y = 0.0;\n}\n\nMat22.prototype.getInverse = function() {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var imx = new Mat22();\n  imx.ex.x = det * d;\n  imx.ey.x = -det * b;\n  imx.ex.y = -det * c;\n  imx.ey.y = det * a;\n  return imx;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n */\nMat22.prototype.solve = function(v) {\n  _ASSERT && Vec2.assert(v);\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var w = Vec2.zero();\n  w.x = det * (d * v.x - b * v.y);\n  w.y = det * (a * v.y - c * v.x);\n  return w;\n}\n\n/**\n * Multiply a matrix times a vector. If a rotation matrix is provided, then this\n * transforms the vector from one frame to another.\n */\nMat22.mul = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) {\n    _ASSERT && Vec2.assert(v);\n    var x = mx.ex.x * v.x + mx.ey.x * v.y;\n    var y = mx.ex.y * v.x + mx.ey.y * v.y;\n    return Vec2.neo(x, y);\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulVec2 = function(mx, v) {\n  _ASSERT && Vec2.assert(v);\n  var x = mx.ex.x * v.x + mx.ey.x * v.y;\n  var y = mx.ex.y * v.x + mx.ey.y * v.y;\n  return Vec2.neo(x, y);\n}\n\nMat22.mulMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(v);\n  return new Mat22(Vec2.mul(mx, v.ex), Vec2.mul(mx, v.ey));\n  _ASSERT && common.assert(false);\n}\n\n/**\n * Multiply a matrix transpose times a vector. If a rotation matrix is provided,\n * then this transforms the vector from one frame to another (inverse\n * transform).\n */\nMat22.mulT = function(mx, v) {\n  if (v && 'x' in v && 'y' in v) { // Vec2\n    _ASSERT && Vec2.assert(v);\n    return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n\n  } else if (v && 'ex' in v && 'ey' in v) { // Mat22\n    _ASSERT && Mat22.assert(v);\n    var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n    var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n    return new Mat22(c1, c2);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat22.mulTVec2 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Vec2.assert(v);\n  return Vec2.neo(Vec2.dot(v, mx.ex), Vec2.dot(v, mx.ey));\n}\n\nMat22.mulTMat22 = function(mx, v) {\n  _ASSERT && Mat22.assert(mx);\n  _ASSERT && Mat22.assert(v);\n  var c1 = Vec2.neo(Vec2.dot(mx.ex, v.ex), Vec2.dot(mx.ey, v.ex));\n  var c2 = Vec2.neo(Vec2.dot(mx.ex, v.ey), Vec2.dot(mx.ey, v.ey));\n  return new Mat22(c1, c2);\n}\n\nMat22.abs = function(mx) {\n  _ASSERT && Mat22.assert(mx);\n  return new Mat22(Vec2.abs(mx.ex), Vec2.abs(mx.ey));\n}\n\nMat22.add = function(mx1, mx2) {\n  _ASSERT && Mat22.assert(mx1);\n  _ASSERT && Mat22.assert(mx2);\n  return new Mat22(Vec2.add(mx1.ex + mx2.ex), Vec2.add(mx1.ey + mx2.ey));\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Vec3;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\n\nfunction Vec3(x, y, z) {\n  if (!(this instanceof Vec3)) {\n    return new Vec3(x, y, z);\n  }\n  if (typeof x === 'undefined') {\n    this.x = 0, this.y = 0, this.z = 0;\n  } else if (typeof x === 'object') {\n    this.x = x.x, this.y = x.y, this.z = x.z;\n  } else {\n    this.x = x, this.y = y, this.z = z;\n  }\n  _ASSERT && Vec3.assert(this);\n};\n\nVec3.prototype._serialize = function() {\n  return {\n    x: this.x,\n    y: this.y,\n    z: this.z\n  };\n};\n\nVec3._deserialize = function(data) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = data.x;\n  obj.y = data.y;\n  obj.z = data.z;\n  return obj;\n};\n\nVec3.neo = function(x, y, z) {\n  var obj = Object.create(Vec3.prototype);\n  obj.x = x;\n  obj.y = y;\n  obj.z = z;\n  return obj;\n};\n\nVec3.clone = function(v) {\n  _ASSERT && Vec3.assert(v);\n  return Vec3.neo(v.x, v.y, v.z);\n};\n\nVec3.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\n/**\n * Does this vector contain finite coordinates?\n */\nVec3.isValid = function(v) {\n  return v && Math.isFinite(v.x) && Math.isFinite(v.y) && Math.isFinite(v.z);\n}\n\nVec3.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Vec3.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Vec3!');\n  }\n}\n\nVec3.prototype.setZero = function() {\n  this.x = 0.0;\n  this.y = 0.0;\n  this.z = 0.0;\n  return this;\n}\n\nVec3.prototype.set = function(x, y, z) {\n  this.x = x;\n  this.y = y;\n  this.z = z;\n  return this;\n}\n\nVec3.prototype.add = function(w) {\n  this.x += w.x;\n  this.y += w.y;\n  this.z += w.z;\n  return this;\n}\n\nVec3.prototype.sub = function(w) {\n  this.x -= w.x;\n  this.y -= w.y;\n  this.z -= w.z;\n  return this;\n}\n\nVec3.prototype.mul = function(m) {\n  this.x *= m;\n  this.y *= m;\n  this.z *= m;\n  return this;\n}\n\nVec3.areEqual = function(v, w) {\n  _ASSERT && Vec3.assert(v);\n  _ASSERT && Vec3.assert(w);\n  return v == w ||\n    typeof v === 'object' && v !== null &&\n    typeof w === 'object' && w !== null &&\n    v.x === w.x && v.y === w.y && v.z === w.z;\n}\n\n/**\n * Perform the dot product on two vectors.\n */\nVec3.dot = function(v, w) {\n  return v.x * w.x + v.y * w.y + v.z * w.z;\n}\n\n/**\n * Perform the cross product on two vectors. In 2D this produces a scalar.\n */\nVec3.cross = function(v, w) {\n  return new Vec3(\n    v.y * w.z - v.z * w.y,\n    v.z * w.x - v.x * w.z,\n    v.x * w.y - v.y * w.x\n  );\n}\n\nVec3.add = function(v, w) {\n  return new Vec3(v.x + w.x, v.y + w.y, v.z + w.z);\n}\n\nVec3.sub = function(v, w) {\n  return new Vec3(v.x - w.x, v.y - w.y, v.z - w.z);\n}\n\nVec3.mul = function(v, m) {\n  return new Vec3(m * v.x, m * v.y, m * v.z);\n}\n\nVec3.prototype.neg = function() {\n  this.x = -this.x;\n  this.y = -this.y;\n  this.z = -this.z;\n  return this;\n}\n\nVec3.neg = function(v) {\n  return new Vec3(-v.x, -v.y, -v.z);\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Velocity;\n\nvar Vec2 = require('./Vec2');\n\n/**\n * @prop {Vec2} v linear\n * @prop {float} w angular\n */\nfunction Velocity() {\n  this.v = Vec2.zero();\n  this.w = 0;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Position;\n\nvar Vec2 = require('./Vec2');\nvar Rot = require('./Rot');\n\n/**\n * @prop {Vec2} c location\n * @prop {float} a angle\n */\nfunction Position() {\n  this.c = Vec2.zero();\n  this.a = 0;\n}\n\nPosition.prototype.getTransform = function(xf, p) {\n  xf.q.set(this.a);\n  xf.p.set(Vec2.sub(this.c, Rot.mulVec2(xf.q, p)));\n  return xf;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Mat33;\n\nvar common = require('../util/common');\nvar Math = require('./Math');\nvar Vec2 = require('./Vec2');\nvar Vec3 = require('./Vec3');\n\n/**\n * A 3-by-3 matrix. Stored in column-major order.\n */\nfunction Mat33(a, b, c) {\n  if (typeof a === 'object' && a !== null) {\n    this.ex = Vec3.clone(a);\n    this.ey = Vec3.clone(b);\n    this.ez = Vec3.clone(c);\n  } else {\n    this.ex = Vec3();\n    this.ey = Vec3();\n    this.ez = Vec3();\n  }\n};\n\nMat33.prototype.toString = function() {\n  return JSON.stringify(this);\n};\n\nMat33.isValid = function(o) {\n  return o && Vec3.isValid(o.ex) && Vec3.isValid(o.ey) && Vec3.isValid(o.ez);\n};\n\nMat33.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!Mat33.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid Mat33!');\n  }\n};\n\n/**\n * Set this matrix to all zeros.\n */\nMat33.prototype.setZero = function() {\n  this.ex.setZero();\n  this.ey.setZero();\n  this.ez.setZero();\n  return this;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases.\n * \n * @param {Vec3} v\n * @returns {Vec3}\n */\nMat33.prototype.solve33 = function(v) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = new Vec3();\n  r.x = det * Vec3.dot(v, Vec3.cross(this.ey, this.ez));\n  r.y = det * Vec3.dot(this.ex, Vec3.cross(v, this.ez));\n  r.z = det * Vec3.dot(this.ex, Vec3.cross(this.ey, v));\n  return r;\n}\n\n/**\n * Solve A * x = b, where b is a column vector. This is more efficient than\n * computing the inverse in one-shot cases. Solve only the upper 2-by-2 matrix\n * equation.\n * \n * @param {Vec2} v\n * \n * @returns {Vec2}\n */\nMat33.prototype.solve22 = function(v) {\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a21 = this.ex.y;\n  var a22 = this.ey.y;\n  var det = a11 * a22 - a12 * a21;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var r = Vec2.zero();\n  r.x = det * (a22 * v.x - a12 * v.y);\n  r.y = det * (a11 * v.y - a21 * v.x);\n  return r;\n}\n\n/**\n * Get the inverse of this matrix as a 2-by-2. Returns the zero matrix if\n * singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getInverse22 = function(M) {\n  var a = this.ex.x;\n  var b = this.ey.x;\n  var c = this.ex.y;\n  var d = this.ey.y;\n  var det = a * d - b * c;\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  M.ex.x = det * d;\n  M.ey.x = -det * b;\n  M.ex.z = 0.0;\n  M.ex.y = -det * c;\n  M.ey.y = det * a;\n  M.ey.z = 0.0;\n  M.ez.x = 0.0;\n  M.ez.y = 0.0;\n  M.ez.z = 0.0;\n}\n\n/**\n * Get the symmetric inverse of this matrix as a 3-by-3. Returns the zero matrix\n * if singular.\n * \n * @param {Mat33} M\n */\nMat33.prototype.getSymInverse33 = function(M) {\n  var det = Vec3.dot(this.ex, Vec3.cross(this.ey, this.ez));\n  if (det != 0.0) {\n    det = 1.0 / det;\n  }\n  var a11 = this.ex.x;\n  var a12 = this.ey.x;\n  var a13 = this.ez.x;\n  var a22 = this.ey.y;\n  var a23 = this.ez.y;\n  var a33 = this.ez.z;\n\n  M.ex.x = det * (a22 * a33 - a23 * a23);\n  M.ex.y = det * (a13 * a23 - a12 * a33);\n  M.ex.z = det * (a12 * a23 - a13 * a22);\n\n  M.ey.x = M.ex.y;\n  M.ey.y = det * (a11 * a33 - a13 * a13);\n  M.ey.z = det * (a13 * a12 - a11 * a23);\n\n  M.ez.x = M.ex.z;\n  M.ez.y = M.ey.z;\n  M.ez.z = det * (a11 * a22 - a12 * a12);\n}\n\n/**\n * Multiply a matrix times a vector.\n * \n * @param {Mat33} a\n * @param {Vec3|Vec2} b\n * \n * @returns {Vec3|Vec2}\n */\nMat33.mul = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  if (b && 'z' in b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec3.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n    var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n    var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n    return new Vec3(x, y, z);\n\n  } else if (b && 'y' in b && 'x' in b) {\n    _ASSERT && Vec2.assert(b);\n    var x = a.ex.x * b.x + a.ey.x * b.y;\n    var y = a.ex.y * b.x + a.ey.y * b.y;\n    return Vec2.neo(x, y);\n  }\n\n  _ASSERT && common.assert(false);\n}\n\nMat33.mulVec3 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec3.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y + a.ez.x * b.z;\n  var y = a.ex.y * b.x + a.ey.y * b.y + a.ez.y * b.z;\n  var z = a.ex.z * b.x + a.ey.z * b.y + a.ez.z * b.z;\n  return new Vec3(x, y, z);\n}\n\nMat33.mulVec2 = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Vec2.assert(b);\n  var x = a.ex.x * b.x + a.ey.x * b.y;\n  var y = a.ex.y * b.x + a.ey.y * b.y;\n  return Vec2.neo(x, y);\n}\n\nMat33.add = function(a, b) {\n  _ASSERT && Mat33.assert(a);\n  _ASSERT && Mat33.assert(b);\n  return new Mat33(\n    Vec3.add(a.ex + b.ex),\n    Vec3.add(a.ey + b.ey),\n    Vec3.add(a.ez + b.ez)\n  );\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Joint;\n\nvar common = require('./util/common');\n\n/**\n * A joint edge is used to connect bodies and joints together in a joint graph\n * where each body is a node and each joint is an edge. A joint edge belongs to\n * a doubly linked list maintained in each attached body. Each joint has two\n * joint nodes, one for each attached body.\n * \n * @prop {Body} other provides quick access to the other body attached.\n * @prop {Joint} joint the joint\n * @prop {JointEdge} prev the previous joint edge in the body's joint list\n * @prop {JointEdge} next the next joint edge in the body's joint list\n */\nfunction JointEdge() {\n  this.other = null;\n  this.joint = null;\n  this.prev = null;\n  this.next = null;\n};\n\n/**\n * @typedef {Object} JointDef\n *\n * Joint definitions are used to construct joints.\n * \n * @prop userData Use this to attach application specific data to your joints.\n *       void userData;\n * @prop {boolean} collideConnected Set this flag to true if the attached bodies\n *       should collide.\n *\n * @prop {Body} bodyA The first attached body.\n * @prop {Body} bodyB The second attached body.\n */\n\nvar DEFAULTS = {\n  userData : null,\n  collideConnected : false\n};\n\n/**\n * The base joint class. Joints are used to constraint two bodies together in\n * various fashions. Some joints also feature limits and motors.\n * \n * @param {JointDef} def\n */\nfunction Joint(def, bodyA, bodyB) {\n  bodyA = def.bodyA || bodyA;\n  bodyB = def.bodyB || bodyB;\n\n  _ASSERT && common.assert(bodyA);\n  _ASSERT && common.assert(bodyB);\n  _ASSERT && common.assert(bodyA != bodyB);\n\n  this.m_type = 'unknown-joint';\n\n  this.m_bodyA = bodyA;\n  this.m_bodyB = bodyB;\n\n  this.m_index = 0;\n  this.m_collideConnected = !!def.collideConnected;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_edgeA = new JointEdge();\n  this.m_edgeB = new JointEdge();\n\n  this.m_islandFlag = false;\n  this.m_userData = def.userData;\n};\n\n/**\n * Short-cut function to determine if either body is inactive.\n * \n * @returns {boolean}\n */\nJoint.prototype.isActive = function() {\n  return this.m_bodyA.isActive() && this.m_bodyB.isActive();\n}\n\n/**\n * Get the type of the concrete joint.\n * \n * @returns JointType\n */\nJoint.prototype.getType = function() {\n  return this.m_type;\n}\n\n/**\n * Get the first body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyA = function() {\n  return this.m_bodyA;\n}\n\n/**\n * Get the second body attached to this joint.\n * \n * @returns Body\n */\nJoint.prototype.getBodyB = function() {\n  return this.m_bodyB;\n}\n\n/**\n * Get the next joint the world joint list.\n * \n * @returns Joint\n */\nJoint.prototype.getNext = function() {\n  return this.m_next;\n}\n\nJoint.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\nJoint.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get collide connected. Note: modifying the collide connect flag won't work\n * correctly because the flag is only checked when fixture AABBs begin to\n * overlap.\n * \n * @returns {boolean}\n */\nJoint.prototype.getCollideConnected = function() {\n  return this.m_collideConnected;\n};\n\n/**\n * Get the anchor point on bodyA in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorA = function() {\n};\n\n/**\n * Get the anchor point on bodyB in world coordinates.\n * \n * @return {Vec2}\n */\nJoint.prototype.getAnchorB = function() {\n};\n\n/**\n * Get the reaction force on bodyB at the joint anchor in Newtons.\n * \n * @param {float} inv_dt\n * @return {Vec2}\n */\nJoint.prototype.getReactionForce = function(inv_dt) {\n};\n\n/**\n * Get the reaction torque on bodyB in N*m.\n * \n * @param {float} inv_dt\n * @return {float}\n */\nJoint.prototype.getReactionTorque = function(inv_dt) {\n};\n\n/**\n * Shift the origin for any points stored in world coordinates.\n * \n * @param {Vec2} newOrigin\n */\nJoint.prototype.shiftOrigin = function(newOrigin) {\n};\n\n/**\n */\nJoint.prototype.initVelocityConstraints = function(step) {\n};\n\n/**\n */\nJoint.prototype.solveVelocityConstraints = function(step) {\n};\n\n/**\n * This returns true if the position errors are within tolerance.\n */\nJoint.prototype.solvePositionConstraints = function(step) {\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Shape;\n\nvar Math = require('./common/Math');\n\n/**\n * A shape is used for collision detection. You can create a shape however you\n * like. Shapes used for simulation in World are created automatically when a\n * Fixture is created. Shapes may encapsulate one or more child shapes.\n */\nfunction Shape() {\n  this.m_type;\n  this.m_radius;\n}\n\nShape.prototype._serialize = function() {\n  return {};\n};\n\nShape.TYPES = {};\n\nShape._deserialize = function(data) {\n  var clazz = Shape.TYPES[data.type];\n  return clazz && clazz._deserialize && clazz._deserialize(data);\n};\n\nShape.isValid = function(shape) {\n  return !!shape;\n};\n\nShape.prototype.getRadius = function() {\n  return this.m_radius;\n};\n\n/**\n * Get the type of this shape. You can use this to down cast to the concrete\n * shape.\n * \n * @return the shape type.\n */\nShape.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * @deprecated Shapes should be treated as immutable.\n *\n * clone the concrete shape.\n */\nShape.prototype._clone = function() {\n};\n\n/**\n * // Get the number of child primitives.\n */\nShape.prototype.getChildCount = function() {\n};\n\n/**\n * Test a point for containment in this shape. This only works for convex\n * shapes.\n * \n * @param {Transform} xf The shape world transform.\n * @param p A point in world coordinates.\n */\nShape.prototype.testPoint = function(xf, p) {\n};\n\n/**\n * Cast a ray against a child shape.\n * \n * @param {RayCastOutput} output The ray-cast results.\n * @param {RayCastInput} input The ray-cast input parameters.\n * @param {Transform} transform The transform to be applied to the shape.\n * @param childIndex The child shape index\n */\nShape.prototype.rayCast = function(output, input, transform, childIndex) {\n};\n\n/**\n * Given a transform, compute the associated axis aligned bounding box for a\n * child shape.\n * \n * @param {AABB} aabb Returns the axis aligned box.\n * @param {Transform} xf The world transform of the shape.\n * @param childIndex The child shape\n */\nShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n};\n\n/**\n * Compute the mass properties of this shape using its dimensions and density.\n * The inertia tensor is computed about the local origin.\n * \n * @param {MassData} massData Returns the mass data for this shape.\n * @param density The density in kilograms per meter squared.\n */\nShape.prototype.computeMass = function(massData, density) {\n};\n\n/**\n * @param {DistanceProxy} proxy\n */\nShape.prototype.computeDistanceProxy = function(proxy) {\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\n\nmodule.exports = AABB;\n\nfunction AABB(lower, upper) {\n  if (!(this instanceof AABB)) {\n    return new AABB(lower, upper);\n  }\n\n  this.lowerBound = Vec2.zero();\n  this.upperBound = Vec2.zero();\n\n  if (typeof lower === 'object') {\n    this.lowerBound.set(lower);\n  }\n  if (typeof upper === 'object') {\n    this.upperBound.set(upper);\n  }\n};\n\n/**\n * Verify that the bounds are sorted.\n */\nAABB.prototype.isValid = function() {\n  return AABB.isValid(this);\n}\n\nAABB.isValid = function(aabb) {\n  var d = Vec2.sub(aabb.upperBound, aabb.lowerBound);\n  var valid = d.x >= 0.0 && d.y >= 0.0 && Vec2.isValid(aabb.lowerBound) && Vec2.isValid(aabb.upperBound);\n  return valid;\n}\n\nAABB.assert = function(o) {\n  if (!_ASSERT) return;\n  if (!AABB.isValid(o)) {\n    _DEBUG && common.debug(o);\n    throw new Error('Invalid AABB!');\n  }\n}\n\n/**\n * Get the center of the AABB.\n */\nAABB.prototype.getCenter = function() {\n  return Vec2.neo((this.lowerBound.x + this.upperBound.x) * 0.5, (this.lowerBound.y + this.upperBound.y) * 0.5);\n}\n\n/**\n * Get the extents of the AABB (half-widths).\n */\nAABB.prototype.getExtents = function() {\n  return Vec2.neo((this.upperBound.x - this.lowerBound.x) * 0.5, (this.upperBound.y - this.lowerBound.y) * 0.5);\n}\n\n/**\n * Get the perimeter length.\n */\nAABB.prototype.getPerimeter = function() {\n  return 2.0 * (this.upperBound.x - this.lowerBound.x + this.upperBound.y - this.lowerBound.y);\n}\n\n/**\n * Combine one or two AABB into this one.\n */\nAABB.prototype.combine = function(a, b) {\n  b = b || this;\n\n  var lowerA = a.lowerBound;\n  var upperA = a.upperBound;\n  var lowerB = b.lowerBound;\n  var upperB = b.upperBound;\n\n  var lowerX = Math.min(lowerA.x, lowerB.x);\n  var lowerY = Math.min(lowerA.y, lowerB.y);\n  var upperX = Math.max(upperB.x, upperA.x);\n  var upperY = Math.max(upperB.y, upperA.y);\n\n  this.lowerBound.set(lowerX, lowerY);\n  this.upperBound.set(upperX, upperY);\n}\n\nAABB.prototype.combinePoints = function(a, b) {\n  this.lowerBound.set(Math.min(a.x, b.x), Math.min(a.y, b.y));\n  this.upperBound.set(Math.max(a.x, b.x), Math.max(a.y, b.y));\n}\n\nAABB.prototype.set = function(aabb) {\n  this.lowerBound.set(aabb.lowerBound.x, aabb.lowerBound.y);\n  this.upperBound.set(aabb.upperBound.x, aabb.upperBound.y);\n}\n\nAABB.prototype.contains = function(aabb) {\n  var result = true;\n  result = result && this.lowerBound.x <= aabb.lowerBound.x;\n  result = result && this.lowerBound.y <= aabb.lowerBound.y;\n  result = result && aabb.upperBound.x <= this.upperBound.x;\n  result = result && aabb.upperBound.y <= this.upperBound.y;\n  return result;\n}\n\nAABB.prototype.extend = function(value) {\n  AABB.extend(this, value);\n}\n\nAABB.extend = function(aabb, value) {\n  aabb.lowerBound.x -= value;\n  aabb.lowerBound.y -= value;\n  aabb.upperBound.x += value;\n  aabb.upperBound.y += value;\n}\n\nAABB.testOverlap = function(a, b) {\n  var d1x = b.lowerBound.x - a.upperBound.x;\n  var d2x = a.lowerBound.x - b.upperBound.x;\n\n  var d1y = b.lowerBound.y - a.upperBound.y;\n  var d2y = a.lowerBound.y - b.upperBound.y;\n\n  if (d1x > 0 || d1y > 0 || d2x > 0 || d2y > 0) {\n    return false;\n  }\n  return true;\n}\n\nAABB.areEqual = function(a, b) {\n  return Vec2.areEqual(a.lowerBound, b.lowerBound) && Vec2.areEqual(a.upperBound, b.upperBound);\n}\n\nAABB.diff = function(a, b) {\n  var wD = Math.max(0, Math.min(a.upperBound.x, b.upperBound.x) - Math.max(b.lowerBound.x, a.lowerBound.x))\n  var hD = Math.max(0, Math.min(a.upperBound.y, b.upperBound.y) - Math.max(b.lowerBound.y, a.lowerBound.y));\n\n  var wA = a.upperBound.x - a.lowerBound.x;\n  var hA = a.upperBound.y - a.lowerBound.y;\n\n  var wB = b.upperBound.x - b.lowerBound.x;\n  var hB = b.upperBound.y - b.lowerBound.y;\n\n  return wA * hA + wB * hB - wD * hD;\n};\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).\n *\n * @prop {Vec2} p1\n * @prop {Vec2} p2\n * @prop {number} maxFraction\n */\n\n/**\n * @typedef RayCastInput\n *\n * Ray-cast output data. The ray hits at p1 + fraction * (p2 - p1), where p1 and\n * p2 come from RayCastInput.\n *\n * @prop {Vec2} normal\n * @prop {number} fraction\n */\n\n/**\n * @param {RayCastOutput} output\n * @param {RayCastInput} input\n * @returns {boolean}\n */\nAABB.prototype.rayCast = function(output, input) {\n  // From Real-time Collision Detection, p179.\n\n  var tmin = -Infinity;\n  var tmax = Infinity;\n\n  var p = input.p1;\n  var d = Vec2.sub(input.p2, input.p1);\n  var absD = Vec2.abs(d);\n\n  var normal = Vec2.zero();\n\n  for (var f = 'x'; f !== null; f = (f === 'x' ? 'y' : null)) {\n    if (absD.x < Math.EPSILON) {\n      // Parallel.\n      if (p[f] < this.lowerBound[f] || this.upperBound[f] < p[f]) {\n        return false;\n      }\n    } else {\n      var inv_d = 1.0 / d[f];\n      var t1 = (this.lowerBound[f] - p[f]) * inv_d;\n      var t2 = (this.upperBound[f] - p[f]) * inv_d;\n\n      // Sign of the normal vector.\n      var s = -1.0;\n\n      if (t1 > t2) {\n        var temp = t1;\n        t1 = t2, t2 = temp;\n        s = 1.0;\n      }\n\n      // Push the min up\n      if (t1 > tmin) {\n        normal.setZero();\n        normal[f] = s;\n        tmin = t1;\n      }\n\n      // Pull the max down\n      tmax = Math.min(tmax, t2);\n\n      if (tmin > tmax) {\n        return false;\n      }\n    }\n  }\n\n  // Does the ray start inside the box?\n  // Does the ray intersect beyond the max fraction?\n  if (tmin < 0.0 || input.maxFraction < tmin) {\n    return false;\n  }\n\n  // Intersection.\n  output.fraction = tmin;\n  output.normal = normal;\n  return true;\n}\n\nAABB.prototype.toString = function() {\n  return JSON.stringify(this);\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar DEBUG_SOLVER = false;\n\nvar common = require('./util/common');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Mat22 = require('./common/Mat22');\nvar Rot = require('./common/Rot');\n\nvar Settings = require('./Settings');\nvar Manifold = require('./Manifold');\nvar Distance = require('./collision/Distance');\n\nmodule.exports = Contact;\n\n/**\n * A contact edge is used to connect bodies and contacts together in a contact\n * graph where each body is a node and each contact is an edge. A contact edge\n * belongs to a doubly linked list maintained in each attached body. Each\n * contact has two contact nodes, one for each attached body.\n * \n * @prop {Contact} contact The contact\n * @prop {ContactEdge} prev The previous contact edge in the body's contact list\n * @prop {ContactEdge} next The next contact edge in the body's contact list\n * @prop {Body} other Provides quick access to the other body attached.\n */\nfunction ContactEdge(contact) {\n  this.contact = contact;\n  this.prev;\n  this.next;\n  this.other;\n};\n\n/**\n * @function Contact~evaluate\n * \n * @param manifold\n * @param xfA\n * @param fixtureA\n * @param indexA\n * @param xfB\n * @param fixtureB\n * @param indexB\n */\n\n/**\n * The class manages contact between two shapes. A contact exists for each\n * overlapping AABB in the broad-phase (except if filtered). Therefore a contact\n * object may exist that has no contact points.\n * \n * @param {Fixture} fA\n * @param {int} indexA\n * @param {Fixture} fB\n * @param {int} indexB\n * @param {Contact~evaluate} evaluateFcn\n */\nfunction Contact(fA, indexA, fB, indexB, evaluateFcn) {\n  // Nodes for connecting bodies.\n  this.m_nodeA = new ContactEdge(this);\n  this.m_nodeB = new ContactEdge(this);\n\n  this.m_fixtureA = fA;\n  this.m_fixtureB = fB;\n\n  this.m_indexA = indexA;\n  this.m_indexB = indexB;\n\n  this.m_evaluateFcn = evaluateFcn;\n\n  this.m_manifold = new Manifold();\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_toi = 1.0;\n  this.m_toiCount = 0;\n  // This contact has a valid TOI in m_toi\n  this.m_toiFlag = false;\n\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n\n  this.m_tangentSpeed = 0.0;\n\n  // This contact can be disabled (by user)\n  this.m_enabledFlag = true;\n\n  // Used when crawling contact graph when forming islands.\n  this.m_islandFlag = false;\n\n  // Set when the shapes are touching.\n  this.m_touchingFlag = false;\n\n  // This contact needs filtering because a fixture filter was changed.\n  this.m_filterFlag = false;\n\n  // This bullet contact had a TOI event\n  this.m_bulletHitFlag = false;\n\n  this.v_points = []; // VelocityConstraintPoint[maxManifoldPoints]\n  this.v_normal = Vec2.zero();\n  this.v_normalMass = new Mat22();\n  this.v_K = new Mat22();\n  this.v_pointCount;\n\n  this.v_tangentSpeed;\n  this.v_friction;\n  this.v_restitution;\n\n  this.v_invMassA;\n  this.v_invMassB;\n  this.v_invIA;\n  this.v_invIB;\n\n  this.p_localPoints = [] // Vec2[maxManifoldPoints];\n  this.p_localNormal = Vec2.zero();\n  this.p_localPoint = Vec2.zero();\n  this.p_localCenterA = Vec2.zero();\n  this.p_localCenterB = Vec2.zero();\n  this.p_type; // Manifold.Type\n  this.p_radiusA;\n  this.p_radiusB;\n  this.p_pointCount;\n\n  this.p_invMassA;\n  this.p_invMassB;\n  this.p_invIA;\n  this.p_invIB;\n}\n\nContact.prototype.initConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var manifold = this.getManifold();\n\n  var pointCount = manifold.pointCount;\n  _ASSERT && common.assert(pointCount > 0);\n\n  this.v_invMassA = bodyA.m_invMass;\n  this.v_invMassB = bodyB.m_invMass;\n  this.v_invIA = bodyA.m_invI;\n  this.v_invIB = bodyB.m_invI;\n\n  this.v_friction = this.m_friction;\n  this.v_restitution = this.m_restitution;\n  this.v_tangentSpeed = this.m_tangentSpeed;\n\n  this.v_pointCount = pointCount;\n\n  this.v_K.setZero();\n  this.v_normalMass.setZero();\n\n  this.p_invMassA = bodyA.m_invMass;\n  this.p_invMassB = bodyB.m_invMass;\n  this.p_invIA = bodyA.m_invI;\n  this.p_invIB = bodyB.m_invI;\n  this.p_localCenterA = Vec2.clone(bodyA.m_sweep.localCenter);\n  this.p_localCenterB = Vec2.clone(bodyB.m_sweep.localCenter);\n\n  this.p_radiusA = shapeA.m_radius;\n  this.p_radiusB = shapeB.m_radius;\n\n  this.p_type = manifold.type;\n  this.p_localNormal = Vec2.clone(manifold.localNormal);\n  this.p_localPoint = Vec2.clone(manifold.localPoint);\n  this.p_pointCount = pointCount;\n\n  for (var j = 0; j < pointCount; ++j) {\n    var cp = manifold.points[j]; // ManifoldPoint\n    var vcp = this.v_points[j] = new VelocityConstraintPoint();\n\n    if (step.warmStarting) {\n      vcp.normalImpulse = step.dtRatio * cp.normalImpulse;\n      vcp.tangentImpulse = step.dtRatio * cp.tangentImpulse;\n\n    } else {\n      vcp.normalImpulse = 0.0;\n      vcp.tangentImpulse = 0.0;\n    }\n\n    vcp.rA.setZero();\n    vcp.rB.setZero();\n    vcp.normalMass = 0.0;\n    vcp.tangentMass = 0.0;\n    vcp.velocityBias = 0.0;\n\n    this.p_localPoints[j] = Vec2.clone(cp.localPoint);\n\n  }\n};\n\n/**\n * Get the contact manifold. Do not modify the manifold unless you understand\n * the internals of the library.\n */\nContact.prototype.getManifold = function() {\n  return this.m_manifold;\n}\n\n/**\n * Get the world manifold.\n * \n * @param {WorldManifold} [worldManifold]\n */\nContact.prototype.getWorldManifold = function(worldManifold) {\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var shapeA = this.m_fixtureA.getShape();\n  var shapeB = this.m_fixtureB.getShape();\n\n  return this.m_manifold.getWorldManifold(worldManifold, bodyA.getTransform(),\n      shapeA.m_radius, bodyB.getTransform(), shapeB.m_radius);\n}\n\n/**\n * Enable/disable this contact. This can be used inside the pre-solve contact\n * listener. The contact is only disabled for the current time step (or sub-step\n * in continuous collisions).\n */\nContact.prototype.setEnabled = function(flag) {\n  this.m_enabledFlag = !!flag;\n}\n\n/**\n * Has this contact been disabled?\n */\nContact.prototype.isEnabled = function() {\n  return this.m_enabledFlag;\n}\n\n/**\n * Is this contact touching?\n */\nContact.prototype.isTouching = function() {\n  return this.m_touchingFlag;\n}\n\n/**\n * Get the next contact in the world's contact list.\n */\nContact.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get fixture A in this contact.\n */\nContact.prototype.getFixtureA = function() {\n  return this.m_fixtureA;\n}\n\n/**\n * Get fixture B in this contact.\n */\nContact.prototype.getFixtureB = function() {\n  return this.m_fixtureB;\n}\n\n/**\n * Get the child primitive index for fixture A.\n */\nContact.prototype.getChildIndexA = function() {\n  return this.m_indexA;\n}\n\n/**\n * Get the child primitive index for fixture B.\n */\nContact.prototype.getChildIndexB = function() {\n  return this.m_indexB;\n}\n\n/**\n * Flag this contact for filtering. Filtering will occur the next time step.\n */\nContact.prototype.flagForFiltering = function() {\n  this.m_filterFlag = true;\n}\n\n/**\n * Override the default friction mixture. You can call this in\n * ContactListener.preSolve. This value persists until set or reset.\n */\nContact.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the friction.\n */\nContact.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Reset the friction mixture to the default value.\n */\nContact.prototype.resetFriction = function() {\n  this.m_friction = mixFriction(this.m_fixtureA.m_friction,\n      this.m_fixtureB.m_friction);\n}\n\n/**\n * Override the default restitution mixture. You can call this in\n * ContactListener.preSolve. The value persists until you set or reset.\n */\nContact.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Get the restitution.\n */\nContact.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Reset the restitution to the default value.\n */\nContact.prototype.resetRestitution = function() {\n  this.m_restitution = mixRestitution(this.m_fixtureA.m_restitution,\n      this.m_fixtureB.m_restitution);\n}\n\n/**\n * Set the desired tangent speed for a conveyor belt behavior. In meters per\n * second.\n */\nContact.prototype.setTangentSpeed = function(speed) {\n  this.m_tangentSpeed = speed;\n}\n\n/**\n * Get the desired tangent speed. In meters per second.\n */\nContact.prototype.getTangentSpeed = function() {\n  return this.m_tangentSpeed;\n}\n\n/**\n * Called by Update method, and implemented by subclasses.\n */\nContact.prototype.evaluate = function(manifold, xfA, xfB) {\n  this.m_evaluateFcn(manifold, xfA, this.m_fixtureA, this.m_indexA, xfB,\n      this.m_fixtureB, this.m_indexB);\n};\n\n/**\n * Updates the contact manifold and touching status.\n * \n * Note: do not assume the fixture AABBs are overlapping or are valid.\n * \n * @param {function} listener.beginContact\n * @param {function} listener.endContact\n * @param {function} listener.preSolve\n */\nContact.prototype.update = function(listener) {\n\n  // Re-enable this contact.\n  this.m_enabledFlag = true;\n\n  var touching = false;\n  var wasTouching = this.m_touchingFlag;\n\n  var sensorA = this.m_fixtureA.isSensor();\n  var sensorB = this.m_fixtureB.isSensor();\n  var sensor = sensorA || sensorB;\n\n  var bodyA = this.m_fixtureA.getBody();\n  var bodyB = this.m_fixtureB.getBody();\n  var xfA = bodyA.getTransform();\n  var xfB = bodyB.getTransform();\n\n  // Is this contact a sensor?\n  if (sensor) {\n    var shapeA = this.m_fixtureA.getShape();\n    var shapeB = this.m_fixtureB.getShape();\n    touching = Distance.testOverlap(shapeA, this.m_indexA, shapeB,\n        this.m_indexB, xfA, xfB);\n\n    // Sensors don't generate manifolds.\n    this.m_manifold.pointCount = 0;\n  } else {\n\n    // TODO reuse manifold\n    var oldManifold = this.m_manifold;\n    this.m_manifold = new Manifold();\n\n    this.evaluate(this.m_manifold, xfA, xfB);\n    touching = this.m_manifold.pointCount > 0;\n\n    // Match old contact ids to new contact ids and copy the\n    // stored impulses to warm start the solver.\n    for (var i = 0; i < this.m_manifold.pointCount; ++i) {\n      var nmp = this.m_manifold.points[i];\n      nmp.normalImpulse = 0.0;\n      nmp.tangentImpulse = 0.0;\n\n      for (var j = 0; j < oldManifold.pointCount; ++j) {\n        var omp = oldManifold.points[j];\n        if (omp.id.key == nmp.id.key) { // ContactID.key\n          nmp.normalImpulse = omp.normalImpulse;\n          nmp.tangentImpulse = omp.tangentImpulse;\n          break;\n        }\n      }\n    }\n\n    if (touching != wasTouching) {\n      bodyA.setAwake(true);\n      bodyB.setAwake(true);\n    }\n  }\n\n  this.m_touchingFlag = touching;\n\n  if (wasTouching == false && touching == true && listener) {\n    listener.beginContact(this);\n  }\n\n  if (wasTouching == true && touching == false && listener) {\n    listener.endContact(this);\n  }\n\n  if (sensor == false && touching && listener) {\n    listener.preSolve(this, oldManifold);\n  }\n}\n\nContact.prototype.solvePositionConstraint = function(step) {\n  return this._solvePositionConstraint(step, false);\n}\n\nContact.prototype.solvePositionConstraintTOI = function(step, toiA, toiB) {\n  return this._solvePositionConstraint(step, true, toiA, toiB);\n}\n\nContact.prototype._solvePositionConstraint = function(step, toi, toiA, toiB) {\n\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var mA = 0.0;\n  var iA = 0.0;\n  if (!toi || (bodyA == toiA || bodyA == toiB)) {\n    mA = this.p_invMassA;\n    iA = this.p_invIA;\n  }\n\n  var mB = 0.0;\n  var iB = 0.0;\n  if (!toi || (bodyB == toiA || bodyB == toiB)) {\n    mB = this.p_invMassB;\n    iB = this.p_invIB;\n  }\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n\n  var minSeparation = 0.0;\n\n  // Solve normal constraints\n  for (var j = 0; j < this.p_pointCount; ++j) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    xfA.q.set(aA);\n    xfB.q.set(aB);\n    xfA.p = Vec2.sub(cA, Rot.mulVec2(xfA.q, localCenterA));\n    xfB.p = Vec2.sub(cB, Rot.mulVec2(xfB.q, localCenterB));\n\n    // PositionSolverManifold\n    var normal, point, separation;\n    switch (this.p_type) {\n    case Manifold.e_circles:\n      var pointA = Transform.mulVec2(xfA, this.p_localPoint);\n      var pointB = Transform.mulVec2(xfB, this.p_localPoints[0]);\n      normal = Vec2.sub(pointB, pointA);\n      normal.normalize();\n      point = Vec2.combine(0.5, pointA, 0.5, pointB);\n      separation = Vec2.dot(Vec2.sub(pointB, pointA), normal) - this.p_radiusA\n          - this.p_radiusB;\n      break;\n\n    case Manifold.e_faceA:\n      normal = Rot.mulVec2(xfA.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfA, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfB, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n      break;\n\n    case Manifold.e_faceB:\n      normal = Rot.mulVec2(xfB.q, this.p_localNormal);\n      var planePoint = Transform.mulVec2(xfB, this.p_localPoint);\n      var clipPoint = Transform.mulVec2(xfA, this.p_localPoints[j]);\n      separation = Vec2.dot(Vec2.sub(clipPoint, planePoint), normal)\n          - this.p_radiusA - this.p_radiusB;\n      point = clipPoint;\n\n      // Ensure normal points from A to B\n      normal.mul(-1);\n      break;\n    }\n\n    var rA = Vec2.sub(point, cA);\n    var rB = Vec2.sub(point, cB);\n\n    // Track max constraint error.\n    minSeparation = Math.min(minSeparation, separation);\n\n    var baumgarte = toi ? Settings.toiBaugarte : Settings.baumgarte;\n    var linearSlop = Settings.linearSlop;\n    var maxLinearCorrection = Settings.maxLinearCorrection;\n\n    // Prevent large corrections and allow slop.\n    var C = Math.clamp(baumgarte * (separation + linearSlop),\n        -maxLinearCorrection, 0.0);\n\n    // Compute the effective mass.\n    var rnA = Vec2.cross(rA, normal);\n    var rnB = Vec2.cross(rB, normal);\n    var K = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    // Compute normal impulse\n    var impulse = K > 0.0 ? -C / K : 0.0;\n\n    var P = Vec2.mul(impulse, normal);\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n\n  return minSeparation;\n}\n\n// TODO merge with ManifoldPoint\nfunction VelocityConstraintPoint() {\n  this.rA = Vec2.zero();\n  this.rB = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.normalMass = 0;\n  this.tangentMass = 0;\n  this.velocityBias = 0;\n}\n\nContact.prototype.initVelocityConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var radiusA = this.p_radiusA;\n  var radiusB = this.p_radiusB;\n  var manifold = this.getManifold();\n\n  var mA = this.v_invMassA;\n  var mB = this.v_invMassB;\n  var iA = this.v_invIA;\n  var iB = this.v_invIB;\n  var localCenterA = Vec2.clone(this.p_localCenterA);\n  var localCenterB = Vec2.clone(this.p_localCenterB);\n\n  var cA = Vec2.clone(positionA.c);\n  var aA = positionA.a;\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n\n  var cB = Vec2.clone(positionB.c);\n  var aB = positionB.a;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  _ASSERT && common.assert(manifold.pointCount > 0);\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  xfA.q.set(aA);\n  xfB.q.set(aB);\n  xfA.p.setCombine(1, cA, -1, Rot.mulVec2(xfA.q, localCenterA));\n  xfB.p.setCombine(1, cB, -1, Rot.mulVec2(xfB.q, localCenterB));\n\n  var worldManifold = manifold.getWorldManifold(null, xfA, radiusA, xfB, radiusB);\n\n  this.v_normal.set(worldManifold.normal);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    vcp.rA.set(Vec2.sub(worldManifold.points[j], cA));\n    vcp.rB.set(Vec2.sub(worldManifold.points[j], cB));\n\n    var rnA = Vec2.cross(vcp.rA, this.v_normal);\n    var rnB = Vec2.cross(vcp.rB, this.v_normal);\n\n    var kNormal = mA + mB + iA * rnA * rnA + iB * rnB * rnB;\n\n    vcp.normalMass = kNormal > 0.0 ? 1.0 / kNormal : 0.0;\n\n    var tangent = Vec2.cross(this.v_normal, 1.0);\n\n    var rtA = Vec2.cross(vcp.rA, tangent);\n    var rtB = Vec2.cross(vcp.rB, tangent);\n\n    var kTangent = mA + mB + iA * rtA * rtA + iB * rtB * rtB;\n\n    vcp.tangentMass = kTangent > 0.0 ? 1.0 / kTangent : 0.0;\n\n    // Setup a velocity bias for restitution.\n    vcp.velocityBias = 0.0;\n    var vRel = Vec2.dot(this.v_normal, vB)\n        + Vec2.dot(this.v_normal, Vec2.cross(wB, vcp.rB))\n        - Vec2.dot(this.v_normal, vA)\n        - Vec2.dot(this.v_normal, Vec2.cross(wA, vcp.rA));\n    if (vRel < -Settings.velocityThreshold) {\n      vcp.velocityBias = -this.v_restitution * vRel;\n    }\n  }\n\n  // If we have two points, then prepare the block solver.\n  if (this.v_pointCount == 2 && step.blockSolve) {\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var rn1A = Vec2.cross(vcp1.rA, this.v_normal);\n    var rn1B = Vec2.cross(vcp1.rB, this.v_normal);\n    var rn2A = Vec2.cross(vcp2.rA, this.v_normal);\n    var rn2B = Vec2.cross(vcp2.rB, this.v_normal);\n\n    var k11 = mA + mB + iA * rn1A * rn1A + iB * rn1B * rn1B;\n    var k22 = mA + mB + iA * rn2A * rn2A + iB * rn2B * rn2B;\n    var k12 = mA + mB + iA * rn1A * rn2A + iB * rn1B * rn2B;\n\n    // Ensure a reasonable condition number.\n    var k_maxConditionNumber = 1000.0;\n    if (k11 * k11 < k_maxConditionNumber * (k11 * k22 - k12 * k12)) {\n      // K is safe to invert.\n      this.v_K.ex.set(k11, k12);\n      this.v_K.ey.set(k12, k22);\n      this.v_normalMass.set(this.v_K.getInverse());\n    } else {\n      // The constraints are redundant, just use one.\n      // TODO_ERIN use deepest?\n      this.v_pointCount = 1;\n    }\n  }\n\n  positionA.c.set(cA);\n  positionA.a = aA;\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  positionB.c.set(cB);\n  positionB.a = aB;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.warmStartConstraint = function(step) {\n  var fixtureA = this.m_fixtureA;\n  var fixtureB = this.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  var velocityA = bodyA.c_velocity;\n  var velocityB = bodyB.c_velocity;\n  var positionA = bodyA.c_position;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    var P = Vec2.combine(vcp.normalImpulse, normal, vcp.tangentImpulse, tangent);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n    vA.subMul(mA, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n    vB.addMul(mB, P);\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\nContact.prototype.storeConstraintImpulses = function(step) {\n  var manifold = this.m_manifold;\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    manifold.points[j].normalImpulse = this.v_points[j].normalImpulse;\n    manifold.points[j].tangentImpulse = this.v_points[j].tangentImpulse;\n  }\n};\n\nContact.prototype.solveVelocityConstraint = function(step) {\n  var bodyA = this.m_fixtureA.m_body;\n  var bodyB = this.m_fixtureB.m_body;\n\n  var velocityA = bodyA.c_velocity;\n  var positionA = bodyA.c_position;\n\n  var velocityB = bodyB.c_velocity;\n  var positionB = bodyB.c_position;\n\n  var mA = this.v_invMassA;\n  var iA = this.v_invIA;\n  var mB = this.v_invMassB;\n  var iB = this.v_invIB;\n\n  var vA = Vec2.clone(velocityA.v);\n  var wA = velocityA.w;\n  var vB = Vec2.clone(velocityB.v);\n  var wB = velocityB.w;\n\n  var normal = this.v_normal;\n  var tangent = Vec2.cross(normal, 1.0);\n  var friction = this.v_friction;\n\n  _ASSERT && common.assert(this.v_pointCount == 1 || this.v_pointCount == 2);\n\n  // Solve tangent constraints first because non-penetration is more important\n  // than friction.\n  for (var j = 0; j < this.v_pointCount; ++j) {\n    var vcp = this.v_points[j]; // VelocityConstraintPoint\n\n    // Relative velocity at contact\n    var dv = Vec2.zero();\n    dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n    dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n    // Compute tangent force\n    var vt = Vec2.dot(dv, tangent) - this.v_tangentSpeed;\n    var lambda = vcp.tangentMass * (-vt);\n\n    // Clamp the accumulated force\n    var maxFriction = friction * vcp.normalImpulse;\n    var newImpulse = Math.clamp(vcp.tangentImpulse + lambda, -maxFriction,\n        maxFriction);\n    lambda = newImpulse - vcp.tangentImpulse;\n    vcp.tangentImpulse = newImpulse;\n\n    // Apply contact impulse\n    var P = Vec2.mul(lambda, tangent);\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(vcp.rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(vcp.rB, P);\n  }\n\n  // Solve normal constraints\n  if (this.v_pointCount == 1 || step.blockSolve == false) {\n    for (var i = 0; i < this.v_pointCount; ++i) {\n      var vcp = this.v_points[i]; // VelocityConstraintPoint\n\n      // Relative velocity at contact\n      var dv = Vec2.zero();\n      dv.addCombine(1, vB, 1, Vec2.cross(wB, vcp.rB));\n      dv.subCombine(1, vA, 1, Vec2.cross(wA, vcp.rA));\n\n      // Compute normal impulse\n      var vn = Vec2.dot(dv, normal);\n      var lambda = -vcp.normalMass * (vn - vcp.velocityBias);\n\n      // Clamp the accumulated impulse\n      var newImpulse = Math.max(vcp.normalImpulse + lambda, 0.0);\n      lambda = newImpulse - vcp.normalImpulse;\n      vcp.normalImpulse = newImpulse;\n\n      // Apply contact impulse\n      var P = Vec2.mul(lambda, normal);\n\n      vA.subMul(mA, P);\n      wA -= iA * Vec2.cross(vcp.rA, P);\n\n      vB.addMul(mB, P);\n      wB += iB * Vec2.cross(vcp.rB, P);\n    }\n  } else {\n    // Block solver developed in collaboration with Dirk Gregorius (back in\n    // 01/07 on Box2D_Lite).\n    // Build the mini LCP for this contact patch\n    //\n    // vn = A * x + b, vn >= 0, , vn >= 0, x >= 0 and vn_i * x_i = 0 with i =\n    // 1..2\n    //\n    // A = J * W * JT and J = ( -n, -r1 x n, n, r2 x n )\n    // b = vn0 - velocityBias\n    //\n    // The system is solved using the \"Total enumeration method\" (s. Murty).\n    // The complementary constraint vn_i * x_i\n    // implies that we must have in any solution either vn_i = 0 or x_i = 0.\n    // So for the 2D contact problem the cases\n    // vn1 = 0 and vn2 = 0, x1 = 0 and x2 = 0, x1 = 0 and vn2 = 0, x2 = 0 and\n    // vn1 = 0 need to be tested. The first valid\n    // solution that satisfies the problem is chosen.\n    // \n    // In order to account of the accumulated impulse 'a' (because of the\n    // iterative nature of the solver which only requires\n    // that the accumulated impulse is clamped and not the incremental\n    // impulse) we change the impulse variable (x_i).\n    //\n    // Substitute:\n    // \n    // x = a + d\n    // \n    // a := old total impulse\n    // x := new total impulse\n    // d := incremental impulse\n    //\n    // For the current iteration we extend the formula for the incremental\n    // impulse\n    // to compute the new total impulse:\n    //\n    // vn = A * d + b\n    // = A * (x - a) + b\n    // = A * x + b - A * a\n    // = A * x + b'\n    // b' = b - A * a;\n\n    var vcp1 = this.v_points[0]; // VelocityConstraintPoint\n    var vcp2 = this.v_points[1]; // VelocityConstraintPoint\n\n    var a = Vec2.neo(vcp1.normalImpulse, vcp2.normalImpulse);\n    _ASSERT && common.assert(a.x >= 0.0 && a.y >= 0.0);\n\n    // Relative velocity at contact\n    var dv1 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp1.rB)).sub(vA).sub(Vec2.cross(wA, vcp1.rA));\n    var dv2 = Vec2.zero().add(vB).add(Vec2.cross(wB, vcp2.rB)).sub(vA).sub(Vec2.cross(wA, vcp2.rA));\n\n    // Compute normal velocity\n    var vn1 = Vec2.dot(dv1, normal);\n    var vn2 = Vec2.dot(dv2, normal);\n\n    var b = Vec2.neo(vn1 - vcp1.velocityBias, vn2 - vcp2.velocityBias);\n\n    // Compute b'\n    b.sub(Mat22.mulVec2(this.v_K, a));\n\n    var k_errorTol = 1e-3;\n    // NOT_USED(k_errorTol);\n\n    for (;;) {\n      //\n      // Case 1: vn = 0\n      //\n      // 0 = A * x + b'\n      //\n      // Solve for x:\n      //\n      // x = - inv(A) * b'\n      //\n      var x = Mat22.mulVec2(this.v_normalMass, b).neg();\n\n      if (x.x >= 0.0 && x.y >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          dv1 = vB + Vec2.cross(wB, vcp1.rB) - vA - Vec2.cross(wA, vcp1.rA);\n          dv2 = vB + Vec2.cross(wB, vcp2.rB) - vA - Vec2.cross(wA, vcp2.rA);\n\n          // Compute normal velocity\n          vn1 = Dot(dv1, normal);\n          vn2 = Dot(dv2, normal);\n\n          _ASSERT && common.assert(Abs(vn1 - vcp1.velocityBias) < k_errorTol);\n          _ASSERT && common.assert(Abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 2: vn1 = 0 and x2 = 0\n      //\n      // 0 = a11 * x1 + a12 * 0 + b1'\n      // vn2 = a21 * x1 + a22 * 0 + b2'\n      //\n      x.x = -vcp1.normalMass * b.x;\n      x.y = 0.0;\n      vn1 = 0.0;\n      vn2 = this.v_K.ex.y * x.x + b.y;\n\n      if (x.x >= 0.0 && vn2 >= 0.0) {\n        // Get the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv1B = Vec2.add(vB, Vec2.cross(wB, vcp1.rB));\n          var dv1A = Vec2.add(vA, Vec2.cross(wA, vcp1.rA));\n          var dv1 = Vec2.sub(dv1B, dv1A);\n\n          // Compute normal velocity\n          vn1 = Vec2.dot(dv1, normal);\n\n          _ASSERT && common.assert(Math.abs(vn1 - vcp1.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 3: vn2 = 0 and x1 = 0\n      //\n      // vn1 = a11 * 0 + a12 * x2 + b1'\n      // 0 = a21 * 0 + a22 * x2 + b2'\n      //\n      x.x = 0.0;\n      x.y = -vcp2.normalMass * b.y;\n      vn1 = this.v_K.ey.x * x.y + b.x;\n      vn2 = 0.0;\n\n      if (x.y >= 0.0 && vn1 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        if (DEBUG_SOLVER) {\n          // Postconditions\n          var dv2B = Vec2.add(vB, Vec2.cross(wB, vcp2.rB));\n          var dv2A = Vec2.add(vA, Vec2.cross(wA, vcp2.rA));\n          var dv1 = Vec2.sub(dv2B, dv2A);\n\n          // Compute normal velocity\n          vn2 = Vec2.dot(dv2, normal);\n\n          _ASSERT && common.assert(Math.abs(vn2 - vcp2.velocityBias) < k_errorTol);\n        }\n        break;\n      }\n\n      //\n      // Case 4: x1 = 0 and x2 = 0\n      // \n      // vn1 = b1\n      // vn2 = b2;\n      //\n      x.x = 0.0;\n      x.y = 0.0;\n      vn1 = b.x;\n      vn2 = b.y;\n\n      if (vn1 >= 0.0 && vn2 >= 0.0) {\n        // Resubstitute for the incremental impulse\n        var d = Vec2.sub(x, a);\n\n        // Apply incremental impulse\n        var P1 = Vec2.mul(d.x, normal);\n        var P2 = Vec2.mul(d.y, normal);\n        vA.subCombine(mA, P1, mA, P2);\n        wA -= iA * (Vec2.cross(vcp1.rA, P1) + Vec2.cross(vcp2.rA, P2));\n\n        vB.addCombine(mB, P1, mB, P2);\n        wB += iB * (Vec2.cross(vcp1.rB, P1) + Vec2.cross(vcp2.rB, P2));\n\n        // Accumulate\n        vcp1.normalImpulse = x.x;\n        vcp2.normalImpulse = x.y;\n\n        break;\n      }\n\n      // No solution, give up. This is hit sometimes, but it doesn't seem to\n      // matter.\n      break;\n    }\n  }\n\n  velocityA.v.set(vA);\n  velocityA.w = wA;\n\n  velocityB.v.set(vB);\n  velocityB.w = wB;\n};\n\n/**\n * Friction mixing law. The idea is to allow either fixture to drive the\n * restitution to zero. For example, anything slides on ice.\n */\nfunction mixFriction(friction1, friction2) {\n  return Math.sqrt(friction1 * friction2);\n}\n\n/**\n * Restitution mixing law. The idea is allow for anything to bounce off an\n * inelastic surface. For example, a superball bounces on anything.\n */\nfunction mixRestitution(restitution1, restitution2) {\n  return restitution1 > restitution2 ? restitution1 : restitution2;\n}\n\nvar s_registers = [];\n\n/**\n * @param fn function(fixtureA, indexA, fixtureB, indexB) Contact\n */\nContact.addType = function(type1, type2, callback) {\n\n  s_registers[type1] = s_registers[type1] || {};\n  s_registers[type1][type2] = callback;\n}\n\nContact.create = function(fixtureA, indexA, fixtureB, indexB) {\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  // TODO: pool contacts\n  var contact, evaluateFcn;\n  if (evaluateFcn = s_registers[typeA] && s_registers[typeA][typeB]) {\n    contact = new Contact(fixtureA, indexA, fixtureB, indexB, evaluateFcn);\n  } else if (evaluateFcn = s_registers[typeB] && s_registers[typeB][typeA]) {\n    contact = new Contact(fixtureB, indexB, fixtureA, indexA, evaluateFcn);\n  } else {\n    return null;\n  }\n\n  // Contact creation may swap fixtures.\n  fixtureA = contact.getFixtureA();\n  fixtureB = contact.getFixtureB();\n  indexA = contact.getChildIndexA();\n  indexB = contact.getChildIndexB();\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Connect to body A\n  contact.m_nodeA.contact = contact;\n  contact.m_nodeA.other = bodyB;\n\n  contact.m_nodeA.prev = null;\n  contact.m_nodeA.next = bodyA.m_contactList;\n  if (bodyA.m_contactList != null) {\n    bodyA.m_contactList.prev = contact.m_nodeA;\n  }\n  bodyA.m_contactList = contact.m_nodeA;\n\n  // Connect to body B\n  contact.m_nodeB.contact = contact;\n  contact.m_nodeB.other = bodyA;\n\n  contact.m_nodeB.prev = null;\n  contact.m_nodeB.next = bodyB.m_contactList;\n  if (bodyB.m_contactList != null) {\n    bodyB.m_contactList.prev = contact.m_nodeB;\n  }\n  bodyB.m_contactList = contact.m_nodeB;\n\n  // Wake up the bodies\n  if (fixtureA.isSensor() == false && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  return contact;\n}\n\nContact.destroy = function(contact, listener) {\n  var fixtureA = contact.m_fixtureA;\n  var fixtureB = contact.m_fixtureB;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  if (contact.isTouching()) {\n    listener.endContact(contact);\n  }\n\n  // Remove from body 1\n  if (contact.m_nodeA.prev) {\n    contact.m_nodeA.prev.next = contact.m_nodeA.next;\n  }\n\n  if (contact.m_nodeA.next) {\n    contact.m_nodeA.next.prev = contact.m_nodeA.prev;\n  }\n\n  if (contact.m_nodeA == bodyA.m_contactList) {\n    bodyA.m_contactList = contact.m_nodeA.next;\n  }\n\n  // Remove from body 2\n  if (contact.m_nodeB.prev) {\n    contact.m_nodeB.prev.next = contact.m_nodeB.next;\n  }\n\n  if (contact.m_nodeB.next) {\n    contact.m_nodeB.next.prev = contact.m_nodeB.prev;\n  }\n\n  if (contact.m_nodeB == bodyB.m_contactList) {\n    bodyB.m_contactList = contact.m_nodeB.next;\n  }\n\n  if (contact.m_manifold.pointCount > 0 && fixtureA.isSensor() == false\n      && fixtureB.isSensor() == false) {\n    bodyA.setAwake(true);\n    bodyB.setAwake(true);\n  }\n\n  var typeA = fixtureA.getType(); // Shape.Type\n  var typeB = fixtureB.getType(); // Shape.Type\n\n  var destroyFcn = s_registers[typeA][typeB].destroyFcn;\n  if (typeof destroyFcn === 'function') {\n    destroyFcn(contact);\n  }\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Transform = require('./common/Transform');\nvar Math = require('./common/Math');\nvar Rot = require('./common/Rot');\n\nmodule.exports = Manifold;\nmodule.exports.clipSegmentToLine = clipSegmentToLine;\nmodule.exports.clipVertex = ClipVertex;\nmodule.exports.getPointStates = getPointStates;\nmodule.exports.PointState = PointState;\n\n// Manifold Type\nManifold.e_circles = 0;\nManifold.e_faceA = 1;\nManifold.e_faceB = 2;\n\n// ContactFeature Type\nManifold.e_vertex = 0;\nManifold.e_face = 1;\n\n/**\n * A manifold for two touching convex shapes. Manifolds are created in `evaluate`\n * method of Contact subclasses.\n * \n * Supported manifold types are e_faceA or e_faceB for clip point versus plane\n * with radius and e_circles point versus point with radius.\n * \n * We store contacts in this way so that position correction can account for\n * movement, which is critical for continuous physics. All contact scenarios\n * must be expressed in one of these types. This structure is stored across time\n * steps, so we keep it small.\n * \n * @prop type e_circle, e_faceA, e_faceB\n * @prop localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleA <br>\n *       e_faceA: the center of faceA <br>\n *       e_faceB: the center of faceB\n * @prop localNormal Usage depends on manifold type:<br>\n *       e_circles: not used <br>\n *       e_faceA: the normal on polygonA <br>\n *       e_faceB: the normal on polygonB\n * @prop points The points of contact {ManifoldPoint[]}\n * @prop pointCount The number of manifold points\n */\nfunction Manifold() {\n  this.type;\n  this.localNormal = Vec2.zero();\n  this.localPoint = Vec2.zero();\n  this.points = [ new ManifoldPoint(), new ManifoldPoint() ];\n  this.pointCount = 0;\n};\n\n/**\n * A manifold point is a contact point belonging to a contact manifold. It holds\n * details related to the geometry and dynamics of the contact points.\n * \n * This structure is stored across time steps, so we keep it small.\n * \n * Note: impulses are used for internal caching and may not provide reliable\n * contact forces, especially for high speed collisions.\n * \n * @prop {Vec2} localPoint Usage depends on manifold type:<br>\n *       e_circles: the local center of circleB<br>\n *       e_faceA: the local center of cirlceB or the clip point of polygonB<br>\n *       e_faceB: the clip point of polygonA.\n * @prop normalImpulse The non-penetration impulse\n * @prop tangentImpulse The friction impulse\n * @prop {ContactID} id Uniquely identifies a contact point between two shapes\n *       to facilatate warm starting\n */\nfunction ManifoldPoint() {\n  this.localPoint = Vec2.zero();\n  this.normalImpulse = 0;\n  this.tangentImpulse = 0;\n  this.id = new ContactID();\n};\n\n/**\n * Contact ids to facilitate warm starting.\n * \n * @prop {ContactFeature} cf\n * @prop key Used to quickly compare contact ids.\n * \n */\nfunction ContactID() {\n  this.cf = new ContactFeature();\n};\n\nObject.defineProperty(ContactID.prototype, 'key', {\n  get: function() {\n    return this.cf.indexA + this.cf.indexB * 4 + this.cf.typeA * 16 + this.cf.typeB * 64;\n  },\n  enumerable: true,\n  configurable: true\n});\n\nContactID.prototype.set = function(o) {\n  // this.key = o.key;\n  this.cf.set(o.cf);\n};\n\n/**\n * The features that intersect to form the contact point.\n * \n * @prop indexA Feature index on shapeA\n * @prop indexB Feature index on shapeB\n * @prop typeA The feature type on shapeA\n * @prop typeB The feature type on shapeB\n */\nfunction ContactFeature() {\n  this.indexA;\n  this.indexB;\n  this.typeA;\n  this.typeB;\n};\n\nContactFeature.prototype.set = function(o) {\n  this.indexA = o.indexA;\n  this.indexB = o.indexB;\n  this.typeA = o.typeA;\n  this.typeB = o.typeB;\n};\n\n/**\n * This is used to compute the current state of a contact manifold.\n * \n * @prop normal World vector pointing from A to B\n * @prop points World contact point (point of intersection)\n * @prop separations A negative value indicates overlap, in meters\n */\nfunction WorldManifold() {\n  this.normal;\n  this.points = []; // [maxManifoldPoints]\n  this.separations = []; // float[maxManifoldPoints]\n};\n\n/**\n * Evaluate the manifold with supplied transforms. This assumes modest motion\n * from the original state. This does not change the point count, impulses, etc.\n * The radii must come from the shapes that generated the manifold.\n * \n * @param {WorldManifold} [wm]\n */\nManifold.prototype.getWorldManifold = function(wm, xfA, radiusA, xfB, radiusB) {\n  if (this.pointCount == 0) {\n    return;\n  }\n\n  wm = wm || new WorldManifold();\n\n  var normal = wm.normal;\n  var points = wm.points;\n  var separations = wm.separations;\n\n  // TODO: improve\n  switch (this.type) {\n  case Manifold.e_circles:\n    normal = Vec2.neo(1.0, 0.0);\n    var pointA = Transform.mulVec2(xfA, this.localPoint);\n    var pointB = Transform.mulVec2(xfB, this.points[0].localPoint);\n    var dist = Vec2.sub(pointB, pointA);\n    if (Vec2.lengthSquared(dist) > Math.EPSILON * Math.EPSILON) {\n      normal.set(dist);\n      normal.normalize();\n    }\n    points[0] = Vec2.mid(pointA, pointB);\n    separations[0] = -radiusB - radiusA;\n    points.length = 1;\n    separations.length = 1;\n    break;\n\n  case Manifold.e_faceA:\n    normal = Rot.mulVec2(xfA.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfA, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfB, this.points[i].localPoint);\n      var cA = Vec2.clone(clipPoint).addMul(radiusA - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cB = Vec2.clone(clipPoint).subMul(radiusB, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cB, cA), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    break;\n\n  case Manifold.e_faceB:\n    normal = Rot.mulVec2(xfB.q, this.localNormal);\n    var planePoint = Transform.mulVec2(xfB, this.localPoint);\n\n    for (var i = 0; i < this.pointCount; ++i) {\n      var clipPoint = Transform.mulVec2(xfA, this.points[i].localPoint);\n      var cB = Vec2.combine(1, clipPoint, radiusB - Vec2.dot(Vec2.sub(clipPoint, planePoint), normal), normal);\n      var cA = Vec2.combine(1, clipPoint, -radiusA, normal);\n      points[i] = Vec2.mid(cA, cB);\n      separations[i] = Vec2.dot(Vec2.sub(cA, cB), normal);\n    }\n    points.length = this.pointCount;\n    separations.length = this.pointCount;\n    // Ensure normal points from A to B.\n    normal.mul(-1);\n    break;\n  }\n\n  wm.normal = normal;\n  wm.points = points;\n  wm.separations = separations;\n  return wm;\n}\n\n/**\n * This is used for determining the state of contact points.\n * \n * @prop {0} nullState Point does not exist\n * @prop {1} addState Point was added in the update\n * @prop {2} persistState Point persisted across the update\n * @prop {3} removeState Point was removed in the update\n */\nvar PointState = {\n  // TODO: use constants\n  nullState : 0,\n  addState : 1,\n  persistState : 2,\n  removeState : 3\n};\n\n/**\n * Compute the point states given two manifolds. The states pertain to the\n * transition from manifold1 to manifold2. So state1 is either persist or remove\n * while state2 is either add or persist.\n * \n * @param {PointState[Settings.maxManifoldPoints]} state1\n * @param {PointState[Settings.maxManifoldPoints]} state2\n */\nfunction getPointStates(state1, state2, manifold1, manifold2) {\n  // for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n  // state1[i] = PointState.nullState;\n  // state2[i] = PointState.nullState;\n  // }\n\n  // Detect persists and removes.\n  for (var i = 0; i < manifold1.pointCount; ++i) {\n    var id = manifold1.points[i].id;// ContactID\n\n    state1[i] = PointState.removeState;\n\n    for (var j = 0; j < manifold2.pointCount; ++j) {\n      if (manifold2.points[j].id.key == id.key) {\n        state1[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n\n  // Detect persists and adds.\n  for (var i = 0; i < manifold2.pointCount; ++i) {\n    var id = manifold2.points[i].id;// ContactID\n\n    state2[i] = PointState.addState;\n\n    for (var j = 0; j < manifold1.pointCount; ++j) {\n      if (manifold1.points[j].id.key == id.key) {\n        state2[i] = PointState.persistState;\n        break;\n      }\n    }\n  }\n}\n\n/**\n * Used for computing contact manifolds.\n * \n * @prop {Vec2} v\n * @prop {ContactID} id\n */\nfunction ClipVertex() {\n  this.v = Vec2.zero();\n  this.id = new ContactID();\n};\n\nClipVertex.prototype.set = function(o) {\n  this.v.set(o.v);\n  this.id.set(o.id);\n};\n\n/**\n * Clipping for contact manifolds. Sutherland-Hodgman clipping.\n * \n * @param {ClipVertex[2]} vOut\n * @param {ClipVertex[2]} vIn\n */\nfunction clipSegmentToLine(vOut, vIn, normal, offset, vertexIndexA) {\n  // Start with no output points\n  var numOut = 0;\n\n  // Calculate the distance of end points to the line\n  var distance0 = Vec2.dot(normal, vIn[0].v) - offset;\n  var distance1 = Vec2.dot(normal, vIn[1].v) - offset;\n\n  // If the points are behind the plane\n  if (distance0 <= 0.0)\n    vOut[numOut++].set(vIn[0]);\n  if (distance1 <= 0.0)\n    vOut[numOut++].set(vIn[1]);\n\n  // If the points are on different sides of the plane\n  if (distance0 * distance1 < 0.0) {\n    // Find intersection point of edge and plane\n    var interp = distance0 / (distance0 - distance1);\n    vOut[numOut].v.setCombine(1 - interp, vIn[0].v, interp, vIn[1].v);\n\n    // VertexA is hitting edgeB.\n    vOut[numOut].id.cf.indexA = vertexIndexA;\n    vOut[numOut].id.cf.indexB = vIn[0].id.cf.indexB;\n    vOut[numOut].id.cf.typeA = Manifold.e_vertex;\n    vOut[numOut].id.cf.typeB = Manifold.e_face;\n    ++numOut;\n  }\n\n  return numOut;\n}\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar stats = require('./util/stats');\nvar extend = require('./util/extend');\nvar is = require('./util/is');\nvar _await = require('./util/await');\n\nstats.create = 0;\n\nfunction Class(arg) {\n  if (!(this instanceof Class)) {\n    if (is.fn(arg)) {\n      return Class.app.apply(Class, arguments);\n    } else if (is.object(arg)) {\n      return Class.atlas.apply(Class, arguments);\n    } else {\n      return arg;\n    }\n  }\n\n  stats.create++;\n\n  for (var i = 0; i < _init.length; i++) {\n    _init[i].call(this);\n  }\n}\n\nvar _init = [];\n\nClass._init = function(fn) {\n  _init.push(fn);\n};\n\nvar _load = [];\n\nClass._load = function(fn) {\n  _load.push(fn);\n};\n\nvar _config = {};\n\nClass.config = function() {\n  if (arguments.length === 1 && is.string(arguments[0])) {\n    return _config[arguments[0]];\n  }\n  if (arguments.length === 1 && is.object(arguments[0])) {\n    extend(_config, arguments[0]);\n  }\n  if (arguments.length === 2 && is.string(arguments[0])) {\n    _config[arguments[0], arguments[1]];\n  }\n};\n\nvar _app_queue = [];\nvar _preload_queue = [];\nvar _stages = [];\nvar _loaded = false;\nvar _paused = false;\n\nClass.app = function(app, opts) {\n  if (!_loaded) {\n    _app_queue.push(arguments);\n    return;\n  }\n  DEBUG && console.log('Creating app...');\n  var loader = Class.config('app-loader');\n  loader(function(stage, canvas) {\n    DEBUG && console.log('Initing app...');\n    for (var i = 0; i < _load.length; i++) {\n      _load[i].call(this, stage, canvas);\n    }\n    app(stage, canvas);\n    _stages.push(stage);\n    DEBUG && console.log('Starting app...');\n    stage.start();\n  }, opts);\n};\n\nvar loading = _await();\n\nClass.preload = function(load) {\n  if (typeof load === 'string') {\n    var url = Class.resolve(load);\n    if (/\\.js($|\\?|\\#)/.test(url)) {\n      DEBUG && console.log('Loading script: ' + url);\n      load = function(callback) {\n        loadScript(url, callback);\n      };\n    }\n  }\n  if (typeof load !== 'function') {\n    return;\n  }\n  // if (!_started) {\n  // _preload_queue.push(load);\n  // return;\n  // }\n  load(loading());\n};\n\nClass.start = function(config) {\n  DEBUG && console.log('Starting...');\n\n  Class.config(config);\n\n  // DEBUG && console.log('Preloading...');\n  // _started = true;\n  // while (_preload_queue.length) {\n  // var load = _preload_queue.shift();\n  // load(loading());\n  // }\n\n  loading.then(function() {\n    DEBUG && console.log('Loading apps...');\n    _loaded = true;\n    while (_app_queue.length) {\n      var args = _app_queue.shift();\n      Class.app.apply(Class, args);\n    }\n  });\n};\n\nClass.pause = function() {\n  if (!_paused) {\n    _paused = true;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].pause();\n    }\n  }\n};\n\nClass.resume = function() {\n  if (_paused) {\n    _paused = false;\n    for (var i = _stages.length - 1; i >= 0; i--) {\n      _stages[i].resume();\n    }\n  }\n};\n\nClass.create = function() {\n  return new Class();\n};\n\nClass.resolve = (function() {\n\n  if (typeof window === 'undefined' || typeof document === 'undefined') {\n    return function(url) {\n      return url;\n    };\n  }\n\n  var scripts = document.getElementsByTagName('script');\n\n  function getScriptSrc() {\n    // HTML5\n    if (document.currentScript) {\n      return document.currentScript.src;\n    }\n\n    // IE>=10\n    var stack;\n    try {\n      var err = new Error();\n      if (err.stack) {\n        stack = err.stack;\n      } else {\n        throw err;\n      }\n    } catch (err) {\n      stack = err.stack;\n    }\n    if (typeof stack === 'string') {\n      stack = stack.split('\\n');\n      // Uses the last line, where the call started\n      for (var i = stack.length; i--;) {\n        var url = stack[i].match(/(\\w+\\:\\/\\/[^/]*?\\/.+?)(:\\d+)(:\\d+)?/);\n        if (url) {\n          return url[1];\n        }\n      }\n    }\n\n    // IE<11\n    if (scripts.length && 'readyState' in scripts[0]) {\n      for (var i = scripts.length; i--;) {\n        if (scripts[i].readyState === 'interactive') {\n          return scripts[i].src;\n        }\n      }\n    }\n\n    return location.href;\n  }\n\n  return function(url) {\n    if (/^\\.\\//.test(url)) {\n      var src = getScriptSrc();\n      var base = src.substring(0, src.lastIndexOf('/') + 1);\n      url = base + url.substring(2);\n      // } else if (/^\\.\\.\\//.test(url)) {\n      // url = base + url;\n    }\n    return url;\n  };\n})();\n\nmodule.exports = Class;\n\nfunction loadScript(src, callback) {\n  var el = document.createElement('script');\n  el.addEventListener('load', function() {\n    callback();\n  });\n  el.addEventListener('error', function(err) {\n    callback(err || 'Error loading script: ' + src);\n  });\n  el.src = src;\n  el.id = 'preload-' + Date.now();\n  document.body.appendChild(el);\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PolygonShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nPolygonShape._super = Shape;\nPolygonShape.prototype = create(PolygonShape._super.prototype);\n\nPolygonShape.TYPE = 'polygon';\nShape.TYPES[PolygonShape.TYPE] = PolygonShape;\n\n/**\n * A convex polygon. It is assumed that the interior of the polygon is to the\n * left of each edge. Polygons have a maximum number of vertices equal to\n * Settings.maxPolygonVertices. In most cases you should not need many vertices\n * for a convex polygon. extends Shape\n */\nfunction PolygonShape(vertices) {\n  if (!(this instanceof PolygonShape)) {\n    return new PolygonShape(vertices);\n  }\n\n  PolygonShape._super.call(this);\n\n  this.m_type = PolygonShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_centroid = Vec2.zero();\n  this.m_vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_normals = []; // Vec2[Settings.maxPolygonVertices]\n  this.m_count = 0;\n\n  if (vertices && vertices.length) {\n    this._set(vertices);\n  }\n}\n\nPolygonShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    centroid: this.m_centroid,\n\n    vertices: this.m_vertices,\n    normals: this.m_normals,\n    count: this.m_count,\n  };\n};\n\nPolygonShape._deserialize = function(data) {\n  var shape = new PolygonShape(data.vertices);\n  return shape;\n};\n\nPolygonShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * @deprecated\n */\nPolygonShape.prototype._clone = function() {\n  var clone = new PolygonShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_count = this.m_count;\n  clone.m_centroid.set(this.m_centroid);\n  for (var i = 0; i < this.m_count; i++) {\n    clone.m_vertices.push(this.m_vertices[i].clone());\n  }\n  for (var i = 0; i < this.m_normals.length; i++) {\n    clone.m_normals.push(this.m_normals[i].clone());\n  }\n  return clone;\n}\n\nPolygonShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nfunction ComputeCentroid(vs, count) {\n  _ASSERT && common.assert(count >= 3);\n\n  var c = Vec2.zero();\n  var area = 0.0;\n\n  // pRef is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var pRef = Vec2.zero();\n  if (false) {\n    // This code would put the reference point inside the polygon.\n    for (var i = 0; i < count; ++i) {\n      pRef.add(vs[i]);\n    }\n    pRef.mul(1.0 / count);\n  }\n\n  var inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < count; ++i) {\n    // Triangle vertices.\n    var p1 = pRef;\n    var p2 = vs[i];\n    var p3 = i + 1 < count ? vs[i + 1] : vs[0];\n\n    var e1 = Vec2.sub(p2, p1);\n    var e2 = Vec2.sub(p3, p1);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    c.addMul(triangleArea * inv3, p1);\n    c.addMul(triangleArea * inv3, p2);\n    c.addMul(triangleArea * inv3, p3);\n  }\n\n  // Centroid\n  _ASSERT && common.assert(area > Math.EPSILON);\n  c.mul(1.0 / area);\n  return c;\n}\n\n/**\n * @private\n *\n * Create a convex hull from the given array of local points. The count must be\n * in the range [3, Settings.maxPolygonVertices].\n * \n * Warning: the points may be re-ordered, even if they form a convex polygon\n * Warning: collinear points are handled but not removed. Collinear points may\n * lead to poor stacking behavior.\n */\nPolygonShape.prototype._set = function(vertices) {\n  _ASSERT && common.assert(3 <= vertices.length && vertices.length <= Settings.maxPolygonVertices);\n  if (vertices.length < 3) {\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  var n = Math.min(vertices.length, Settings.maxPolygonVertices);\n\n  // Perform welding and copy vertices into local buffer.\n  var ps = [];// [Settings.maxPolygonVertices];\n  var tempCount = 0;\n  for (var i = 0; i < n; ++i) {\n    var v = vertices[i];\n\n    var unique = true;\n    for (var j = 0; j < tempCount; ++j) {\n      if (Vec2.distanceSquared(v, ps[j]) < 0.25 * Settings.linearSlopSquared) {\n        unique = false;\n        break;\n      }\n    }\n\n    if (unique) {\n      ps[tempCount++] = v;\n    }\n  }\n\n  n = tempCount;\n  if (n < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  // Create the convex hull using the Gift wrapping algorithm\n  // http://en.wikipedia.org/wiki/Gift_wrapping_algorithm\n\n  // Find the right most point on the hull\n  var i0 = 0;\n  var x0 = ps[0].x;\n  for (var i = 1; i < n; ++i) {\n    var x = ps[i].x;\n    if (x > x0 || (x == x0 && ps[i].y < ps[i0].y)) {\n      i0 = i;\n      x0 = x;\n    }\n  }\n\n  var hull = [];// [Settings.maxPolygonVertices];\n  var m = 0;\n  var ih = i0;\n\n  for (;;) {\n    hull[m] = ih;\n\n    var ie = 0;\n    for (var j = 1; j < n; ++j) {\n      if (ie == ih) {\n        ie = j;\n        continue;\n      }\n\n      var r = Vec2.sub(ps[ie], ps[hull[m]]);\n      var v = Vec2.sub(ps[j], ps[hull[m]]);\n      var c = Vec2.cross(r, v);\n      if (c < 0.0) {\n        ie = j;\n      }\n\n      // Collinearity check\n      if (c == 0.0 && v.lengthSquared() > r.lengthSquared()) {\n        ie = j;\n      }\n    }\n\n    ++m;\n    ih = ie;\n\n    if (ie == i0) {\n      break;\n    }\n  }\n\n  if (m < 3) {\n    // Polygon is degenerate.\n    _ASSERT && common.assert(false);\n    this._setAsBox(1.0, 1.0);\n    return;\n  }\n\n  this.m_count = m;\n\n  // Copy vertices.\n  for (var i = 0; i < m; ++i) {\n    this.m_vertices[i] = ps[hull[i]];\n  }\n\n  // Compute normals. Ensure the edges have non-zero length.\n  for (var i = 0; i < m; ++i) {\n    var i1 = i;\n    var i2 = i + 1 < m ? i + 1 : 0;\n    var edge = Vec2.sub(this.m_vertices[i2], this.m_vertices[i1]);\n    _ASSERT && common.assert(edge.lengthSquared() > Math.EPSILON * Math.EPSILON);\n    this.m_normals[i] = Vec2.cross(edge, 1.0);\n    this.m_normals[i].normalize();\n  }\n\n  // Compute the polygon centroid.\n  this.m_centroid = ComputeCentroid(this.m_vertices, m);\n}\n\n/**\n * @private\n */\nPolygonShape.prototype._setAsBox = function(hx, hy, center, angle) {\n  this.m_vertices[0] = Vec2.neo(-hx, -hy);\n  this.m_vertices[1] = Vec2.neo(hx, -hy);\n  this.m_vertices[2] = Vec2.neo(hx, hy);\n  this.m_vertices[3] = Vec2.neo(-hx, hy);\n\n  this.m_normals[0] = Vec2.neo(0.0, -1.0);\n  this.m_normals[1] = Vec2.neo(1.0, 0.0);\n  this.m_normals[2] = Vec2.neo(0.0, 1.0);\n  this.m_normals[3] = Vec2.neo(-1.0, 0.0);\n\n  this.m_count = 4;\n\n  if (Vec2.isValid(center)) {\n    angle = angle || 0;\n\n    this.m_centroid.set(center);\n\n    var xf = Transform.identity();\n    xf.p.set(center);\n    xf.q.set(angle);\n\n    // Transform vertices and normals.\n    for (var i = 0; i < this.m_count; ++i) {\n      this.m_vertices[i] = Transform.mulVec2(xf, this.m_vertices[i]);\n      this.m_normals[i] = Rot.mulVec2(xf.q, this.m_normals[i]);\n    }\n  }\n}\n\nPolygonShape.prototype.testPoint = function(xf, p) {\n  var pLocal = Rot.mulTVec2(xf.q, Vec2.sub(p, xf.p));\n\n  for (var i = 0; i < this.m_count; ++i) {\n    var dot = Vec2.dot(this.m_normals[i], Vec2.sub(pLocal, this.m_vertices[i]));\n    if (dot > 0.0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  // Put the ray into the polygon's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var lower = 0.0;\n  var upper = input.maxFraction;\n\n  var index = -1;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // p = p1 + a * d\n    // dot(normal, p - v) = 0\n    // dot(normal, p1 - v) + a * dot(normal, d) = 0\n    var numerator = Vec2.dot(this.m_normals[i], Vec2.sub(this.m_vertices[i], p1));\n    var denominator = Vec2.dot(this.m_normals[i], d);\n\n    if (denominator == 0.0) {\n      if (numerator < 0.0) {\n        return false;\n      }\n    } else {\n      // Note: we want this predicate without division:\n      // lower < numerator / denominator, where denominator < 0\n      // Since denominator < 0, we have to flip the inequality:\n      // lower < numerator / denominator <==> denominator * lower > numerator.\n      if (denominator < 0.0 && numerator < lower * denominator) {\n        // Increase lower.\n        // The segment enters this half-space.\n        lower = numerator / denominator;\n        index = i;\n      } else if (denominator > 0.0 && numerator < upper * denominator) {\n        // Decrease upper.\n        // The segment exits this half-space.\n        upper = numerator / denominator;\n      }\n    }\n\n    // The use of epsilon here causes the assert on lower to trip\n    // in some cases. Apparently the use of epsilon was to make edge\n    // shapes work, but now those are handled separately.\n    // if (upper < lower - Math.EPSILON)\n    if (upper < lower) {\n      return false;\n    }\n  }\n\n  _ASSERT && common.assert(0.0 <= lower && lower <= input.maxFraction);\n\n  if (index >= 0) {\n    output.fraction = lower;\n    output.normal = Rot.mulVec2(xf.q, this.m_normals[index]);\n    return true;\n  }\n\n  return false;\n};\n\nPolygonShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = Transform.mulVec2(xf, this.m_vertices[i]);\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, v.y);\n    maxY = Math.max(maxY, v.y);\n  }\n\n  aabb.lowerBound.set(minX, minY);\n  aabb.upperBound.set(maxX, maxY);\n  aabb.extend(this.m_radius);\n}\n\nPolygonShape.prototype.computeMass = function(massData, density) {\n  // Polygon mass, centroid, and inertia.\n  // Let rho be the polygon density in mass per unit area.\n  // Then:\n  // mass = rho * int(dA)\n  // centroid.x = (1/mass) * rho * int(x * dA)\n  // centroid.y = (1/mass) * rho * int(y * dA)\n  // I = rho * int((x*x + y*y) * dA)\n  //\n  // We can compute these integrals by summing all the integrals\n  // for each triangle of the polygon. To evaluate the integral\n  // for a single triangle, we make a change of variables to\n  // the (u,v) coordinates of the triangle:\n  // x = x0 + e1x * u + e2x * v\n  // y = y0 + e1y * u + e2y * v\n  // where 0 <= u && 0 <= v && u + v <= 1.\n  //\n  // We integrate u from [0,1-v] and then v from [0,1].\n  // We also need to use the Jacobian of the transformation:\n  // D = cross(e1, e2)\n  //\n  // Simplification: triangle centroid = (1/3) * (p1 + p2 + p3)\n  //\n  // The rest of the derivation is handled by computer algebra.\n\n  _ASSERT && common.assert(this.m_count >= 3);\n\n  var center = Vec2.zero();\n  var area = 0.0;\n  var I = 0.0;\n\n  // s is the reference point for forming triangles.\n  // It's location doesn't change the result (except for rounding error).\n  var s = Vec2.zero();\n\n  // This code would put the reference point inside the polygon.\n  for (var i = 0; i < this.m_count; ++i) {\n    s.add(this.m_vertices[i]);\n  }\n  s.mul(1.0 / this.m_count);\n\n  var k_inv3 = 1.0 / 3.0;\n\n  for (var i = 0; i < this.m_count; ++i) {\n    // Triangle vertices.\n    var e1 = Vec2.sub(this.m_vertices[i], s);\n    var e2 = i + 1 < this.m_count ? Vec2.sub(this.m_vertices[i + 1], s) : Vec2\n        .sub(this.m_vertices[0], s);\n\n    var D = Vec2.cross(e1, e2);\n\n    var triangleArea = 0.5 * D;\n    area += triangleArea;\n\n    // Area weighted centroid\n    center.addCombine(triangleArea * k_inv3, e1, triangleArea * k_inv3, e2);\n\n    var ex1 = e1.x;\n    var ey1 = e1.y;\n    var ex2 = e2.x;\n    var ey2 = e2.y;\n\n    var intx2 = ex1 * ex1 + ex2 * ex1 + ex2 * ex2;\n    var inty2 = ey1 * ey1 + ey2 * ey1 + ey2 * ey2;\n\n    I += (0.25 * k_inv3 * D) * (intx2 + inty2);\n  }\n\n  // Total mass\n  massData.mass = density * area;\n\n  // Center of mass\n  _ASSERT && common.assert(area > Math.EPSILON);\n  center.mul(1.0 / area);\n  massData.center.setCombine(1, center, 1, s);\n\n  // Inertia tensor relative to the local origin (point s).\n  massData.I = density * I;\n\n  // Shift to center of mass then to original body origin.\n  massData.I += massData.mass\n      * (Vec2.dot(massData.center, massData.center) - Vec2.dot(center, center));\n}\n\n// Validate convexity. This is a very time consuming operation.\n// @returns true if valid\nPolygonShape.prototype.validate = function() {\n  for (var i = 0; i < this.m_count; ++i) {\n    var i1 = i;\n    var i2 = i < this.m_count - 1 ? i1 + 1 : 0;\n    var p = this.m_vertices[i1];\n    var e = Vec2.sub(this.m_vertices[i2], p);\n\n    for (var j = 0; j < this.m_count; ++j) {\n      if (j == i1 || j == i2) {\n        continue;\n      }\n\n      var v = Vec2.sub(this.m_vertices[j], p);\n      var c = Vec2.cross(e, v);\n      if (c < 0.0) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nPolygonShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices = this.m_vertices;\n  proxy.m_count = this.m_count;\n  proxy.m_radius = this.m_radius;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Distance;\n\nmodule.exports.Input = DistanceInput;\nmodule.exports.Output = DistanceOutput;\nmodule.exports.Proxy = DistanceProxy;\nmodule.exports.Cache = SimplexCache;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\n/**\n * GJK using Voronoi regions (Christer Ericson) and Barycentric coordinates.\n */\n\nstats.gjkCalls = 0;\nstats.gjkIters = 0;\nstats.gjkMaxIters = 0;\n\n/**\n * Input for Distance. You have to option to use the shape radii in the\n * computation. Even\n */\nfunction DistanceInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.transformA = null;\n  this.transformB = null;\n  this.useRadii = false;\n};\n\n/**\n * Output for Distance.\n *\n * @prop {Vec2} pointA closest point on shapeA\n * @prop {Vec2} pointB closest point on shapeB\n * @prop distance\n * @prop iterations number of GJK iterations used\n */\nfunction DistanceOutput() {\n  this.pointA = Vec2.zero();\n  this.pointB = Vec2.zero();\n  this.distance;\n  this.iterations;\n}\n\n/**\n * Used to warm start Distance. Set count to zero on first call.\n *\n * @prop {number} metric length or area\n * @prop {array} indexA vertices on shape A\n * @prop {array} indexB vertices on shape B\n * @prop {number} count\n */\nfunction SimplexCache() {\n  this.metric = 0;\n  this.indexA = [];\n  this.indexB = [];\n  this.count = 0;\n};\n\n/**\n * Compute the closest points between two shapes. Supports any combination of:\n * CircleShape, PolygonShape, EdgeShape. The simplex cache is input/output. On\n * the first call set SimplexCache.count to zero.\n *\n * @param {DistanceOutput} output\n * @param {SimplexCache} cache\n * @param {DistanceInput} input\n */\nfunction Distance(output, cache, input) {\n  ++stats.gjkCalls;\n\n  var proxyA = input.proxyA;\n  var proxyB = input.proxyB;\n  var xfA = input.transformA;\n  var xfB = input.transformB;\n\n  // Initialize the simplex.\n  var simplex = new Simplex();\n  simplex.readCache(cache, proxyA, xfA, proxyB, xfB);\n\n  // Get simplex vertices as an array.\n  var vertices = simplex.m_v;// SimplexVertex\n  var k_maxIters = Settings.maxDistnceIterations;\n\n  // These store the vertices of the last simplex so that we\n  // can check for duplicates and prevent cycling.\n  var saveA = [];\n  var saveB = []; // int[3]\n  var saveCount = 0;\n\n  var distanceSqr1 = Infinity;\n  var distanceSqr2 = Infinity;\n\n  // Main iteration loop.\n  var iter = 0;\n  while (iter < k_maxIters) {\n    // Copy simplex so we can identify duplicates.\n    saveCount = simplex.m_count;\n    for (var i = 0; i < saveCount; ++i) {\n      saveA[i] = vertices[i].indexA;\n      saveB[i] = vertices[i].indexB;\n    }\n\n    simplex.solve();\n\n    // If we have 3 points, then the origin is in the corresponding triangle.\n    if (simplex.m_count == 3) {\n      break;\n    }\n\n    // Compute closest point.\n    var p = simplex.getClosestPoint();\n    distanceSqr2 = p.lengthSquared();\n\n    // Ensure progress\n    if (distanceSqr2 >= distanceSqr1) {\n      // break;\n    }\n    distanceSqr1 = distanceSqr2;\n\n    // Get search direction.\n    var d = simplex.getSearchDirection();\n\n    // Ensure the search direction is numerically fit.\n    if (d.lengthSquared() < Math.EPSILON * Math.EPSILON) {\n      // The origin is probably contained by a line segment\n      // or triangle. Thus the shapes are overlapped.\n\n      // We can't return zero here even though there may be overlap.\n      // In case the simplex is a point, segment, or triangle it is difficult\n      // to determine if the origin is contained in the CSO or very close to it.\n      break;\n    }\n\n    // Compute a tentative new simplex vertex using support points.\n    var vertex = vertices[simplex.m_count]; // SimplexVertex\n\n    vertex.indexA = proxyA.getSupport(Rot.mulTVec2(xfA.q, Vec2.neg(d)));\n    vertex.wA = Transform.mulVec2(xfA, proxyA.getVertex(vertex.indexA));\n\n    vertex.indexB = proxyB.getSupport(Rot.mulTVec2(xfB.q, d));\n    vertex.wB = Transform.mulVec2(xfB, proxyB.getVertex(vertex.indexB));\n\n    vertex.w = Vec2.sub(vertex.wB, vertex.wA);\n\n    // Iteration count is equated to the number of support point calls.\n    ++iter;\n    ++stats.gjkIters;\n\n    // Check for duplicate support points. This is the main termination\n    // criteria.\n    var duplicate = false;\n    for (var i = 0; i < saveCount; ++i) {\n      if (vertex.indexA == saveA[i] && vertex.indexB == saveB[i]) {\n        duplicate = true;\n        break;\n      }\n    }\n\n    // If we found a duplicate support point we must exit to avoid cycling.\n    if (duplicate) {\n      break;\n    }\n\n    // New vertex is ok and needed.\n    ++simplex.m_count;\n  }\n\n  stats.gjkMaxIters = Math.max(stats.gjkMaxIters, iter);\n\n  // Prepare output.\n  simplex.getWitnessPoints(output.pointA, output.pointB);\n  output.distance = Vec2.distance(output.pointA, output.pointB);\n  output.iterations = iter;\n\n  // Cache the simplex.\n  simplex.writeCache(cache);\n\n  // Apply radii if requested.\n  if (input.useRadii) {\n    var rA = proxyA.m_radius;\n    var rB = proxyB.m_radius;\n\n    if (output.distance > rA + rB && output.distance > Math.EPSILON) {\n      // Shapes are still no overlapped.\n      // Move the witness points to the outer surface.\n      output.distance -= rA + rB;\n      var normal = Vec2.sub(output.pointB, output.pointA);\n      normal.normalize();\n      output.pointA.addMul(rA, normal);\n      output.pointB.subMul(rB, normal);\n    } else {\n      // Shapes are overlapped when radii are considered.\n      // Move the witness points to the middle.\n      var p = Vec2.mid(output.pointA, output.pointB);\n      output.pointA.set(p);\n      output.pointB.set(p);\n      output.distance = 0.0;\n    }\n  }\n}\n\n/**\n * A distance proxy is used by the GJK algorithm. It encapsulates any shape.\n */\nfunction DistanceProxy() {\n  this.m_buffer = []; // Vec2[2]\n  this.m_vertices = []; // Vec2[]\n  this.m_count = 0;\n  this.m_radius = 0;\n};\n\n/**\n * Get the vertex count.\n */\nDistanceProxy.prototype.getVertexCount = function() {\n  return this.m_count;\n}\n\n/**\n * Get a vertex by index. Used by Distance.\n */\nDistanceProxy.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index < this.m_count);\n  return this.m_vertices[index];\n}\n\n/**\n * Get the supporting vertex index in the given direction.\n */\nDistanceProxy.prototype.getSupport = function(d) {\n  var bestIndex = 0;\n  var bestValue = Vec2.dot(this.m_vertices[0], d);\n  for (var i = 0; i < this.m_count; ++i) {\n    var value = Vec2.dot(this.m_vertices[i], d);\n    if (value > bestValue) {\n      bestIndex = i;\n      bestValue = value;\n    }\n  }\n  return bestIndex;\n}\n\n/**\n * Get the supporting vertex in the given direction.\n */\nDistanceProxy.prototype.getSupportVertex = function(d) {\n  return this.m_vertices[this.getSupport(d)];\n}\n\n/**\n * Initialize the proxy using the given shape. The shape must remain in scope\n * while the proxy is in use.\n */\nDistanceProxy.prototype.set = function(shape, index) {\n  // TODO remove, use shape instead\n  _ASSERT && common.assert(typeof shape.computeDistanceProxy === 'function');\n  shape.computeDistanceProxy(this, index);\n}\n\nfunction SimplexVertex() {\n  this.indexA; // wA index\n  this.indexB; // wB index\n  this.wA = Vec2.zero(); // support point in proxyA\n  this.wB = Vec2.zero(); // support point in proxyB\n  this.w = Vec2.zero(); // wB - wA\n  this.a; // barycentric coordinate for closest point\n};\n\nSimplexVertex.prototype.set = function(v) {\n  this.indexA = v.indexA;\n  this.indexB = v.indexB;\n  this.wA = Vec2.clone(v.wA);\n  this.wB = Vec2.clone(v.wB);\n  this.w = Vec2.clone(v.w);\n  this.a = v.a;\n};\n\nfunction Simplex() {\n  this.m_v1 = new SimplexVertex();\n  this.m_v2 = new SimplexVertex();\n  this.m_v3 = new SimplexVertex();\n  this.m_v = [ this.m_v1, this.m_v2, this.m_v3 ];\n  this.m_count;\n};\n\nSimplex.prototype.print = function() {\n  if (this.m_count == 3) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y,\n      this.m_v3.a, this.m_v3.wA.x, this.m_v3.wA.y, this.m_v3.wB.x, this.m_v3.wB.y\n    ].toString();\n\n  } else if (this.m_count == 2) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y,\n      this.m_v2.a, this.m_v2.wA.x, this.m_v2.wA.y, this.m_v2.wB.x, this.m_v2.wB.y\n    ].toString();\n\n  } else if (this.m_count == 1) {\n    return [\"+\" + this.m_count,\n      this.m_v1.a, this.m_v1.wA.x, this.m_v1.wA.y, this.m_v1.wB.x, this.m_v1.wB.y\n    ].toString();\n\n  } else {\n    return \"+\" + this.m_count;\n  }\n};\n\n// (SimplexCache, DistanceProxy, ...)\nSimplex.prototype.readCache = function(cache, proxyA, transformA, proxyB, transformB) {\n  _ASSERT && common.assert(cache.count <= 3);\n\n  // Copy data from cache.\n  this.m_count = cache.count;\n  for (var i = 0; i < this.m_count; ++i) {\n    var v = this.m_v[i];\n    v.indexA = cache.indexA[i];\n    v.indexB = cache.indexB[i];\n    var wALocal = proxyA.getVertex(v.indexA);\n    var wBLocal = proxyB.getVertex(v.indexB);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 0.0;\n  }\n\n  // Compute the new simplex metric, if it is substantially different than\n  // old metric then flush the simplex.\n  if (this.m_count > 1) {\n    var metric1 = cache.metric;\n    var metric2 = this.getMetric();\n    if (metric2 < 0.5 * metric1 || 2.0 * metric1 < metric2\n        || metric2 < Math.EPSILON) {\n      // Reset the simplex.\n      this.m_count = 0;\n    }\n  }\n\n  // If the cache is empty or invalid...\n  if (this.m_count == 0) {\n    var v = this.m_v[0];// SimplexVertex\n    v.indexA = 0;\n    v.indexB = 0;\n    var wALocal = proxyA.getVertex(0);\n    var wBLocal = proxyB.getVertex(0);\n    v.wA = Transform.mulVec2(transformA, wALocal);\n    v.wB = Transform.mulVec2(transformB, wBLocal);\n    v.w = Vec2.sub(v.wB, v.wA);\n    v.a = 1.0;\n    this.m_count = 1;\n  }\n}\n\n// (SimplexCache)\nSimplex.prototype.writeCache = function(cache) {\n  cache.metric = this.getMetric();\n  cache.count = this.m_count;\n  for (var i = 0; i < this.m_count; ++i) {\n    cache.indexA[i] = this.m_v[i].indexA;\n    cache.indexB[i] = this.m_v[i].indexB;\n  }\n}\n\nSimplex.prototype.getSearchDirection = function() {\n  switch (this.m_count) {\n  case 1:\n    return Vec2.neg(this.m_v1.w);\n\n  case 2: {\n    var e12 = Vec2.sub(this.m_v2.w, this.m_v1.w);\n    var sgn = Vec2.cross(e12, Vec2.neg(this.m_v1.w));\n    if (sgn > 0.0) {\n      // Origin is left of e12.\n      return Vec2.cross(1.0, e12);\n    } else {\n      // Origin is right of e12.\n      return Vec2.cross(e12, 1.0);\n    }\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getClosestPoint = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n\n  case 1:\n    return Vec2.clone(this.m_v1.w);\n\n  case 2:\n    return Vec2.combine(this.m_v1.a, this.m_v1.w, this.m_v2.a, this.m_v2.w);\n\n  case 3:\n    return Vec2.zero();\n\n  default:\n    _ASSERT && common.assert(false);\n    return Vec2.zero();\n  }\n}\n\nSimplex.prototype.getWitnessPoints = function(pA, pB) {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    break;\n\n  case 1:\n    pA.set(this.m_v1.wA);\n    pB.set(this.m_v1.wB);\n    break;\n\n  case 2:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pB.setCombine(this.m_v1.a, this.m_v1.wB, this.m_v2.a, this.m_v2.wB);\n    break;\n\n  case 3:\n    pA.setCombine(this.m_v1.a, this.m_v1.wA, this.m_v2.a, this.m_v2.wA);\n    pA.addMul(this.m_v3.a, this.m_v3.wA);\n    pB.set(pA);\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n    break;\n  }\n}\n\nSimplex.prototype.getMetric = function() {\n  switch (this.m_count) {\n  case 0:\n    _ASSERT && common.assert(false);\n    return 0.0;\n\n  case 1:\n    return 0.0;\n\n  case 2:\n    return Vec2.distance(this.m_v1.w, this.m_v2.w);\n\n  case 3:\n    return Vec2.cross(Vec2.sub(this.m_v2.w, this.m_v1.w), Vec2.sub(this.m_v3.w,\n        this.m_v1.w));\n\n  default:\n    _ASSERT && common.assert(false);\n    return 0.0;\n  }\n}\n\nSimplex.prototype.solve = function() {\n  switch (this.m_count) {\n  case 1:\n    break;\n\n  case 2:\n    this.solve2();\n    break;\n\n  case 3:\n    this.solve3();\n    break;\n\n  default:\n    _ASSERT && common.assert(false);\n  }\n}\n\n// Solve a line segment using barycentric coordinates.\n//\n// p = a1 * w1 + a2 * w2\n// a1 + a2 = 1\n//\n// The vector from the origin to the closest point on the line is\n// perpendicular to the line.\n// e12 = w2 - w1\n// dot(p, e) = 0\n// a1 * dot(w1, e) + a2 * dot(w2, e) = 0\n//\n// 2-by-2 linear system\n// [1 1 ][a1] = [1]\n// [w1.e12 w2.e12][a2] = [0]\n//\n// Define\n// d12_1 = dot(w2, e12)\n// d12_2 = -dot(w1, e12)\n// d12 = d12_1 + d12_2\n//\n// Solution\n// a1 = d12_1 / d12\n// a2 = d12_2 / d12\nSimplex.prototype.solve2 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var e12 = Vec2.sub(w2, w1);\n\n  // w1 region\n  var d12_2 = -Vec2.dot(w1, e12);\n  if (d12_2 <= 0.0) {\n    // a2 <= 0, so we clamp it to 0\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // w2 region\n  var d12_1 = Vec2.dot(w2, e12);\n  if (d12_1 <= 0.0) {\n    // a1 <= 0, so we clamp it to 0\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // Must be in e12 region.\n  var inv_d12 = 1.0 / (d12_1 + d12_2);\n  this.m_v1.a = d12_1 * inv_d12;\n  this.m_v2.a = d12_2 * inv_d12;\n  this.m_count = 2;\n}\n\n// Possible regions:\n// - points[2]\n// - edge points[0]-points[2]\n// - edge points[1]-points[2]\n// - inside the triangle\nSimplex.prototype.solve3 = function() {\n  var w1 = this.m_v1.w;\n  var w2 = this.m_v2.w;\n  var w3 = this.m_v3.w;\n\n  // Edge12\n  // [1 1 ][a1] = [1]\n  // [w1.e12 w2.e12][a2] = [0]\n  // a3 = 0\n  var e12 = Vec2.sub(w2, w1);\n  var w1e12 = Vec2.dot(w1, e12);\n  var w2e12 = Vec2.dot(w2, e12);\n  var d12_1 = w2e12;\n  var d12_2 = -w1e12;\n\n  // Edge13\n  // [1 1 ][a1] = [1]\n  // [w1.e13 w3.e13][a3] = [0]\n  // a2 = 0\n  var e13 = Vec2.sub(w3, w1);\n  var w1e13 = Vec2.dot(w1, e13);\n  var w3e13 = Vec2.dot(w3, e13);\n  var d13_1 = w3e13;\n  var d13_2 = -w1e13;\n\n  // Edge23\n  // [1 1 ][a2] = [1]\n  // [w2.e23 w3.e23][a3] = [0]\n  // a1 = 0\n  var e23 = Vec2.sub(w3, w2);// Vec2\n  var w2e23 = Vec2.dot(w2, e23);\n  var w3e23 = Vec2.dot(w3, e23);\n  var d23_1 = w3e23;\n  var d23_2 = -w2e23;\n\n  // Triangle123\n  var n123 = Vec2.cross(e12, e13);\n\n  var d123_1 = n123 * Vec2.cross(w2, w3);\n  var d123_2 = n123 * Vec2.cross(w3, w1);\n  var d123_3 = n123 * Vec2.cross(w1, w2);\n\n  // w1 region\n  if (d12_2 <= 0.0 && d13_2 <= 0.0) {\n    this.m_v1.a = 1.0;\n    this.m_count = 1;\n    return;\n  }\n\n  // e12\n  if (d12_1 > 0.0 && d12_2 > 0.0 && d123_3 <= 0.0) {\n    var inv_d12 = 1.0 / (d12_1 + d12_2);\n    this.m_v1.a = d12_1 * inv_d12;\n    this.m_v2.a = d12_2 * inv_d12;\n    this.m_count = 2;\n    return;\n  }\n\n  // e13\n  if (d13_1 > 0.0 && d13_2 > 0.0 && d123_2 <= 0.0) {\n    var inv_d13 = 1.0 / (d13_1 + d13_2);\n    this.m_v1.a = d13_1 * inv_d13;\n    this.m_v3.a = d13_2 * inv_d13;\n    this.m_count = 2;\n    this.m_v2.set(this.m_v3);\n    return;\n  }\n\n  // w2 region\n  if (d12_1 <= 0.0 && d23_2 <= 0.0) {\n    this.m_v2.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v2);\n    return;\n  }\n\n  // w3 region\n  if (d13_1 <= 0.0 && d23_1 <= 0.0) {\n    this.m_v3.a = 1.0;\n    this.m_count = 1;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // e23\n  if (d23_1 > 0.0 && d23_2 > 0.0 && d123_1 <= 0.0) {\n    var inv_d23 = 1.0 / (d23_1 + d23_2);\n    this.m_v2.a = d23_1 * inv_d23;\n    this.m_v3.a = d23_2 * inv_d23;\n    this.m_count = 2;\n    this.m_v1.set(this.m_v3);\n    return;\n  }\n\n  // Must be in triangle123\n  var inv_d123 = 1.0 / (d123_1 + d123_2 + d123_3);\n  this.m_v1.a = d123_1 * inv_d123;\n  this.m_v2.a = d123_2 * inv_d123;\n  this.m_v3.a = d123_3 * inv_d123;\n  this.m_count = 3;\n}\n\n/**\n * Determine if two generic shapes overlap.\n */\nDistance.testOverlap = function(shapeA, indexA, shapeB, indexB, xfA, xfB) {\n  var input = new DistanceInput();\n  input.proxyA.set(shapeA, indexA);\n  input.proxyB.set(shapeB, indexB);\n  input.transformA = xfA;\n  input.transformB = xfB;\n  input.useRadii = true;\n\n  var cache = new SimplexCache();\n\n  var output = new DistanceOutput();\n  Distance(output, cache, input);\n\n  return output.distance < 10.0 * Math.EPSILON;\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = CircleShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\n\nCircleShape._super = Shape;\nCircleShape.prototype = create(CircleShape._super.prototype);\n\nCircleShape.TYPE = 'circle';\nShape.TYPES[CircleShape.TYPE] = CircleShape;\n\nfunction CircleShape(a, b) {\n  if (!(this instanceof CircleShape)) {\n    return new CircleShape(a, b);\n  }\n\n  CircleShape._super.call(this);\n\n  this.m_type = CircleShape.TYPE;\n  this.m_p = Vec2.zero();\n  this.m_radius = 1;\n\n  if (typeof a === 'object' && Vec2.isValid(a)) {\n    this.m_p.set(a);\n\n    if (typeof b === 'number') {\n      this.m_radius = b;\n    }\n\n  } else if (typeof a === 'number') {\n    this.m_radius = a;\n  }\n}\n\nCircleShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    p: this.m_p,\n    radius: this.m_radius,\n  };\n};\n\nCircleShape._deserialize = function(data) {\n  return new CircleShape(data.p, data.radius);\n};\n\nCircleShape.prototype.getRadius = function() {\n  return this.m_radius;\n}\n\nCircleShape.prototype.getCenter = function() {\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(index == 0);\n  return this.m_p;\n}\n\nCircleShape.prototype.getVertexCount = function(index) {\n  return 1;\n}\n\n/**\n * @deprecated\n */\nCircleShape.prototype._clone = function() {\n  var clone = new CircleShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_p = this.m_p.clone();\n  return clone;\n}\n\nCircleShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nCircleShape.prototype.testPoint = function(xf, p) {\n  var center = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var d = Vec2.sub(p, center);\n  return Vec2.dot(d, d) <= this.m_radius * this.m_radius;\n}\n\n// Collision Detection in Interactive 3D Environments by Gino van den Bergen\n// From Section 3.1.2\n// x = s + a * r\n// norm(x) = radius\nCircleShape.prototype.rayCast = function(output, input, xf, childIndex) {\n\n  var position = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  var s = Vec2.sub(input.p1, position);\n  var b = Vec2.dot(s, s) - this.m_radius * this.m_radius;\n\n  // Solve quadratic equation.\n  var r = Vec2.sub(input.p2, input.p1);\n  var c = Vec2.dot(s, r);\n  var rr = Vec2.dot(r, r);\n  var sigma = c * c - rr * b;\n\n  // Check for negative discriminant and short segment.\n  if (sigma < 0.0 || rr < Math.EPSILON) {\n    return false;\n  }\n\n  // Find the point of intersection of the line with the circle.\n  var a = -(c + Math.sqrt(sigma));\n\n  // Is the intersection point on the segment?\n  if (0.0 <= a && a <= input.maxFraction * rr) {\n    a /= rr;\n    output.fraction = a;\n    output.normal = Vec2.add(s, Vec2.mul(a, r));\n    output.normal.normalize();\n    return true;\n  }\n\n  return false;\n}\n\nCircleShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var p = Vec2.add(xf.p, Rot.mulVec2(xf.q, this.m_p));\n  aabb.lowerBound.set(p.x - this.m_radius, p.y - this.m_radius);\n  aabb.upperBound.set(p.x + this.m_radius, p.y + this.m_radius);\n}\n\nCircleShape.prototype.computeMass = function(massData, density) {\n  massData.mass = density * Math.PI * this.m_radius * this.m_radius;\n  massData.center = this.m_p;\n  // inertia about the local origin\n  massData.I = massData.mass\n      * (0.5 * this.m_radius * this.m_radius + Vec2.dot(this.m_p, this.m_p));\n}\n\nCircleShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_p);\n  proxy.m_count = 1;\n  proxy.m_radius = this.m_radius;\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = EdgeShape;\n\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\n\nEdgeShape._super = Shape;\nEdgeShape.prototype = create(EdgeShape._super.prototype);\n\nEdgeShape.TYPE = 'edge';\nShape.TYPES[EdgeShape.TYPE] = EdgeShape;\n\n/**\n * A line segment (edge) shape. These can be connected in chains or loops to\n * other edge shapes. The connectivity information is used to ensure correct\n * contact normals.\n */\nfunction EdgeShape(v1, v2) {\n  if (!(this instanceof EdgeShape)) {\n    return new EdgeShape(v1, v2);\n  }\n\n  EdgeShape._super.call(this);\n\n  this.m_type = EdgeShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n\n  // These are the edge vertices\n  this.m_vertex1 = v1 ? Vec2.clone(v1) : Vec2.zero();\n  this.m_vertex2 = v2 ? Vec2.clone(v2) : Vec2.zero();\n\n  // Optional adjacent vertices. These are used for smooth collision.\n  // Used by chain shape.\n  this.m_vertex0 = Vec2.zero();\n  this.m_vertex3 = Vec2.zero();\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n}\n\nEdgeShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertex1: this.m_vertex1,\n    vertex2: this.m_vertex2,\n\n    vertex0: this.m_vertex0,\n    vertex3: this.m_vertex3,\n    hasVertex0: this.m_hasVertex0,\n    hasVertex3: this.m_hasVertex3,\n  };\n};\n\nEdgeShape._deserialize = function(data) {\n  var shape = new EdgeShape(data.vertex1, data.vertex2);\n  if (shape.hasVertex0) {\n    shape.setPrev(data.vertex0);\n  }\n  if (shape.hasVertex3) {\n    shape.setNext(data.vertex3);\n  }\n  return shape;\n};\n\nEdgeShape.prototype.setNext = function(v3) {\n  if (v3) {\n    this.m_vertex3.set(v3);\n    this.m_hasVertex3 = true;\n  } else {\n    this.m_vertex3.setZero();\n    this.m_hasVertex3 = false;\n  }\n  return this;\n};\n\nEdgeShape.prototype.setPrev = function(v0) {\n  if (v0) {\n    this.m_vertex0.set(v0);\n    this.m_hasVertex0 = true;\n  } else {\n    this.m_vertex0.setZero();\n    this.m_hasVertex0 = false;\n  }\n  return this;\n};\n\n/**\n * Set this as an isolated edge.\n */\nEdgeShape.prototype._set = function(v1, v2) {\n  this.m_vertex1.set(v1);\n  this.m_vertex2.set(v2);\n  this.m_hasVertex0 = false;\n  this.m_hasVertex3 = false;\n  return this;\n}\n\n/**\n * @deprecated\n */\nEdgeShape.prototype._clone = function() {\n  var clone = new EdgeShape();\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_vertex1.set(this.m_vertex1);\n  clone.m_vertex2.set(this.m_vertex2);\n  clone.m_vertex0.set(this.m_vertex0);\n  clone.m_vertex3.set(this.m_vertex3);\n  clone.m_hasVertex0 = this.m_hasVertex0;\n  clone.m_hasVertex3 = this.m_hasVertex3;\n  return clone;\n}\n\nEdgeShape.prototype.getChildCount = function() {\n  return 1;\n}\n\nEdgeShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\n// p = p1 + t * d\n// v = v1 + s * e\n// p1 + t * d = v1 + s * e\n// s * e - t * d = p1 - v1\nEdgeShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  // NOT_USED(childIndex);\n\n  // Put the ray into the edge's frame of reference.\n  var p1 = Rot.mulTVec2(xf.q, Vec2.sub(input.p1, xf.p));\n  var p2 = Rot.mulTVec2(xf.q, Vec2.sub(input.p2, xf.p));\n  var d = Vec2.sub(p2, p1);\n\n  var v1 = this.m_vertex1;\n  var v2 = this.m_vertex2;\n  var e = Vec2.sub(v2, v1);\n  var normal = Vec2.neo(e.y, -e.x);\n  normal.normalize();\n\n  // q = p1 + t * d\n  // dot(normal, q - v1) = 0\n  // dot(normal, p1 - v1) + t * dot(normal, d) = 0\n  var numerator = Vec2.dot(normal, Vec2.sub(v1, p1));\n  var denominator = Vec2.dot(normal, d);\n\n  if (denominator == 0.0) {\n    return false;\n  }\n\n  var t = numerator / denominator;\n  if (t < 0.0 || input.maxFraction < t) {\n    return false;\n  }\n\n  var q = Vec2.add(p1, Vec2.mul(t, d));\n\n  // q = v1 + s * r\n  // s = dot(q - v1, r) / dot(r, r)\n  var r = Vec2.sub(v2, v1);\n  var rr = Vec2.dot(r, r);\n  if (rr == 0.0) {\n    return false;\n  }\n\n  var s = Vec2.dot(Vec2.sub(q, v1), r) / rr;\n  if (s < 0.0 || 1.0 < s) {\n    return false;\n  }\n\n  output.fraction = t;\n  if (numerator > 0.0) {\n    output.normal = Rot.mulVec2(xf.q, normal).neg();\n  } else {\n    output.normal = Rot.mulVec2(xf.q, normal);\n  }\n  return true;\n}\n\nEdgeShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  var v1 = Transform.mulVec2(xf, this.m_vertex1);\n  var v2 = Transform.mulVec2(xf, this.m_vertex2);\n\n  aabb.combinePoints(v1, v2);\n  aabb.extend(this.m_radius)\n}\n\nEdgeShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center.setCombine(0.5, this.m_vertex1, 0.5, this.m_vertex2);\n  massData.I = 0.0;\n}\n\nEdgeShape.prototype.computeDistanceProxy = function(proxy) {\n  proxy.m_vertices.push(this.m_vertex1);\n  proxy.m_vertices.push(this.m_vertex2);\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};\n","if (typeof Object.create == 'function') {\n  module.exports = function(proto, props) {\n    return Object.create.call(Object, proto, props);\n  };\n} else {\n  module.exports = function(proto, props) {\n    if (props)\n      throw Error('Second argument is not supported!');\n    if (typeof proto !== 'object' || proto === null)\n      throw Error('Invalid prototype!');\n    noop.prototype = proto;\n    return new noop;\n  };\n  function noop() {\n  }\n}\n","var Class = require('./core');\nvar Matrix = require('./matrix');\n\nvar iid = 0;\n\nClass._init(function() {\n  this._pin = new Pin(this);\n});\n\nClass.prototype.matrix = function(relative) {\n  if (relative === true) {\n    return this._pin.relativeMatrix();\n  }\n  return this._pin.absoluteMatrix();\n};\n\nClass.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    this._pin.set(a);\n    return this;\n\n  } else if (typeof a === 'string') {\n    if (typeof b === 'undefined') {\n      return this._pin.get(a);\n    } else {\n      this._pin.set(a, b);\n      return this;\n    }\n  } else if (typeof a === 'undefined') {\n    return this._pin;\n  }\n};\n\nfunction Pin(owner) {\n\n  this._owner = owner;\n  this._parent = null;\n\n  // relative to parent\n  this._relativeMatrix = new Matrix();\n\n  // relative to stage\n  this._absoluteMatrix = new Matrix();\n\n  this.reset();\n};\n\nPin.prototype.reset = function() {\n\n  this._textureAlpha = 1;\n  this._alpha = 1;\n\n  this._width = 0;\n  this._height = 0;\n\n  this._scaleX = 1;\n  this._scaleY = 1;\n  this._skewX = 0;\n  this._skewY = 0;\n  this._rotation = 0;\n\n  // scale/skew/rotate center\n  this._pivoted = false;\n  this._pivotX = null;\n  this._pivotY = null;\n\n  // self pin point\n  this._handled = false;\n  this._handleX = 0;\n  this._handleY = 0;\n\n  // parent pin point\n  this._aligned = false;\n  this._alignX = 0;\n  this._alignY = 0;\n\n  // as seen by parent px\n  this._offsetX = 0;\n  this._offsetY = 0;\n\n  this._boxX = 0;\n  this._boxY = 0;\n  this._boxWidth = this._width;\n  this._boxHeight = this._height;\n\n  // TODO: also set for owner\n  this._ts_translate = ++iid;\n  this._ts_transform = ++iid;\n  this._ts_matrix = ++iid;\n};\n\nPin.prototype._update = function() {\n  this._parent = this._owner._parent && this._owner._parent._pin;\n\n  // if handled and transformed then be translated\n  if (this._handled && this._mo_handle != this._ts_transform) {\n    this._mo_handle = this._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  if (this._aligned && this._parent\n      && this._mo_align != this._parent._ts_transform) {\n    this._mo_align = this._parent._ts_transform;\n    this._ts_translate = ++iid;\n  }\n\n  return this;\n};\n\nPin.prototype.toString = function() {\n  return this._owner + ' (' + (this._parent ? this._parent._owner : null) + ')';\n};\n\n// TODO: ts fields require refactoring\n\nPin.prototype.absoluteMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_matrix : 0);\n  if (this._mo_abs == ts) {\n    return this._absoluteMatrix;\n  }\n  this._mo_abs = ts;\n\n  var abs = this._absoluteMatrix;\n  abs.reset(this.relativeMatrix());\n\n  this._parent && abs.concat(this._parent._absoluteMatrix);\n\n  this._ts_matrix = ++iid;\n\n  return abs;\n};\n\nPin.prototype.relativeMatrix = function() {\n  this._update();\n  var ts = Math.max(this._ts_transform, this._ts_translate,\n      this._parent ? this._parent._ts_transform : 0);\n  if (this._mo_rel == ts) {\n    return this._relativeMatrix;\n  }\n  this._mo_rel = ts;\n\n  var rel = this._relativeMatrix;\n\n  rel.identity();\n  if (this._pivoted) {\n    rel.translate(-this._pivotX * this._width, -this._pivotY * this._height);\n  }\n  rel.scale(this._scaleX, this._scaleY);\n  rel.skew(this._skewX, this._skewY);\n  rel.rotate(this._rotation);\n  if (this._pivoted) {\n    rel.translate(this._pivotX * this._width, this._pivotY * this._height);\n  }\n\n  // calculate effective box\n  if (this._pivoted) {\n    // origin\n    this._boxX = 0;\n    this._boxY = 0;\n    this._boxWidth = this._width;\n    this._boxHeight = this._height;\n\n  } else {\n    // aabb\n    var p, q;\n    if (rel.a > 0 && rel.c > 0 || rel.a < 0 && rel.c < 0) {\n      p = 0, q = rel.a * this._width + rel.c * this._height;\n    } else {\n      p = rel.a * this._width, q = rel.c * this._height;\n    }\n    if (p > q) {\n      this._boxX = q;\n      this._boxWidth = p - q;\n    } else {\n      this._boxX = p;\n      this._boxWidth = q - p;\n    }\n    if (rel.b > 0 && rel.d > 0 || rel.b < 0 && rel.d < 0) {\n      p = 0, q = rel.b * this._width + rel.d * this._height;\n    } else {\n      p = rel.b * this._width, q = rel.d * this._height;\n    }\n    if (p > q) {\n      this._boxY = q;\n      this._boxHeight = p - q;\n    } else {\n      this._boxY = p;\n      this._boxHeight = q - p;\n    }\n  }\n\n  this._x = this._offsetX;\n  this._y = this._offsetY;\n\n  this._x -= this._boxX + this._handleX * this._boxWidth;\n  this._y -= this._boxY + this._handleY * this._boxHeight;\n\n  if (this._aligned && this._parent) {\n    this._parent.relativeMatrix();\n    this._x += this._alignX * this._parent._width;\n    this._y += this._alignY * this._parent._height;\n  }\n\n  rel.translate(this._x, this._y);\n\n  return this._relativeMatrix;\n};\n\nPin.prototype.get = function(key) {\n  if (typeof getters[key] === 'function') {\n    return getters[key](this);\n  }\n};\n\n// TODO: Use defineProperty instead? What about multi-field pinning?\nPin.prototype.set = function(a, b) {\n  if (typeof a === 'string') {\n    if (typeof setters[a] === 'function' && typeof b !== 'undefined') {\n      setters[a](this, b);\n    }\n  } else if (typeof a === 'object') {\n    for (b in a) {\n      if (typeof setters[b] === 'function' && typeof a[b] !== 'undefined') {\n        setters[b](this, a[b], a);\n      }\n    }\n  }\n  if (this._owner) {\n    this._owner._ts_pin = ++iid;\n    this._owner.touch();\n  }\n  return this;\n};\n\nvar getters = {\n  alpha : function(pin) {\n    return pin._alpha;\n  },\n\n  textureAlpha : function(pin) {\n    return pin._textureAlpha;\n  },\n\n  width : function(pin) {\n    return pin._width;\n  },\n\n  height : function(pin) {\n    return pin._height;\n  },\n\n  boxWidth : function(pin) {\n    return pin._boxWidth;\n  },\n\n  boxHeight : function(pin) {\n    return pin._boxHeight;\n  },\n\n  // scale : function(pin) {\n  // },\n\n  scaleX : function(pin) {\n    return pin._scaleX;\n  },\n\n  scaleY : function(pin) {\n    return pin._scaleY;\n  },\n\n  // skew : function(pin) {\n  // },\n\n  skewX : function(pin) {\n    return pin._skewX;\n  },\n\n  skewY : function(pin) {\n    return pin._skewY;\n  },\n\n  rotation : function(pin) {\n    return pin._rotation;\n  },\n\n  // pivot : function(pin) {\n  // },\n\n  pivotX : function(pin) {\n    return pin._pivotX;\n  },\n\n  pivotY : function(pin) {\n    return pin._pivotY;\n  },\n\n  // offset : function(pin) {\n  // },\n\n  offsetX : function(pin) {\n    return pin._offsetX;\n  },\n\n  offsetY : function(pin) {\n    return pin._offsetY;\n  },\n\n  // align : function(pin) {\n  // },\n\n  alignX : function(pin) {\n    return pin._alignX;\n  },\n\n  alignY : function(pin) {\n    return pin._alignY;\n  },\n\n  // handle : function(pin) {\n  // },\n\n  handleX : function(pin) {\n    return pin._handleX;\n  },\n\n  handleY : function(pin) {\n    return pin._handleY;\n  }\n};\n\nvar setters = {\n  alpha : function(pin, value) {\n    pin._alpha = value;\n  },\n\n  textureAlpha : function(pin, value) {\n    pin._textureAlpha = value;\n  },\n\n  width : function(pin, value) {\n    pin._width_ = value;\n    pin._width = value;\n    pin._ts_transform = ++iid;\n  },\n\n  height : function(pin, value) {\n    pin._height_ = value;\n    pin._height = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scale : function(pin, value) {\n    pin._scaleX = value;\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleX : function(pin, value) {\n    pin._scaleX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  scaleY : function(pin, value) {\n    pin._scaleY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skew : function(pin, value) {\n    pin._skewX = value;\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewX : function(pin, value) {\n    pin._skewX = value;\n    pin._ts_transform = ++iid;\n  },\n\n  skewY : function(pin, value) {\n    pin._skewY = value;\n    pin._ts_transform = ++iid;\n  },\n\n  rotation : function(pin, value) {\n    pin._rotation = value;\n    pin._ts_transform = ++iid;\n  },\n\n  pivot : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotX : function(pin, value) {\n    pin._pivotX = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  pivotY : function(pin, value) {\n    pin._pivotY = value;\n    pin._pivoted = true;\n    pin._ts_transform = ++iid;\n  },\n\n  offset : function(pin, value) {\n    pin._offsetX = value;\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetX : function(pin, value) {\n    pin._offsetX = value;\n    pin._ts_translate = ++iid;\n  },\n\n  offsetY : function(pin, value) {\n    pin._offsetY = value;\n    pin._ts_translate = ++iid;\n  },\n\n  align : function(pin, value) {\n    this.alignX(pin, value);\n    this.alignY(pin, value);\n  },\n\n  alignX : function(pin, value) {\n    pin._alignX = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleX(pin, value);\n  },\n\n  alignY : function(pin, value) {\n    pin._alignY = value;\n    pin._aligned = true;\n    pin._ts_translate = ++iid;\n\n    this.handleY(pin, value);\n  },\n\n  handle : function(pin, value) {\n    this.handleX(pin, value);\n    this.handleY(pin, value);\n  },\n\n  handleX : function(pin, value) {\n    pin._handleX = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  handleY : function(pin, value) {\n    pin._handleY = value;\n    pin._handled = true;\n    pin._ts_translate = ++iid;\n  },\n\n  resizeMode : function(pin, value, all) {\n    if (all) {\n      if (value == 'in') {\n        value = 'in-pad';\n      } else if (value == 'out') {\n        value = 'out-crop';\n      }\n      scaleTo(pin, all.resizeWidth, all.resizeHeight, value);\n    }\n  },\n\n  resizeWidth : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  resizeHeight : function(pin, value, all) {\n    if (!all || !all.resizeMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  scaleMode : function(pin, value, all) {\n    if (all) {\n      scaleTo(pin, all.scaleWidth, all.scaleHeight, value);\n    }\n  },\n\n  scaleWidth : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, value, null);\n    }\n  },\n\n  scaleHeight : function(pin, value, all) {\n    if (!all || !all.scaleMode) {\n      scaleTo(pin, null, value);\n    }\n  },\n\n  matrix : function(pin, value) {\n    this.scaleX(pin, value.a);\n    this.skewX(pin, value.c / value.d);\n    this.skewY(pin, value.b / value.a);\n    this.scaleY(pin, value.d);\n    this.offsetX(pin, value.e);\n    this.offsetY(pin, value.f);\n    this.rotation(pin, 0);\n  }\n};\n\nfunction scaleTo(pin, width, height, mode) {\n  var w = typeof width === 'number';\n  var h = typeof height === 'number';\n  var m = typeof mode === 'string';\n  pin._ts_transform = ++iid;\n  if (w) {\n    pin._scaleX = width / pin._width_;\n    pin._width = pin._width_;\n  }\n  if (h) {\n    pin._scaleY = height / pin._height_;\n    pin._height = pin._height_;\n  }\n  if (w && h && m) {\n    if (mode == 'out' || mode == 'out-crop') {\n      pin._scaleX = pin._scaleY = Math.max(pin._scaleX, pin._scaleY);\n    } else if (mode == 'in' || mode == 'in-pad') {\n      pin._scaleX = pin._scaleY = Math.min(pin._scaleX, pin._scaleY);\n    }\n    if (mode == 'out-crop' || mode == 'in-pad') {\n      pin._width = width / pin._scaleX;\n      pin._height = height / pin._scaleY;\n    }\n  }\n};\n\nClass.prototype.scaleTo = function(a, b, c) {\n  if (typeof a === 'object')\n    c = b, b = a.y, a = a.x;\n  scaleTo(this._pin, a, b, c);\n  return this;\n};\n\n// Used by Tween class\nPin._add_shortcuts = function(Class) {\n  Class.prototype.size = function(w, h) {\n    this.pin('width', w);\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.width = function(w) {\n    if (typeof w === 'undefined') {\n      return this.pin('width');\n    }\n    this.pin('width', w);\n    return this;\n  };\n\n  Class.prototype.height = function(h) {\n    if (typeof h === 'undefined') {\n      return this.pin('height');\n    }\n    this.pin('height', h);\n    return this;\n  };\n\n  Class.prototype.offset = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    this.pin('offsetX', a);\n    this.pin('offsetY', b);\n    return this;\n  };\n\n  Class.prototype.rotate = function(a) {\n    this.pin('rotation', a);\n    return this;\n  };\n\n  Class.prototype.skew = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('skewX', a);\n    this.pin('skewY', b);\n    return this;\n  };\n\n  Class.prototype.scale = function(a, b) {\n    if (typeof a === 'object')\n      b = a.y, a = a.x;\n    else if (typeof b === 'undefined')\n      b = a;\n    this.pin('scaleX', a);\n    this.pin('scaleY', b);\n    return this;\n  };\n\n  Class.prototype.alpha = function(a, ta) {\n    this.pin('alpha', a);\n    if (typeof ta !== 'undefined') {\n      this.pin('textureAlpha', ta);\n    }\n    return this;\n  };\n};\n\nPin._add_shortcuts(Class);\n\nmodule.exports = Pin;\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = World;\n\nvar options = require('./util/options');\nvar common = require('./util/common');\nvar Vec2 = require('./common/Vec2');\nvar BroadPhase = require('./collision/BroadPhase');\nvar Solver = require('./Solver');\nvar Body = require('./Body');\nvar Contact = require('./Contact');\n\n/**\n * @typedef {Object} WorldDef\n *\n * @prop {Vec2} [gravity = { x : 0, y : 0}]\n * @prop {boolean} [allowSleep = true]\n * @prop {boolean} [warmStarting = false]\n * @prop {boolean} [continuousPhysics = false]\n * @prop {boolean} [subStepping = false]\n * @prop {boolean} [blockSolve = true]\n * @prop {int} [velocityIterations = 8] For the velocity constraint solver.\n * @prop {int} [positionIterations = 3] For the position constraint solver.\n */\nvar WorldDef = {\n  gravity : Vec2.zero(),\n  allowSleep : true,\n  warmStarting : true,\n  continuousPhysics : true,\n  subStepping : false,\n  blockSolve : true,\n  velocityIterations : 8,\n  positionIterations : 3\n};\n\n/**\n * @param {WordDef|Vec2} def World definition or gravity vector.\n */\nfunction World(def) {\n  if (!(this instanceof World)) {\n    return new World(def);\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {gravity : def};\n  }\n\n  def = options(def, WorldDef);\n\n  this.m_solver = new Solver(this);\n\n  this.m_broadPhase = new BroadPhase();\n\n  this.m_contactList = null;\n  this.m_contactCount = 0;\n\n  this.m_bodyList = null;\n  this.m_bodyCount = 0;\n\n  this.m_jointList = null;\n  this.m_jointCount = 0;\n\n  this.m_stepComplete = true;\n\n  this.m_allowSleep = def.allowSleep;\n  this.m_gravity = Vec2.clone(def.gravity);\n\n  this.m_clearForces = true;\n  this.m_newFixture = false;\n  this.m_locked = false;\n\n  // These are for debugging the solver.\n  this.m_warmStarting = def.warmStarting;\n  this.m_continuousPhysics = def.continuousPhysics;\n  this.m_subStepping = def.subStepping;\n\n  this.m_blockSolve = def.blockSolve;\n  this.m_velocityIterations = def.velocityIterations;\n  this.m_positionIterations = def.positionIterations;\n\n  this.m_t = 0;\n\n  this.m_stepCount = 0;\n\n  // Broad-phase callback.\n  this.addPair = this.createContact.bind(this);\n}\n\nWorld.prototype._serialize = function() {\n  var bodies = [];\n  var joints = [];\n\n  for (var b = this.getBodyList(); b; b = b.getNext()) {\n    bodies.push(b);\n  }\n\n  // for (var j = this.getJointList(); j; j = j.getNext()) {\n  //   joints.push(j);\n  // }\n\n  return {\n    gravity: this.m_gravity,\n    bodies: bodies,\n    // joints: joints,\n  };\n};\n\nWorld._deserialize = function(data) {\n  var world = new World(data.gravity);\n  data.bodies && data.bodies.reverse().forEach(function(data) {\n    world._addBody(Body._deserialize(world, data));\n  });\n\n  return world;\n};\n\n/**\n * Get the world body list. With the returned body, use Body.getNext to get the\n * next body in the world list. A null body indicates the end of the list.\n *\n * @return the head of the world body list.\n */\nWorld.prototype.getBodyList = function() {\n  return this.m_bodyList;\n}\n\n/**\n * Get the world joint list. With the returned joint, use Joint.getNext to get\n * the next joint in the world list. A null joint indicates the end of the list.\n *\n * @return the head of the world joint list.\n */\nWorld.prototype.getJointList = function() {\n  return this.m_jointList;\n}\n\n/**\n * Get the world contact list. With the returned contact, use Contact.getNext to\n * get the next contact in the world list. A null contact indicates the end of\n * the list.\n *\n * @return the head of the world contact list. Warning: contacts are created and\n *         destroyed in the middle of a time step. Use ContactListener to avoid\n *         missing contacts.\n */\nWorld.prototype.getContactList = function() {\n  return this.m_contactList;\n}\n\nWorld.prototype.getBodyCount = function() {\n  return this.m_bodyCount;\n}\n\nWorld.prototype.getJointCount = function() {\n  return this.m_jointCount;\n}\n\n/**\n * Get the number of contacts (each may have 0 or more contact points).\n */\nWorld.prototype.getContactCount = function() {\n  return this.m_contactCount;\n}\n\n/**\n * Change the global gravity vector.\n */\nWorld.prototype.setGravity = function(gravity) {\n  this.m_gravity = gravity;\n}\n\n/**\n * Get the global gravity vector.\n */\nWorld.prototype.getGravity = function() {\n  return this.m_gravity;\n}\n\n/**\n * Is the world locked (in the middle of a time step).\n */\nWorld.prototype.isLocked = function() {\n  return this.m_locked;\n}\n\n/**\n * Enable/disable sleep.\n */\nWorld.prototype.setAllowSleeping = function(flag) {\n  if (flag == this.m_allowSleep) {\n    return;\n  }\n\n  this.m_allowSleep = flag;\n  if (this.m_allowSleep == false) {\n    for (var b = this.m_bodyList; b; b = b.m_next) {\n      b.setAwake(true);\n    }\n  }\n}\n\nWorld.prototype.getAllowSleeping = function() {\n  return this.m_allowSleep;\n}\n\n/**\n * Enable/disable warm starting. For testing.\n */\nWorld.prototype.setWarmStarting = function(flag) {\n  this.m_warmStarting = flag;\n}\n\nWorld.prototype.getWarmStarting = function() {\n  return this.m_warmStarting;\n}\n\n/**\n * Enable/disable continuous physics. For testing.\n */\nWorld.prototype.setContinuousPhysics = function(flag) {\n  this.m_continuousPhysics = flag;\n}\n\nWorld.prototype.getContinuousPhysics = function() {\n  return this.m_continuousPhysics;\n}\n\n/**\n * Enable/disable single stepped continuous physics. For testing.\n */\nWorld.prototype.setSubStepping = function(flag) {\n  this.m_subStepping = flag;\n}\n\nWorld.prototype.getSubStepping = function() {\n  return this.m_subStepping;\n}\n\n/**\n * Set flag to control automatic clearing of forces after each time step.\n */\nWorld.prototype.setAutoClearForces = function(flag) {\n  this.m_clearForces = flag;\n}\n\n/**\n * Get the flag that controls automatic clearing of forces after each time step.\n */\nWorld.prototype.getAutoClearForces = function() {\n  return this.m_clearForces;\n}\n\n/**\n * Manually clear the force buffer on all bodies. By default, forces are cleared\n * automatically after each call to step. The default behavior is modified by\n * calling setAutoClearForces. The purpose of this function is to support\n * sub-stepping. Sub-stepping is often used to maintain a fixed sized time step\n * under a variable frame-rate. When you perform sub-stepping you will disable\n * auto clearing of forces and instead call clearForces after all sub-steps are\n * complete in one pass of your game loop.\n *\n * @see setAutoClearForces\n */\nWorld.prototype.clearForces = function() {\n  for (var body = this.m_bodyList; body; body = body.getNext()) {\n    body.m_force.setZero();\n    body.m_torque = 0.0;\n  }\n}\n\n/**\n * @function World~rayCastCallback\n *\n * @param fixture\n */\n\n/**\n * Query the world for all fixtures that potentially overlap the provided AABB.\n *\n * @param {World~queryCallback} queryCallback Called for each fixture\n *          found in the query AABB. It may return `false` to terminate the\n *          query.\n *\n * @param aabb The query box.\n */\nWorld.prototype.queryAABB = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n  this.m_broadPhase.query(aabb, function(proxyId) { //TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    return queryCallback(proxy.fixture);\n  });\n}\n\n/**\n * @function World~rayCastCallback\n *\n * Callback class for ray casts. See World.rayCast\n *\n * Called for each fixture found in the query. You control how the ray cast\n * proceeds by returning a float: return -1: ignore this fixture and continue\n * return 0: terminate the ray cast return fraction: clip the ray to this point\n * return 1: don't clip the ray and continue\n *\n * @param fixture The fixture hit by the ray\n * @param point The point of initial intersection\n * @param normal The normal vector at the point of intersection\n * @param fraction\n *\n * @return {float} -1 to filter, 0 to terminate, fraction to clip the ray for\n *         closest hit, 1 to continue\n */\n\n/**\n *\n * Ray-cast the world for all fixtures in the path of the ray. Your callback\n * controls whether you get the closest point, any point, or n-points. The\n * ray-cast ignores shapes that contain the starting point.\n *\n * @param {World~RayCastCallback} reportFixtureCallback A user implemented\n *          callback function.\n * @param point1 The ray starting point\n * @param point2 The ray ending point\n */\nWorld.prototype.rayCast = function(point1, point2, reportFixtureCallback) {\n  _ASSERT && common.assert(typeof reportFixtureCallback === 'function');\n  var broadPhase = this.m_broadPhase;\n\n  this.m_broadPhase.rayCast({\n    maxFraction : 1.0,\n    p1 : point1,\n    p2 : point2\n  }, function(input, proxyId) { // TODO GC\n    var proxy = broadPhase.getUserData(proxyId); // FixtureProxy\n    var fixture = proxy.fixture;\n    var index = proxy.childIndex;\n    var output = {}; // TODO GC\n    var hit = fixture.rayCast(output, input, index);\n    if (hit) {\n      var fraction = output.fraction;\n      var point = Vec2.add(Vec2.mul((1.0 - fraction), input.p1), Vec2.mul(fraction, input.p2));\n      return reportFixtureCallback(fixture, point, output.normal, fraction);\n    }\n    return input.maxFraction;\n  });\n}\n\n/**\n * Get the number of broad-phase proxies.\n */\nWorld.prototype.getProxyCount = function() {\n  return this.m_broadPhase.getProxyCount();\n}\n\n/**\n * Get the height of broad-phase dynamic tree.\n */\nWorld.prototype.getTreeHeight = function() {\n  return this.m_broadPhase.getTreeHeight();\n}\n\n/**\n * Get the balance of broad-phase dynamic tree.\n *\n * @returns {int}\n */\nWorld.prototype.getTreeBalance = function() {\n  return this.m_broadPhase.getTreeBalance();\n}\n\n/**\n * Get the quality metric of broad-phase dynamic tree. The smaller the better.\n * The minimum is 1.\n *\n * @returns {float}\n */\nWorld.prototype.getTreeQuality = function() {\n  return this.m_broadPhase.getTreeQuality();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The body shift formula is:\n * position -= newOrigin\n *\n * @param {Vec2} newOrigin The new origin with respect to the old origin\n */\nWorld.prototype.shiftOrigin = function(newOrigin) {\n  _ASSERT && common.assert(this.m_locked == false);\n  if (this.m_locked) {\n    return;\n  }\n\n  for (var b = this.m_bodyList; b; b = b.m_next) {\n    b.m_xf.p.sub(newOrigin);\n    b.m_sweep.c0.sub(newOrigin);\n    b.m_sweep.c.sub(newOrigin);\n  }\n\n  for (var j = this.m_jointList; j; j = j.m_next) {\n    j.shiftOrigin(newOrigin);\n  }\n\n  this.m_broadPhase.shiftOrigin(newOrigin);\n}\n\n/**\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} body\n */\nWorld.prototype._addBody = function(body) {\n  _ASSERT && common.assert(this.isLocked() === false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Add to world doubly linked list.\n  body.m_prev = null;\n  body.m_next = this.m_bodyList;\n  if (this.m_bodyList) {\n    this.m_bodyList.m_prev = body;\n  }\n  this.m_bodyList = body;\n  ++this.m_bodyCount;\n}\n\n/**\n * Create a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {BodyDef|Vec2} def Body definition or position.\n * @param {float} angle Body angle if def is position.\n */\nWorld.prototype.createBody = function(def, angle) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  if (def && Vec2.isValid(def)) {\n    def = {\n      position : def,\n      angle : angle\n    };\n  }\n\n  var body = new Body(this, def);\n\n  this._addBody(body);\n\n  return body;\n}\n\nWorld.prototype.createDynamicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'dynamic';\n  return this.createBody(def);\n}\n\nWorld.prototype.createKinematicBody = function(def, angle) {\n  if (!def) {\n    def = {};\n  } else if (Vec2.isValid(def)) {\n    def = { position : def, angle : angle };\n  }\n  def.type = 'kinematic';\n  return this.createBody(def);\n}\n\n/**\n * Destroy a rigid body given a definition. No reference to the definition is\n * retained.\n *\n * Warning: This automatically deletes all associated shapes and joints.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Body} b\n */\nWorld.prototype.destroyBody = function(b) {\n  _ASSERT && common.assert(this.m_bodyCount > 0);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  if (b.m_destroyed) {\n    return false;\n  }\n\n  // Delete the attached joints.\n  var je = b.m_jointList;\n  while (je) {\n    var je0 = je;\n    je = je.next;\n\n    this.publish('remove-joint', je0.joint);\n    this.destroyJoint(je0.joint);\n\n    b.m_jointList = je;\n  }\n  b.m_jointList = null;\n\n  // Delete the attached contacts.\n  var ce = b.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n\n    this.destroyContact(ce0.contact);\n\n    b.m_contactList = ce;\n  }\n  b.m_contactList = null;\n\n  // Delete the attached fixtures. This destroys broad-phase proxies.\n  var f = b.m_fixtureList;\n  while (f) {\n    var f0 = f;\n    f = f.m_next;\n\n    this.publish('remove-fixture', f0);\n    f0.destroyProxies(this.m_broadPhase);\n\n    b.m_fixtureList = f;\n  }\n  b.m_fixtureList = null;\n\n  // Remove world body list.\n  if (b.m_prev) {\n    b.m_prev.m_next = b.m_next;\n  }\n\n  if (b.m_next) {\n    b.m_next.m_prev = b.m_prev;\n  }\n\n  if (b == this.m_bodyList) {\n    this.m_bodyList = b.m_next;\n  }\n\n  b.m_destroyed = true;\n\n  --this.m_bodyCount;\n\n  this.publish('remove-body', b);\n\n  return true;\n}\n\n/**\n * Create a joint to constrain bodies together. No reference to the definition\n * is retained. This may cause the connected bodies to cease colliding.\n *\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n * @param {Body} bodyB\n * @param {Body} bodyA\n */\nWorld.prototype.createJoint = function(joint) {\n  _ASSERT && common.assert(!!joint.m_bodyA);\n  _ASSERT && common.assert(!!joint.m_bodyB);\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return null;\n  }\n\n  // Connect to the world list.\n  joint.m_prev = null;\n  joint.m_next = this.m_jointList;\n  if (this.m_jointList) {\n    this.m_jointList.m_prev = joint;\n  }\n  this.m_jointList = joint;\n  ++this.m_jointCount;\n\n  // Connect to the bodies' doubly linked lists.\n  joint.m_edgeA.joint = joint;\n  joint.m_edgeA.other = joint.m_bodyB;\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = joint.m_bodyA.m_jointList;\n  if (joint.m_bodyA.m_jointList)\n    joint.m_bodyA.m_jointList.prev = joint.m_edgeA;\n  joint.m_bodyA.m_jointList = joint.m_edgeA;\n\n  joint.m_edgeB.joint = joint;\n  joint.m_edgeB.other = joint.m_bodyA;\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = joint.m_bodyB.m_jointList;\n  if (joint.m_bodyB.m_jointList)\n    joint.m_bodyB.m_jointList.prev = joint.m_edgeB;\n  joint.m_bodyB.m_jointList = joint.m_edgeB;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    for (var edge = joint.m_bodyB.getContactList(); edge; edge = edge.next) {\n      if (edge.other == joint.m_bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n    }\n  }\n\n  // Note: creating a joint doesn't wake the bodies.\n\n  return joint;\n}\n\n/**\n * Destroy a joint. This may cause the connected bodies to begin colliding.\n * Warning: This function is locked during callbacks.\n *\n * @param {Joint} join\n */\nWorld.prototype.destroyJoint = function(joint) {\n  _ASSERT && common.assert(this.isLocked() == false);\n  if (this.isLocked()) {\n    return;\n  }\n\n  // Remove from the doubly linked list.\n  if (joint.m_prev) {\n    joint.m_prev.m_next = joint.m_next;\n  }\n\n  if (joint.m_next) {\n    joint.m_next.m_prev = joint.m_prev;\n  }\n\n  if (joint == this.m_jointList) {\n    this.m_jointList = joint.m_next;\n  }\n\n  // Disconnect from bodies.\n  var bodyA = joint.m_bodyA;\n  var bodyB = joint.m_bodyB;\n\n  // Wake up connected bodies.\n  bodyA.setAwake(true);\n  bodyB.setAwake(true);\n\n  // Remove from body 1.\n  if (joint.m_edgeA.prev) {\n    joint.m_edgeA.prev.next = joint.m_edgeA.next;\n  }\n\n  if (joint.m_edgeA.next) {\n    joint.m_edgeA.next.prev = joint.m_edgeA.prev;\n  }\n\n  if (joint.m_edgeA == bodyA.m_jointList) {\n    bodyA.m_jointList = joint.m_edgeA.next;\n  }\n\n  joint.m_edgeA.prev = null;\n  joint.m_edgeA.next = null;\n\n  // Remove from body 2\n  if (joint.m_edgeB.prev) {\n    joint.m_edgeB.prev.next = joint.m_edgeB.next;\n  }\n\n  if (joint.m_edgeB.next) {\n    joint.m_edgeB.next.prev = joint.m_edgeB.prev;\n  }\n\n  if (joint.m_edgeB == bodyB.m_jointList) {\n    bodyB.m_jointList = joint.m_edgeB.next;\n  }\n\n  joint.m_edgeB.prev = null;\n  joint.m_edgeB.next = null;\n\n  _ASSERT && common.assert(this.m_jointCount > 0);\n  --this.m_jointCount;\n\n  // If the joint prevents collisions, then flag any contacts for filtering.\n  if (joint.m_collideConnected == false) {\n    var edge = bodyB.getContactList();\n    while (edge) {\n      if (edge.other == bodyA) {\n        // Flag the contact for filtering at the next time step (where either\n        // body is awake).\n        edge.contact.flagForFiltering();\n      }\n\n      edge = edge.next;\n    }\n  }\n\n  this.publish('remove-joint', joint);\n}\n\nvar s_step = new Solver.TimeStep(); // reuse\n\n/**\n * Take a time step. This performs collision detection, integration, and\n * constraint solution.\n *\n * Broad-phase, narrow-phase, solve and solve time of impacts.\n *\n * @param {float} timeStep Time step, this should not vary.\n * @param {int} velocityIterations\n * @param {int} positionIterations\n */\nWorld.prototype.step = function(timeStep, velocityIterations, positionIterations) {\n\n  if ((velocityIterations | 0) !== velocityIterations) {\n    // TODO: remove this in future\n    velocityIterations = 0;\n  }\n\n  velocityIterations = velocityIterations || this.m_velocityIterations;\n  positionIterations = positionIterations || this.m_positionIterations;\n\n  // TODO: move this to testbed\n  this.m_stepCount++;\n\n  // If new fixtures were added, we need to find the new contacts.\n  if (this.m_newFixture) {\n    this.findNewContacts();\n    this.m_newFixture = false;\n  }\n\n  this.m_locked = true;\n\n  s_step.reset(timeStep);\n  s_step.velocityIterations = velocityIterations;\n  s_step.positionIterations = positionIterations;\n  s_step.warmStarting = this.m_warmStarting;\n  s_step.blockSolve = this.m_blockSolve;\n\n  // Update contacts. This is where some contacts are destroyed.\n  this.updateContacts();\n\n  // Integrate velocities, solve velocity constraints, and integrate positions.\n  if (this.m_stepComplete && timeStep > 0.0) {\n    this.m_solver.solveWorld(s_step);\n\n    // Synchronize fixtures, check for out of range bodies.\n    for (var b = this.m_bodyList; b; b = b.getNext()) {\n      // If a body was not in an island then it did not move.\n      if (b.m_islandFlag == false) {\n        continue;\n      }\n\n      if (b.isStatic()) {\n        continue;\n      }\n\n      // Update fixtures (for broad-phase).\n      b.synchronizeFixtures();\n    }\n    // Look for new contacts.\n    this.findNewContacts();\n  }\n\n  // Handle TOI events.\n  if (this.m_continuousPhysics && timeStep > 0.0) {\n    this.m_solver.solveWorldTOI(s_step);\n  }\n\n  if (this.m_clearForces) {\n    this.clearForces();\n  }\n\n  this.m_locked = false;\n}\n\n/**\n * Call this method to find new contacts.\n */\nWorld.prototype.findNewContacts = function() {\n  this.m_broadPhase.updatePairs(this.addPair);\n}\n\n/**\n * @private\n *\n * @param {FixtureProxy} proxyA\n * @param {FixtureProxy} proxyB\n */\nWorld.prototype.createContact = function(proxyA, proxyB) {\n  var fixtureA = proxyA.fixture;\n  var fixtureB = proxyB.fixture;\n\n  var indexA = proxyA.childIndex;\n  var indexB = proxyB.childIndex;\n\n  var bodyA = fixtureA.getBody();\n  var bodyB = fixtureB.getBody();\n\n  // Are the fixtures on the same body?\n  if (bodyA == bodyB) {\n    return;\n  }\n\n  // TODO_ERIN use a hash table to remove a potential bottleneck when both\n  // bodies have a lot of contacts.\n  // Does a contact already exist?\n  var edge = bodyB.getContactList(); // ContactEdge\n  while (edge) {\n    if (edge.other == bodyA) {\n      var fA = edge.contact.getFixtureA();\n      var fB = edge.contact.getFixtureB();\n      var iA = edge.contact.getChildIndexA();\n      var iB = edge.contact.getChildIndexB();\n\n      if (fA == fixtureA && fB == fixtureB && iA == indexA && iB == indexB) {\n        // A contact already exists.\n        return;\n      }\n\n      if (fA == fixtureB && fB == fixtureA && iA == indexB && iB == indexA) {\n        // A contact already exists.\n        return;\n      }\n    }\n\n    edge = edge.next;\n  }\n\n  if (bodyB.shouldCollide(bodyA) == false) {\n    return;\n  }\n  if (fixtureB.shouldCollide(fixtureA) == false) {\n    return;\n  }\n\n  // Call the factory.\n  var contact = Contact.create(fixtureA, indexA, fixtureB, indexB);\n  if (contact == null) {\n    return;\n  }\n\n  // Insert into the world.\n  contact.m_prev = null;\n  if (this.m_contactList != null) {\n    contact.m_next = this.m_contactList;\n    this.m_contactList.m_prev = contact;\n  }\n  this.m_contactList = contact;\n\n  ++this.m_contactCount;\n}\n\n/**\n * Removes old non-overlapping contacts, applies filters and updates contacts.\n */\nWorld.prototype.updateContacts = function() {\n  // Update awake contacts.\n  var c, next_c = this.m_contactList;\n  while (c = next_c) {\n    next_c = c.getNext()\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n    var indexA = c.getChildIndexA();\n    var indexB = c.getChildIndexB();\n    var bodyA = fixtureA.getBody();\n    var bodyB = fixtureB.getBody();\n\n    // Is this contact flagged for filtering?\n    if (c.m_filterFlag) {\n      if (bodyB.shouldCollide(bodyA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      if (fixtureB.shouldCollide(fixtureA) == false) {\n        this.destroyContact(c);\n        continue;\n      }\n\n      // Clear the filtering flag.\n      c.m_filterFlag = false;\n    }\n\n    var activeA = bodyA.isAwake() && !bodyA.isStatic();\n    var activeB = bodyB.isAwake() && !bodyB.isStatic();\n\n    // At least one body must be awake and it must be dynamic or kinematic.\n    if (activeA == false && activeB == false) {\n      continue;\n    }\n\n    var proxyIdA = fixtureA.m_proxies[indexA].proxyId;\n    var proxyIdB = fixtureB.m_proxies[indexB].proxyId;\n    var overlap = this.m_broadPhase.testOverlap(proxyIdA, proxyIdB);\n\n    // Here we destroy contacts that cease to overlap in the broad-phase.\n    if (overlap == false) {\n      this.destroyContact(c);\n      continue;\n    }\n\n    // The contact persists.\n    c.update(this);\n  }\n}\n\n/**\n * @param {Contact} contact\n */\nWorld.prototype.destroyContact = function(contact) {\n  Contact.destroy(contact, this);\n\n  // Remove from the world.\n  if (contact.m_prev) {\n    contact.m_prev.m_next = contact.m_next;\n  }\n  if (contact.m_next) {\n    contact.m_next.m_prev = contact.m_prev;\n  }\n  if (contact == this.m_contactList) {\n    this.m_contactList = contact.m_next;\n  }\n\n  --this.m_contactCount;\n}\n\nWorld.prototype._listeners = null;\n\n/**\n * Register an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.on = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  if (!this._listeners) {\n    this._listeners = {};\n  }\n  if (!this._listeners[name]) {\n    this._listeners[name] = [];\n  }\n  this._listeners[name].push(listener);\n  return this;\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} name\n * @param {function} listener\n */\nWorld.prototype.off = function(name, listener) {\n  if (typeof name !== 'string' || typeof listener !== 'function') {\n    return this;\n  }\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return this;\n  }\n  var index = listeners.indexOf(listener);\n  if (index >= 0) {\n    listeners.splice(index, 1);\n  }\n  return this;\n};\n\nWorld.prototype.publish = function(name, arg1, arg2, arg3) {\n  var listeners = this._listeners && this._listeners[name];\n  if (!listeners || !listeners.length) {\n    return 0;\n  }\n  for (var l = 0; l < listeners.length; l++) {\n    listeners[l].call(this, arg1, arg2, arg3);\n  }\n  return listeners.length;\n};\n\n/**\n * @event World#remove-body\n * @event World#remove-joint\n * @event World#remove-fixture\n *\n * Joints and fixtures are destroyed when their associated body is destroyed.\n * Register a destruction listener so that you may nullify references to these\n * joints and shapes.\n *\n * `function(object)` is called when any joint or fixture is about to\n * be destroyed due to the destruction of one of its attached or parent bodies.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.beginContact = function(contact) {\n  this.publish('begin-contact', contact);\n};\n\n/**\n * @event World#begin-contact\n *\n * Called when two fixtures begin to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n */\nWorld.prototype.endContact = function(contact) {\n  this.publish('end-contact', contact);\n};\n\n/**\n * @event World#end-contact\n *\n * Called when two fixtures cease to touch.\n *\n * Implement contact callbacks to get contact information. You can use these\n * results for things like sounds and game logic. You can also get contact\n * results by traversing the contact lists after the time step. However, you\n * might miss some contacts because continuous physics leads to sub-stepping.\n * Additionally you may receive multiple callbacks for the same contact in a\n * single time step. You should strive to make your callbacks efficient because\n * there may be many callbacks per time step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {Manifold} oldManifold\n */\nWorld.prototype.preSolve = function(contact, oldManifold) {\n  this.publish('pre-solve', contact, oldManifold);\n};\n\n/**\n * @event World#pre-solve\n *\n * This is called after a contact is updated. This allows you to inspect a\n * contact before it goes to the solver. If you are careful, you can modify the\n * contact manifold (e.g. disable contact). A copy of the old manifold is\n * provided so that you can detect changes. Note: this is called only for awake\n * bodies. Note: this is called even when the number of contact points is zero.\n * Note: this is not called for sensors. Note: if you set the number of contact\n * points to zero, you will not get an endContact callback. However, you may get\n * a beginContact callback the next step.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * @private\n * @param {Contact} contact\n * @param {ContactImpulse} impulse\n */\nWorld.prototype.postSolve = function(contact, impulse) {\n  this.publish('post-solve', contact, impulse);\n};\n\n/**\n * @event World#post-solve\n *\n * This lets you inspect a contact after the solver is finished. This is useful\n * for inspecting impulses. Note: the contact manifold does not include time of\n * impact impulses, which can be arbitrarily large if the sub-step is small.\n * Hence the impulse is provided explicitly in a separate data structure. Note:\n * this is only called for contacts that are touching, solid, and awake.\n *\n * Warning: You cannot create/destroy world entities inside these callbacks.\n */\n\n/**\n * Register a contact filter to provide specific control over collision.\n * Otherwise the default filter is used (defaultFilter). The listener is owned\n * by you and must remain in scope.\n *\n * Moved to Fixture.\n */\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Body;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Vec2 = require('./common/Vec2');\nvar Rot = require('./common/Rot');\nvar Math = require('./common/Math');\nvar Sweep = require('./common/Sweep');\nvar Transform = require('./common/Transform');\nvar Velocity = require('./common/Velocity');\nvar Position = require('./common/Position');\n\nvar Fixture = require('./Fixture');\nvar Shape = require('./Shape');\nvar World = require('./World');\n\nvar staticBody = Body.STATIC = 'static';\nvar kinematicBody = Body.KINEMATIC = 'kinematic';\nvar dynamicBody = Body.DYNAMIC = 'dynamic';\n\n/**\n * @typedef {Object} BodyDef\n *\n * @prop type Body types are static, kinematic, or dynamic. Note: if a dynamic\n *       body would have zero mass, the mass is set to one.\n *\n * @prop position The world position of the body. Avoid creating bodies at the\n *       origin since this can lead to many overlapping shapes.\n *\n * @prop angle The world angle of the body in radians.\n *\n * @prop linearVelocity The linear velocity of the body's origin in world\n *       co-ordinates.\n *\n * @prop angularVelocity\n *\n * @prop linearDamping Linear damping is use to reduce the linear velocity. The\n *       damping parameter can be larger than 1.0 but the damping effect becomes\n *       sensitive to the time step when the damping parameter is large.\n *\n * @prop angularDamping Angular damping is use to reduce the angular velocity.\n *       The damping parameter can be larger than 1.0 but the damping effect\n *       becomes sensitive to the time step when the damping parameter is large.\n *\n * @prop fixedRotation Should this body be prevented from rotating? Useful for\n *       characters.\n *\n * @prop bullet Is this a fast moving body that should be prevented from\n *       tunneling through other moving bodies? Note that all bodies are\n *       prevented from tunneling through kinematic and static bodies. This\n *       setting is only considered on dynamic bodies. Warning: You should use\n *       this flag sparingly since it increases processing time.\n *\n * @prop active Does this body start out active?\n *\n * @prop awake Is this body initially awake or sleeping?\n *\n * @prop allowSleep Set this flag to false if this body should never fall\n *       asleep. Note that this increases CPU usage.\n */\nvar BodyDef = {\n  type : staticBody,\n  position : Vec2.zero(),\n  angle : 0.0,\n\n  linearVelocity : Vec2.zero(),\n  angularVelocity : 0.0,\n\n  linearDamping : 0.0,\n  angularDamping : 0.0,\n\n  fixedRotation : false,\n  bullet : false,\n  gravityScale : 1.0,\n\n  allowSleep : true,\n  awake : true,\n  active : true,\n\n  userData : null\n};\n\n/**\n * @class\n * \n * A rigid body composed of one or more fixtures.\n * \n * @param {World} world\n * @param {BodyDef} def\n */\nfunction Body(world, def) {\n\n  def = options(def, BodyDef);\n\n  _ASSERT && common.assert(Vec2.isValid(def.position));\n  _ASSERT && common.assert(Vec2.isValid(def.linearVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angle));\n  _ASSERT && common.assert(Math.isFinite(def.angularVelocity));\n  _ASSERT && common.assert(Math.isFinite(def.angularDamping) && def.angularDamping >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.linearDamping) && def.linearDamping >= 0.0);\n\n  this.m_world = world;\n\n  this.m_awakeFlag = def.awake;\n  this.m_autoSleepFlag = def.allowSleep;\n  this.m_bulletFlag = def.bullet;\n  this.m_fixedRotationFlag = def.fixedRotation;\n  this.m_activeFlag = def.active;\n\n  this.m_islandFlag = false;\n  this.m_toiFlag = false;\n\n  this.m_userData = def.userData;\n  this.m_type = def.type;\n\n  if (this.m_type == dynamicBody) {\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  } else {\n    this.m_mass = 0.0;\n    this.m_invMass = 0.0;\n  }\n\n  // Rotational inertia about the center of mass.\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  // the body origin transform\n  this.m_xf = Transform.identity();\n  this.m_xf.p = Vec2.clone(def.position);\n  this.m_xf.q.setAngle(def.angle);\n\n  // the swept motion for CCD\n  this.m_sweep = new Sweep();\n  this.m_sweep.setTransform(this.m_xf);\n\n  // position and velocity correction\n  this.c_velocity = new Velocity();\n  this.c_position = new Position();\n\n  this.m_force = Vec2.zero();\n  this.m_torque = 0.0;\n\n  this.m_linearVelocity = Vec2.clone(def.linearVelocity);\n  this.m_angularVelocity = def.angularVelocity;\n\n  this.m_linearDamping = def.linearDamping;\n  this.m_angularDamping = def.angularDamping;\n  this.m_gravityScale = def.gravityScale;\n\n  this.m_sleepTime = 0.0;\n\n  this.m_jointList = null;\n  this.m_contactList = null;\n  this.m_fixtureList = null;\n\n  this.m_prev = null;\n  this.m_next = null;\n\n  this.m_destroyed = false;\n}\n\nBody.prototype._serialize = function() {\n  var fixtures = [];\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    fixtures.push(f);\n  }\n  return {\n    type: this.m_type,\n    position: this.m_xf.p,\n    angle: this.m_xf.q.getAngle(),\n    linearVelocity: this.m_linearVelocity,\n    angularVelocity: this.m_angularVelocity,\n    fixtures: fixtures,\n  };\n};\n\nBody._deserialize = function(world, data) {\n  var body = new Body(world, data);\n\n  data.fixtures.forEach(function(data) {\n    var fixture = Fixture._deserialize(body, data);\n    body._addFixture(fixture);\n  });\n\n  return body;\n};\n\nBody.prototype.isWorldLocked = function() {\n  return this.m_world && this.m_world.isLocked() ? true : false;\n};\n\nBody.prototype.getWorld = function() {\n  return this.m_world;\n};\n\nBody.prototype.getNext = function() {\n  return this.m_next;\n};\n\nBody.prototype.setUserData = function(data) {\n  this.m_userData = data;\n};\n\nBody.prototype.getUserData = function() {\n  return this.m_userData;\n};\n\nBody.prototype.getFixtureList = function() {\n  return this.m_fixtureList;\n};\n\nBody.prototype.getJointList = function() {\n  return this.m_jointList;\n};\n\n/**\n * Warning: this list changes during the time step and you may miss some\n * collisions if you don't use ContactListener.\n */\nBody.prototype.getContactList = function() {\n  return this.m_contactList;\n};\n\nBody.prototype.isStatic = function() {\n  return this.m_type == staticBody;\n};\n\nBody.prototype.isDynamic = function() {\n  return this.m_type == dynamicBody;\n};\n\nBody.prototype.isKinematic = function() {\n  return this.m_type == kinematicBody;\n};\n\n/**\n * This will alter the mass and velocity.\n */\nBody.prototype.setStatic = function() {\n  this.setType(staticBody);\n  return this;\n};\n\nBody.prototype.setDynamic = function() {\n  this.setType(dynamicBody);\n  return this;\n};\n\nBody.prototype.setKinematic = function() {\n  this.setType(kinematicBody);\n  return this;\n};\n\n/**\n * @private\n */\nBody.prototype.getType = function() {\n  return this.m_type;\n};\n\n/**\n * \n * @private\n */\nBody.prototype.setType = function(type) {\n  _ASSERT && common.assert(type === staticBody || type === kinematicBody || type === dynamicBody);\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type == type) {\n    return;\n  }\n\n  this.m_type = type;\n\n  this.resetMassData();\n\n  if (this.m_type == staticBody) {\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_sweep.forward();\n    this.synchronizeFixtures();\n  }\n\n  this.setAwake(true);\n\n  this.m_force.setZero();\n  this.m_torque = 0.0;\n\n  // Delete the attached contacts.\n  var ce = this.m_contactList;\n  while (ce) {\n    var ce0 = ce;\n    ce = ce.next;\n    this.m_world.destroyContact(ce0.contact);\n  }\n  this.m_contactList = null;\n\n  // Touch the proxies so that new contacts will be created (when appropriate)\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    var proxyCount = f.m_proxyCount;\n    for (var i = 0; i < proxyCount; ++i) {\n      broadPhase.touchProxy(f.m_proxies[i].proxyId);\n    }\n  }\n};\n\nBody.prototype.isBullet = function() {\n  return this.m_bulletFlag;\n};\n\n/**\n * Should this body be treated like a bullet for continuous collision detection?\n */\nBody.prototype.setBullet = function(flag) {\n  this.m_bulletFlag = !!flag;\n};\n\nBody.prototype.isSleepingAllowed = function() {\n  return this.m_autoSleepFlag;\n};\n\nBody.prototype.setSleepingAllowed = function(flag) {\n  this.m_autoSleepFlag = !!flag;\n  if (this.m_autoSleepFlag == false) {\n    this.setAwake(true);\n  }\n};\n\nBody.prototype.isAwake = function() {\n  return this.m_awakeFlag;\n};\n\n/**\n * Set the sleep state of the body. A sleeping body has very low CPU cost.\n * \n * @param flag Set to true to wake the body, false to put it to sleep.\n */\nBody.prototype.setAwake = function(flag) {\n  if (flag) {\n    if (this.m_awakeFlag == false) {\n      this.m_awakeFlag = true;\n      this.m_sleepTime = 0.0;\n    }\n  } else {\n    this.m_awakeFlag = false;\n    this.m_sleepTime = 0.0;\n    this.m_linearVelocity.setZero();\n    this.m_angularVelocity = 0.0;\n    this.m_force.setZero();\n    this.m_torque = 0.0;\n  }\n};\n\nBody.prototype.isActive = function() {\n  return this.m_activeFlag;\n};\n\n/**\n * Set the active state of the body. An inactive body is not simulated and\n * cannot be collided with or woken up. If you pass a flag of true, all fixtures\n * will be added to the broad-phase. If you pass a flag of false, all fixtures\n * will be removed from the broad-phase and all contacts will be destroyed.\n * Fixtures and joints are otherwise unaffected.\n * \n * You may continue to create/destroy fixtures and joints on inactive bodies.\n * Fixtures on an inactive body are implicitly inactive and will not participate\n * in collisions, ray-casts, or queries. Joints connected to an inactive body\n * are implicitly inactive. An inactive body is still owned by a World object\n * and remains\n */\nBody.prototype.setActive = function(flag) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (flag == this.m_activeFlag) {\n    return;\n  }\n\n  this.m_activeFlag = !!flag;\n\n  if (this.m_activeFlag) {\n    // Create all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.createProxies(broadPhase, this.m_xf);\n    }\n    // Contacts are created the next time step.\n\n  } else {\n    // Destroy all proxies.\n    var broadPhase = this.m_world.m_broadPhase;\n    for (var f = this.m_fixtureList; f; f = f.m_next) {\n      f.destroyProxies(broadPhase);\n    }\n\n    // Destroy the attached contacts.\n    var ce = this.m_contactList;\n    while (ce) {\n      var ce0 = ce;\n      ce = ce.next;\n      this.m_world.destroyContact(ce0.contact);\n    }\n    this.m_contactList = null;\n  }\n};\n\nBody.prototype.isFixedRotation = function() {\n  return this.m_fixedRotationFlag;\n};\n\n/**\n * Set this body to have fixed rotation. This causes the mass to be reset.\n */\nBody.prototype.setFixedRotation = function(flag) {\n  if (this.m_fixedRotationFlag == flag) {\n    return;\n  }\n\n  this.m_fixedRotationFlag = !!flag;\n\n  this.m_angularVelocity = 0.0;\n\n  this.resetMassData();\n};\n\n/**\n * Get the world transform for the body's origin.\n */\nBody.prototype.getTransform = function() {\n  return this.m_xf;\n};\n\n/**\n * Set the position of the body's origin and rotation. Manipulating a body's\n * transform may cause non-physical behavior. Note: contacts are updated on the\n * next call to World.step.\n * \n * @param position The world position of the body's local origin.\n * @param angle The world rotation in radians.\n */\nBody.prototype.setTransform = function(position, angle) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  this.m_xf.set(position, angle);\n  this.m_sweep.setTransform(this.m_xf);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, this.m_xf, this.m_xf);\n  }\n};\n\nBody.prototype.synchronizeTransform = function() {\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Update fixtures in broad-phase.\n */\nBody.prototype.synchronizeFixtures = function() {\n  var xf = Transform.identity();\n\n  this.m_sweep.getTransform(xf, 0);\n\n  var broadPhase = this.m_world.m_broadPhase;\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    f.synchronize(broadPhase, xf, this.m_xf);\n  }\n};\n\n/**\n * Used in TOI.\n */\nBody.prototype.advance = function(alpha) {\n  // Advance to the new safe time. This doesn't sync the broad-phase.\n  this.m_sweep.advance(alpha);\n  this.m_sweep.c.set(this.m_sweep.c0);\n  this.m_sweep.a = this.m_sweep.a0;\n  this.m_sweep.getTransform(this.m_xf, 1);\n};\n\n/**\n * Get the world position for the body's origin.\n */\nBody.prototype.getPosition = function() {\n  return this.m_xf.p;\n};\n\nBody.prototype.setPosition = function(p) {\n  this.setTransform(p, this.m_sweep.a);\n};\n\n/**\n * Get the current world rotation angle in radians.\n */\nBody.prototype.getAngle = function() {\n  return this.m_sweep.a;\n};\n\nBody.prototype.setAngle = function(angle) {\n  this.setTransform(this.m_xf.p, angle);\n};\n\n/**\n * Get the world position of the center of mass.\n */\nBody.prototype.getWorldCenter = function() {\n  return this.m_sweep.c;\n};\n\n/**\n * Get the local position of the center of mass.\n */\nBody.prototype.getLocalCenter = function() {\n  return this.m_sweep.localCenter;\n};\n\n/**\n * Get the linear velocity of the center of mass.\n * \n * @return the linear velocity of the center of mass.\n */\nBody.prototype.getLinearVelocity = function() {\n  return this.m_linearVelocity;\n};\n\n/**\n * Get the world linear velocity of a world point attached to this body.\n * \n * @param worldPoint A point in world coordinates.\n */\nBody.prototype.getLinearVelocityFromWorldPoint = function(worldPoint) {\n  var localCenter = Vec2.sub(worldPoint, this.m_sweep.c);\n  return Vec2.add(this.m_linearVelocity, Vec2.cross(this.m_angularVelocity,\n      localCenter));\n};\n\n/**\n * Get the world velocity of a local point.\n * \n * @param localPoint A point in local coordinates.\n */\nBody.prototype.getLinearVelocityFromLocalPoint = function(localPoint) {\n  return this.getLinearVelocityFromWorldPoint(this.getWorldPoint(localPoint));\n};\n\n/**\n * Set the linear velocity of the center of mass.\n * \n * @param v The new linear velocity of the center of mass.\n */\nBody.prototype.setLinearVelocity = function(v) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (Vec2.dot(v, v) > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_linearVelocity.set(v);\n};\n\n/**\n * Get the angular velocity.\n * \n * @returns the angular velocity in radians/second.\n */\nBody.prototype.getAngularVelocity = function() {\n  return this.m_angularVelocity;\n};\n\n/**\n * Set the angular velocity.\n * \n * @param omega The new angular velocity in radians/second.\n */\nBody.prototype.setAngularVelocity = function(w) {\n  if (this.m_type == staticBody) {\n    return;\n  }\n  if (w * w > 0.0) {\n    this.setAwake(true);\n  }\n  this.m_angularVelocity = w;\n};\n\nBody.prototype.getLinearDamping = function() {\n  return this.m_linearDamping;\n};\n\nBody.prototype.setLinearDamping = function(linearDamping) {\n  this.m_linearDamping = linearDamping;\n};\n\nBody.prototype.getAngularDamping = function() {\n  return this.m_angularDamping;\n};\n\nBody.prototype.setAngularDamping = function(angularDamping) {\n  this.m_angularDamping = angularDamping;\n};\n\nBody.prototype.getGravityScale = function() {\n  return this.m_gravityScale;\n};\n\n/**\n * Scale the gravity applied to this body.\n */\nBody.prototype.setGravityScale = function(scale) {\n  this.m_gravityScale = scale;\n};\n\n/**\n * Get the total mass of the body.\n * \n * @returns The mass, usually in kilograms (kg).\n */\nBody.prototype.getMass = function() {\n  return this.m_mass;\n};\n\n/**\n * Get the rotational inertia of the body about the local origin.\n * \n * @return the rotational inertia, usually in kg-m^2.\n */\nBody.prototype.getInertia = function() {\n  return this.m_I + this.m_mass\n      * Vec2.dot(this.m_sweep.localCenter, this.m_sweep.localCenter);\n};\n\n/**\n * @typedef {Object} MassData This holds the mass data computed for a shape.\n * \n * @prop mass The mass of the shape, usually in kilograms.\n * @prop center The position of the shape's centroid relative to the shape's\n *       origin.\n * @prop I The rotational inertia of the shape about the local origin.\n */\nfunction MassData() {\n  this.mass = 0;\n  this.center = Vec2.zero();\n  this.I = 0;\n};\n\n/**\n * Copy the mass data of the body to data.\n */\nBody.prototype.getMassData = function(data) {\n  data.mass = this.m_mass;\n  data.I = this.getInertia();\n  data.center.set(this.m_sweep.localCenter);\n};\n\n/**\n * This resets the mass properties to the sum of the mass properties of the\n * fixtures. This normally does not need to be called unless you called\n * SetMassData to override the mass and you later want to reset the mass.\n */\nBody.prototype.resetMassData = function() {\n  // Compute mass data from shapes. Each shape has its own density.\n  this.m_mass = 0.0;\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n  this.m_sweep.localCenter.setZero();\n\n  // Static and kinematic bodies have zero mass.\n  if (this.isStatic() || this.isKinematic()) {\n    this.m_sweep.c0.set(this.m_xf.p);\n    this.m_sweep.c.set(this.m_xf.p);\n    this.m_sweep.a0 = this.m_sweep.a;\n    return;\n  }\n\n  _ASSERT && common.assert(this.isDynamic());\n\n  // Accumulate mass over all fixtures.\n  var localCenter = Vec2.zero();\n  for (var f = this.m_fixtureList; f; f = f.m_next) {\n    if (f.m_density == 0.0) {\n      continue;\n    }\n\n    var massData = new MassData();\n    f.getMassData(massData);\n    this.m_mass += massData.mass;\n    localCenter.addMul(massData.mass, massData.center);\n    this.m_I += massData.I;\n  }\n\n  // Compute center of mass.\n  if (this.m_mass > 0.0) {\n    this.m_invMass = 1.0 / this.m_mass;\n    localCenter.mul(this.m_invMass);\n\n  } else {\n    // Force all dynamic bodies to have a positive mass.\n    this.m_mass = 1.0;\n    this.m_invMass = 1.0;\n  }\n\n  if (this.m_I > 0.0 && this.m_fixedRotationFlag == false) {\n    // Center the inertia about the center of mass.\n    this.m_I -= this.m_mass * Vec2.dot(localCenter, localCenter);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n\n  } else {\n    this.m_I = 0.0;\n    this.m_invI = 0.0;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(localCenter, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Set the mass properties to override the mass properties of the fixtures. Note\n * that this changes the center of mass position. Note that creating or\n * destroying fixtures can also alter the mass. This function has no effect if\n * the body isn't dynamic.\n * \n * @param massData The mass properties.\n */\nBody.prototype.setMassData = function(massData) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  this.m_invMass = 0.0;\n  this.m_I = 0.0;\n  this.m_invI = 0.0;\n\n  this.m_mass = massData.mass;\n  if (this.m_mass <= 0.0) {\n    this.m_mass = 1.0;\n  }\n\n  this.m_invMass = 1.0 / this.m_mass;\n\n  if (massData.I > 0.0 && this.m_fixedRotationFlag == false) {\n    this.m_I = massData.I - this.m_mass\n        * Vec2.dot(massData.center, massData.center);\n    _ASSERT && common.assert(this.m_I > 0.0);\n    this.m_invI = 1.0 / this.m_I;\n  }\n\n  // Move center of mass.\n  var oldCenter = Vec2.clone(this.m_sweep.c);\n  this.m_sweep.setLocalCenter(massData.center, this.m_xf);\n\n  // Update center of mass velocity.\n  this.m_linearVelocity.add(Vec2.cross(this.m_angularVelocity, Vec2.sub(\n      this.m_sweep.c, oldCenter)));\n};\n\n/**\n * Apply a force at a world point. If the force is not applied at the center of\n * mass, it will generate a torque and affect the angular velocity. This wakes\n * up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyForce = function(force, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping.\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n    this.m_torque += Vec2.cross(Vec2.sub(point, this.m_sweep.c), force);\n  }\n};\n\n/**\n * Apply a force to the center of mass. This wakes up the body.\n * \n * @param force The world force vector, usually in Newtons (N).\n * @param wake Also wake up the body\n */\nBody.prototype.applyForceToCenter = function(force, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_force.add(force);\n  }\n};\n\n/**\n * Apply a torque. This affects the angular velocity without affecting the\n * linear velocity of the center of mass. This wakes up the body.\n * \n * @param torque About the z-axis (out of the screen), usually in N-m.\n * @param wake Also wake up the body\n */\nBody.prototype.applyTorque = function(torque, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate a force if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_torque += torque;\n  }\n};\n\n/**\n * Apply an impulse at a point. This immediately modifies the velocity. It also\n * modifies the angular velocity if the point of application is not at the\n * center of mass. This wakes up the body.\n * \n * @param impulse The world impulse vector, usually in N-seconds or kg-m/s.\n * @param point The world position of the point of application.\n * @param wake Also wake up the body\n */\nBody.prototype.applyLinearImpulse = function(impulse, point, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_linearVelocity.addMul(this.m_invMass, impulse);\n    this.m_angularVelocity += this.m_invI * Vec2.cross(Vec2.sub(point, this.m_sweep.c), impulse);\n  }\n};\n\n/**\n * Apply an angular impulse.\n * \n * @param impulse The angular impulse in units of kg*m*m/s\n * @param wake Also wake up the body\n */\nBody.prototype.applyAngularImpulse = function(impulse, wake) {\n  if (this.m_type != dynamicBody) {\n    return;\n  }\n\n  if (wake && this.m_awakeFlag == false) {\n    this.setAwake(true);\n  }\n  // Don't accumulate velocity if the body is sleeping\n  if (this.m_awakeFlag) {\n    this.m_angularVelocity += this.m_invI * impulse;\n  }\n};\n\n/**\n * This is used to prevent connected bodies (by joints) from colliding,\n * depending on the joint's collideConnected flag.\n */\nBody.prototype.shouldCollide = function(that) {\n  // At least one body should be dynamic.\n  if (this.m_type != dynamicBody && that.m_type != dynamicBody) {\n    return false;\n  }\n  // Does a joint prevent collision?\n  for (var jn = this.m_jointList; jn; jn = jn.next) {\n    if (jn.other == that) {\n      if (jn.joint.m_collideConnected == false) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nBody.prototype._addFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.createProxies(broadPhase, this.m_xf);\n  }\n\n  fixture.m_next = this.m_fixtureList;\n  this.m_fixtureList = fixture;\n\n  // Adjust mass properties if needed.\n  if (fixture.m_density > 0.0) {\n    this.resetMassData();\n  }\n\n  // Let the world know we have a new fixture. This will cause new contacts\n  // to be created at the beginning of the next time step.\n  this.m_world.m_newFixture = true;\n\n  return fixture\n};\n\n/**\n * Creates a fixture and attach it to this body.\n * \n * If the density is non-zero, this function automatically updates the mass of\n * the body.\n * \n * Contacts are not created until the next time step.\n * \n * Warning: This function is locked during callbacks.\n\n * @param {Shape|FixtureDef} shape Shape or fixture definition.\n * @param {FixtureDef|number} fixdef Fixture definition or just density.\n */\nBody.prototype.createFixture = function(shape, fixdef) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return null;\n  }\n\n  var fixture = new Fixture(this, shape, fixdef);\n  this._addFixture(fixture);\n  return fixture\n};\n\n/**\n * Destroy a fixture. This removes the fixture from the broad-phase and destroys\n * all contacts associated with this fixture. This will automatically adjust the\n * mass of the body if the body is dynamic and the fixture has positive density.\n * All fixtures attached to a body are implicitly destroyed when the body is\n * destroyed.\n * \n * Warning: This function is locked during callbacks.\n * \n * @param fixture The fixture to be removed.\n */\nBody.prototype.destroyFixture = function(fixture) {\n  _ASSERT && common.assert(this.isWorldLocked() == false);\n\n  if (this.isWorldLocked() == true) {\n    return;\n  }\n\n  _ASSERT && common.assert(fixture.m_body == this);\n\n  // Remove the fixture from this body's singly linked list.\n  var found = false;\n  if (this.m_fixtureList === fixture) {\n    this.m_fixtureList = fixture.m_next;\n    found = true;\n\n  } else {\n    var node = this.m_fixtureList;\n    while (node != null) {\n      if (node.m_next === fixture) {\n        node.m_next = fixture.m_next;\n        found = true;\n        break;\n      }\n      node = node.m_next;\n    }\n  }\n\n  // You tried to remove a shape that is not attached to this body.\n  _ASSERT && common.assert(found);\n\n  // Destroy any contacts associated with the fixture.\n  var edge = this.m_contactList;\n  while (edge) {\n    var c = edge.contact;\n    edge = edge.next;\n\n    var fixtureA = c.getFixtureA();\n    var fixtureB = c.getFixtureB();\n\n    if (fixture == fixtureA || fixture == fixtureB) {\n      // This destroys the contact and removes it from\n      // this body's contact list.\n      this.m_world.destroyContact(c);\n    }\n  }\n\n  if (this.m_activeFlag) {\n    var broadPhase = this.m_world.m_broadPhase;\n    fixture.destroyProxies(broadPhase);\n  }\n\n  fixture.m_body = null;\n  fixture.m_next = null;\n\n  this.m_world.publish('remove-fixture', fixture);\n\n  // Reset the mass data.\n  this.resetMassData();\n};\n\n/**\n * Get the corresponding world point of a local point.\n */\nBody.prototype.getWorldPoint = function(localPoint) {\n  return Transform.mulVec2(this.m_xf, localPoint);\n};\n\n/**\n * Get the corresponding world vector of a local vector.\n */\nBody.prototype.getWorldVector = function(localVector) {\n  return Rot.mulVec2(this.m_xf.q, localVector);\n};\n\n/**\n * Gets the corresponding local point of a world point.\n */\nBody.prototype.getLocalPoint = function(worldPoint) {\n  return Transform.mulTVec2(this.m_xf, worldPoint);\n};\n\n/**\n * \n * Gets the corresponding local vector of a world vector.\n */\nBody.prototype.getLocalVector = function(worldVector) {\n  return Rot.mulTVec2(this.m_xf.q, worldVector);\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nexports.toString = function(newline) {\n  newline = typeof newline === 'string' ? newline : '\\n';\n  var string = \"\";\n  for (var name in this) {\n    if (typeof this[name] !== 'function' && typeof this[name] !== 'object') {\n      string += name + ': ' + this[name] + newline;\n    }\n  }\n  return string;\n};","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = ChainShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar options = require('../util/options');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar EdgeShape = require('./EdgeShape');\n\nChainShape._super = Shape;\nChainShape.prototype = create(ChainShape._super.prototype);\n\nChainShape.TYPE = 'chain';\nShape.TYPES[ChainShape.TYPE] = ChainShape;\n\n/**\n * A chain shape is a free form sequence of line segments. The chain has\n * two-sided collision, so you can use inside and outside collision. Therefore,\n * you may use any winding order. Connectivity information is used to create\n * smooth collisions.\n * \n * WARNING: The chain will not collide properly if there are self-intersections.\n */\nfunction ChainShape(vertices, loop) {\n  if (!(this instanceof ChainShape)) {\n    return new ChainShape(vertices, loop);\n  }\n\n  ChainShape._super.call(this);\n\n  this.m_type = ChainShape.TYPE;\n  this.m_radius = Settings.polygonRadius;\n  this.m_vertices = [];\n  this.m_count = 0;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n\n  this.m_isLoop = loop;\n\n  if (vertices && vertices.length) {\n    if (loop) {\n      this._createLoop(vertices);\n    } else {\n      this._createChain(vertices);\n    }\n  }\n}\n\nChainShape.prototype._serialize = function() {\n  return {\n    type: this.m_type,\n\n    vertices: this.m_vertices,\n    isLoop: this.m_isLoop,\n    prevVertex: this.m_prevVertex,\n    nextVertex: this.m_nextVertex,\n    hasPrevVertex: this.m_hasPrevVertex,\n    hasNextVertex: this.m_hasNextVertex,\n  };\n};\n\nChainShape._deserialize = function(data) {\n  var shape = new ChainShape(data.vertices.map(Vec2._deserialize), data.isLoop);\n  return shape;\n};\n\n// ChainShape.clear = function() {\n// this.m_vertices.length = 0;\n// this.m_count = 0;\n// }\n\n/**\n * Create a loop. This automatically adjusts connectivity.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createLoop = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 3);\n  for (var i = 1; i < vertices.length; ++i) {\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    // If the code crashes here, it means your vertices are too close together.\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_vertices.length = 0;\n  this.m_count = vertices.length + 1;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n  this.m_vertices[vertices.length] = vertices[0].clone();\n\n  this.m_prevVertex = this.m_vertices[this.m_count - 2];\n  this.m_nextVertex = this.m_vertices[1];\n  this.m_hasPrevVertex = true;\n  this.m_hasNextVertex = true;\n  return this;\n}\n\n/**\n * Create a chain with isolated end vertices.\n * \n * @param vertices an array of vertices, these are copied\n * @param count the vertex count\n */\nChainShape.prototype._createChain = function(vertices) {\n  _ASSERT && common.assert(this.m_vertices.length == 0 && this.m_count == 0);\n  _ASSERT && common.assert(vertices.length >= 2);\n  for (var i = 1; i < vertices.length; ++i) {\n    // If the code crashes here, it means your vertices are too close together.\n    var v1 = vertices[i - 1];\n    var v2 = vertices[i];\n    _ASSERT && common.assert(Vec2.distanceSquared(v1, v2) > Settings.linearSlopSquared);\n  }\n\n  this.m_count = vertices.length;\n  for (var i = 0; i < vertices.length; ++i) {\n    this.m_vertices[i] = vertices[i].clone();\n  }\n\n  this.m_hasPrevVertex = false;\n  this.m_hasNextVertex = false;\n  this.m_prevVertex = null;\n  this.m_nextVertex = null;\n  return this;\n}\n\n/**\n * Establish connectivity to a vertex that precedes the first vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setPrevVertex = function(prevVertex) {\n  this.m_prevVertex = prevVertex;\n  this.m_hasPrevVertex = true;\n}\n\n/**\n * Establish connectivity to a vertex that follows the last vertex. Don't call\n * this for loops.\n */\nChainShape.prototype._setNextVertex = function(nextVertex) {\n  this.m_nextVertex = nextVertex;\n  this.m_hasNextVertex = true;\n}\n\n/**\n * @deprecated\n */\nChainShape.prototype._clone = function() {\n  var clone = new ChainShape();\n  clone.createChain(this.m_vertices);\n  clone.m_type = this.m_type;\n  clone.m_radius = this.m_radius;\n  clone.m_prevVertex = this.m_prevVertex;\n  clone.m_nextVertex = this.m_nextVertex;\n  clone.m_hasPrevVertex = this.m_hasPrevVertex;\n  clone.m_hasNextVertex = this.m_hasNextVertex;\n  return clone;\n}\n\nChainShape.prototype.getChildCount = function() {\n  // edge count = vertex count - 1\n  return this.m_count - 1;\n}\n\n// Get a child edge.\nChainShape.prototype.getChildEdge = function(edge, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count - 1);\n  edge.m_type = EdgeShape.TYPE;\n  edge.m_radius = this.m_radius;\n\n  edge.m_vertex1 = this.m_vertices[childIndex];\n  edge.m_vertex2 = this.m_vertices[childIndex + 1];\n\n  if (childIndex > 0) {\n    edge.m_vertex0 = this.m_vertices[childIndex - 1];\n    edge.m_hasVertex0 = true;\n  } else {\n    edge.m_vertex0 = this.m_prevVertex;\n    edge.m_hasVertex0 = this.m_hasPrevVertex;\n  }\n\n  if (childIndex < this.m_count - 2) {\n    edge.m_vertex3 = this.m_vertices[childIndex + 2];\n    edge.m_hasVertex3 = true;\n  } else {\n    edge.m_vertex3 = this.m_nextVertex;\n    edge.m_hasVertex3 = this.m_hasNextVertex;\n  }\n}\n\nChainShape.prototype.getVertex = function(index) {\n  _ASSERT && common.assert(0 <= index && index <= this.m_count);\n  if (index < this.m_count) {\n    return this.m_vertices[index];\n  } else {\n    return this.m_vertices[0];\n  }\n}\n\n/**\n * This always return false.\n */\nChainShape.prototype.testPoint = function(xf, p) {\n  return false;\n}\n\nChainShape.prototype.rayCast = function(output, input, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var edgeShape = new EdgeShape(this.getVertex(childIndex), this.getVertex(childIndex + 1));\n  return edgeShape.rayCast(output, input, xf, 0);\n}\n\nChainShape.prototype.computeAABB = function(aabb, xf, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n\n  var v1 = Transform.mulVec2(xf, this.getVertex(childIndex));\n  var v2 = Transform.mulVec2(xf, this.getVertex(childIndex + 1));\n\n  aabb.combinePoints(v1, v2);\n}\n\n/**\n * Chains have zero mass.\n */\nChainShape.prototype.computeMass = function(massData, density) {\n  massData.mass = 0.0;\n  massData.center = Vec2.neo();\n  massData.I = 0.0;\n}\n\nChainShape.prototype.computeDistanceProxy = function(proxy, childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_count);\n  proxy.m_buffer[0] = this.getVertex(childIndex);\n  proxy.m_buffer[1] = this.getVertex(childIndex + 1);\n  proxy.m_vertices = proxy.m_buffer;\n  proxy.m_count = 2;\n  proxy.m_radius = this.m_radius;\n};","var Class = require('./core');\nrequire('./pin');\nvar stats = require('./util/stats');\n\nClass.prototype._textures = null;\nClass.prototype._alpha = 1;\n\nClass.prototype.render = function(context) {\n  if (!this._visible) {\n    return;\n  }\n  stats.node++;\n\n  var m = this.matrix();\n  context.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n\n  // move this elsewhere!\n  this._alpha = this._pin._alpha * (this._parent ? this._parent._alpha : 1);\n  var alpha = this._pin._textureAlpha * this._alpha;\n\n  if (context.globalAlpha != alpha) {\n    context.globalAlpha = alpha;\n  }\n\n  if (this._textures !== null) {\n    for (var i = 0, n = this._textures.length; i < n; i++) {\n      this._textures[i].draw(context);\n    }\n  }\n\n  if (context.globalAlpha != this._alpha) {\n    context.globalAlpha = this._alpha;\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child.render(context);\n  }\n};\n\nClass.prototype._tickBefore = null;\nClass.prototype._tickAfter = null;\nClass.prototype.MAX_ELAPSE = Infinity;\n\nClass.prototype._tick = function(elapsed, now, last) {\n  if (!this._visible) {\n    return;\n  }\n\n  if (elapsed > this.MAX_ELAPSE) {\n    elapsed = this.MAX_ELAPSE;\n  }\n\n  var ticked = false;\n\n  if (this._tickBefore !== null) {\n    for (var i = 0; i < this._tickBefore.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickBefore[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    if (child._flag('_tick')) {\n      ticked = child._tick(elapsed, now, last) === true ? true : ticked;\n    }\n  }\n\n  if (this._tickAfter !== null) {\n    for (var i = 0; i < this._tickAfter.length; i++) {\n      stats.tick++;\n      var tickFn = this._tickAfter[i];\n      ticked = tickFn.call(this, elapsed, now, last) === true || ticked;\n    }\n  }\n\n  return ticked;\n};\n\nClass.prototype.tick = function(ticker, before) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  if (before) {\n    if (this._tickBefore === null) {\n      this._tickBefore = [];\n    }\n    this._tickBefore.push(ticker);\n  } else {\n    if (this._tickAfter === null) {\n      this._tickAfter = [];\n    }\n    this._tickAfter.push(ticker);\n  }\n  this._flag('_tick', this._tickAfter !== null && this._tickAfter.length > 0\n      || this._tickBefore !== null && this._tickBefore.length > 0);\n};\n\nClass.prototype.untick = function(ticker) {\n  if (typeof ticker !== 'function') {\n    return;\n  }\n  var i;\n  if (this._tickBefore !== null && (i = this._tickBefore.indexOf(ticker)) >= 0) {\n    this._tickBefore.splice(i, 1);\n  }\n  if (this._tickAfter !== null && (i = this._tickAfter.indexOf(ticker)) >= 0) {\n    this._tickAfter.splice(i, 1);\n  }\n};\n\nClass.prototype.timeout = function(fn, time) {\n  this.setTimeout(fn, time);\n};\n\nClass.prototype.setTimeout = function(fn, time) {\n  function timer(t) {\n    if ((time -= t) < 0) {\n      this.untick(timer);\n      fn.call(this);\n    } else {\n      return true;\n    }\n  }\n  this.tick(timer);\n  return timer;\n};\n\nClass.prototype.clearTimeout = function(timer) {\n  this.untick(timer);\n};\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Pool = require('../util/Pool');\nvar Vec2 = require('../common/Vec2');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\n\nmodule.exports = DynamicTree;\n\n/**\n * A node in the dynamic tree. The client does not interact with this directly.\n * \n * @prop {AABB} aabb Enlarged AABB\n * @prop {integer} height 0: leaf, -1: free node\n */\nfunction TreeNode(id) {\n  this.id = id;\n  this.aabb = new AABB();\n  this.userData = null;\n  this.parent = null;\n  this.child1 = null;\n  this.child2 = null;\n  this.height = -1;\n\n  this.toString = function() {\n    return this.id + \": \" + this.userData;\n  }\n};\n\nTreeNode.prototype.isLeaf = function() {\n  return this.child1 == null;\n}\n/**\n * A dynamic AABB tree broad-phase, inspired by Nathanael Presson's btDbvt. A\n * dynamic tree arranges data in a binary tree to accelerate queries such as\n * volume queries and ray casts. Leafs are proxies with an AABB. In the tree we\n * expand the proxy AABB by `aabbExtension` so that the proxy AABB is bigger\n * than the client object. This allows the client object to move by small\n * amounts without triggering a tree update.\n * \n * Nodes are pooled and relocatable, so we use node indices rather than\n * pointers.\n */\nfunction DynamicTree() {\n  this.m_root = null;\n  this.m_nodes = {}\n  this.m_lastProxyId = 0;\n\n  this.m_pool = new Pool({\n    create : function() {\n      return new TreeNode();\n    }\n  });\n};\n\n/**\n * Get proxy user data.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getUserData = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.userData;\n}\n\n/**\n * Get the fat AABB for a node id.\n * \n * @return the proxy user data or 0 if the id is invalid.\n */\nDynamicTree.prototype.getFatAABB = function(id) {\n  var node = this.m_nodes[id];\n  _ASSERT && common.assert(!!node);\n  return node.aabb;\n}\n\nDynamicTree.prototype.allocateNode = function() {\n  var node = this.m_pool.allocate();\n  node.id = ++this.m_lastProxyId;\n  node.userData = null;\n  node.parent = null;\n  node.child1 = null;\n  node.child2 = null;\n  node.height = -1;\n  this.m_nodes[node.id] = node;\n  return node;\n}\n\nDynamicTree.prototype.freeNode = function(node) {\n  this.m_pool.release(node);\n  node.height = -1;\n  delete this.m_nodes[node.id];\n}\n\n/**\n * Create a proxy in the tree as a leaf node. We return the index of the node\n * instead of a pointer so that we can grow the node pool.\n * \n * Create a proxy. Provide a tight fitting AABB and a userData pointer.\n */\nDynamicTree.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb))\n\n  var node = this.allocateNode()\n\n  node.aabb.set(aabb);\n\n  // Fatten the aabb.\n  AABB.extend(node.aabb, Settings.aabbExtension);\n\n  node.userData = userData;\n  node.height = 0;\n\n  this.insertLeaf(node);\n\n  return node.id;\n}\n\n/**\n * Destroy a proxy. This asserts if the id is invalid.\n */\nDynamicTree.prototype.destroyProxy = function(id) {\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  this.removeLeaf(node);\n  this.freeNode(node);\n}\n\n/**\n * Move a proxy with a swepted AABB. If the proxy has moved outside of its\n * fattened AABB, then the proxy is removed from the tree and re-inserted.\n * Otherwise the function returns immediately.\n * \n * @param id\n * @param aabb\n * @param {Vec2} d Displacement\n * \n * @return true if the proxy was re-inserted.\n */\nDynamicTree.prototype.moveProxy = function(id, aabb, d) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  _ASSERT && common.assert(!d || Vec2.isValid(d));\n\n  var node = this.m_nodes[id];\n\n  _ASSERT && common.assert(!!node);\n  _ASSERT && common.assert(node.isLeaf());\n\n  if (node.aabb.contains(aabb)) {\n    return false;\n  }\n\n  this.removeLeaf(node);\n\n  node.aabb.set(aabb)\n\n  // Extend AABB.\n  aabb = node.aabb;\n  AABB.extend(aabb, Settings.aabbExtension);\n\n  // Predict AABB displacement.\n  // var d = Vec2.mul(Settings.aabbMultiplier, displacement);\n\n  if (d.x < 0.0) {\n    aabb.lowerBound.x += d.x * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.x += d.x * Settings.aabbMultiplier;\n  }\n\n  if (d.y < 0.0) {\n    aabb.lowerBound.y += d.y * Settings.aabbMultiplier;\n  } else {\n    aabb.upperBound.y += d.y * Settings.aabbMultiplier;\n  }\n\n  this.insertLeaf(node);\n\n  return true;\n}\n\nDynamicTree.prototype.insertLeaf = function(leaf) {\n  _ASSERT && common.assert(AABB.isValid(leaf.aabb));\n\n  if (this.m_root == null) {\n    this.m_root = leaf;\n    this.m_root.parent = null;\n    return;\n  }\n\n  // Find the best sibling for this node\n  var leafAABB = leaf.aabb;\n  var index = this.m_root;\n  while (index.isLeaf() == false) {\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    var area = index.aabb.getPerimeter();\n\n    var combinedAABB = new AABB();\n    combinedAABB.combine(index.aabb, leafAABB);\n    var combinedArea = combinedAABB.getPerimeter();\n\n    // Cost of creating a new parent for this node and the new leaf\n    var cost = 2.0 * combinedArea;\n\n    // Minimum cost of pushing the leaf further down the tree\n    var inheritanceCost = 2.0 * (combinedArea - area);\n\n    // Cost of descending into child1\n    var cost1;\n    if (child1.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      cost1 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child1.aabb);\n      var oldArea = child1.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost1 = (newArea - oldArea) + inheritanceCost;\n    }\n\n    // Cost of descending into child2\n    var cost2;\n    if (child2.isLeaf()) {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      cost2 = aabb.getPerimeter() + inheritanceCost;\n    } else {\n      var aabb = new AABB();\n      aabb.combine(leafAABB, child2.aabb);\n      var oldArea = child2.aabb.getPerimeter();\n      var newArea = aabb.getPerimeter();\n      cost2 = newArea - oldArea + inheritanceCost;\n    }\n\n    // Descend according to the minimum cost.\n    if (cost < cost1 && cost < cost2) {\n      break;\n    }\n\n    // Descend\n    if (cost1 < cost2) {\n      index = child1;\n    } else {\n      index = child2;\n    }\n  }\n\n  var sibling = index;\n\n  // Create a new parent.\n  var oldParent = sibling.parent;\n  var newParent = this.allocateNode();\n  newParent.parent = oldParent;\n  newParent.userData = null;\n  newParent.aabb.combine(leafAABB, sibling.aabb);\n  newParent.height = sibling.height + 1;\n\n  if (oldParent != null) {\n    // The sibling was not the root.\n    if (oldParent.child1 == sibling) {\n      oldParent.child1 = newParent;\n    } else {\n      oldParent.child2 = newParent;\n    }\n\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n  } else {\n    // The sibling was the root.\n    newParent.child1 = sibling;\n    newParent.child2 = leaf;\n    sibling.parent = newParent;\n    leaf.parent = newParent;\n    this.m_root = newParent;\n  }\n\n  // Walk back up the tree fixing heights and AABBs\n  index = leaf.parent;\n  while (index != null) {\n    index = this.balance(index);\n\n    var child1 = index.child1;\n    var child2 = index.child2;\n\n    _ASSERT && common.assert(child1 != null);\n    _ASSERT && common.assert(child2 != null);\n\n    index.height = 1 + Math.max(child1.height, child2.height);\n    index.aabb.combine(child1.aabb, child2.aabb);\n\n    index = index.parent;\n  }\n\n  // validate();\n}\n\nDynamicTree.prototype.removeLeaf = function(leaf) {\n  if (leaf == this.m_root) {\n    this.m_root = null;\n    return;\n  }\n\n  var parent = leaf.parent;\n  var grandParent = parent.parent;\n  var sibling;\n  if (parent.child1 == leaf) {\n    sibling = parent.child2;\n  } else {\n    sibling = parent.child1;\n  }\n\n  if (grandParent != null) {\n    // Destroy parent and connect sibling to grandParent.\n    if (grandParent.child1 == parent) {\n      grandParent.child1 = sibling;\n    } else {\n      grandParent.child2 = sibling;\n    }\n    sibling.parent = grandParent;\n    this.freeNode(parent);\n\n    // Adjust ancestor bounds.\n    var index = grandParent;\n    while (index != null) {\n      index = this.balance(index);\n\n      var child1 = index.child1;\n      var child2 = index.child2;\n\n      index.aabb.combine(child1.aabb, child2.aabb);\n      index.height = 1 + Math.max(child1.height, child2.height);\n\n      index = index.parent;\n    }\n  } else {\n    this.m_root = sibling;\n    sibling.parent = null;\n    this.freeNode(parent);\n  }\n\n  // validate();\n}\n\n/**\n * Perform a left or right rotation if node A is imbalanced. Returns the new\n * root index.\n */\nDynamicTree.prototype.balance = function(iA) {\n  _ASSERT && common.assert(iA != null);\n\n  var A = iA;\n  if (A.isLeaf() || A.height < 2) {\n    return iA;\n  }\n\n  var B = A.child1;\n  var C = A.child2;\n\n  var balance = C.height - B.height;\n\n  // Rotate C up\n  if (balance > 1) {\n    var F = C.child1;\n    var G = C.child2;\n\n    // Swap A and C\n    C.child1 = A;\n    C.parent = A.parent;\n    A.parent = C;\n\n    // A's old parent should point to C\n    if (C.parent != null) {\n      if (C.parent.child1 == iA) {\n        C.parent.child1 = C;\n      } else {\n        C.parent.child2 = C;\n      }\n    } else {\n      this.m_root = C;\n    }\n\n    // Rotate\n    if (F.height > G.height) {\n      C.child2 = F;\n      A.child2 = G;\n      G.parent = A;\n      A.aabb.combine(B.aabb, G.aabb);\n      C.aabb.combine(A.aabb, F.aabb);\n\n      A.height = 1 + Math.max(B.height, G.height);\n      C.height = 1 + Math.max(A.height, F.height);\n    } else {\n      C.child2 = G;\n      A.child2 = F;\n      F.parent = A;\n      A.aabb.combine(B.aabb, F.aabb);\n      C.aabb.combine(A.aabb, G.aabb);\n\n      A.height = 1 + Math.max(B.height, F.height);\n      C.height = 1 + Math.max(A.height, G.height);\n    }\n\n    return C;\n  }\n\n  // Rotate B up\n  if (balance < -1) {\n    var D = B.child1;\n    var E = B.child2;\n\n    // Swap A and B\n    B.child1 = A;\n    B.parent = A.parent;\n    A.parent = B;\n\n    // A's old parent should point to B\n    if (B.parent != null) {\n      if (B.parent.child1 == A) {\n        B.parent.child1 = B;\n      } else {\n        B.parent.child2 = B;\n      }\n    } else {\n      this.m_root = B;\n    }\n\n    // Rotate\n    if (D.height > E.height) {\n      B.child2 = D;\n      A.child1 = E;\n      E.parent = A;\n      A.aabb.combine(C.aabb, E.aabb);\n      B.aabb.combine(A.aabb, D.aabb);\n\n      A.height = 1 + Math.max(C.height, E.height);\n      B.height = 1 + Math.max(A.height, D.height);\n    } else {\n      B.child2 = E;\n      A.child1 = D;\n      D.parent = A;\n      A.aabb.combine(C.aabb, D.aabb);\n      B.aabb.combine(A.aabb, E.aabb);\n\n      A.height = 1 + Math.max(C.height, D.height);\n      B.height = 1 + Math.max(A.height, E.height);\n    }\n\n    return B;\n  }\n\n  return A;\n}\n\n/**\n * Compute the height of the binary tree in O(N) time. Should not be called\n * often.\n */\nDynamicTree.prototype.getHeight = function() {\n  if (this.m_root == null) {\n    return 0;\n  }\n\n  return this.m_root.height;\n}\n\n/**\n * Get the ratio of the sum of the node areas to the root area.\n */\nDynamicTree.prototype.getAreaRatio = function() {\n  if (this.m_root == null) {\n    return 0.0;\n  }\n\n  var root = this.m_root;\n  var rootArea = root.aabb.getPerimeter();\n\n  var totalArea = 0.0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // Free node in pool\n      continue;\n    }\n\n    totalArea += node.aabb.getPerimeter();\n  }\n\n  iteratorPool.release(it);\n\n  return totalArea / rootArea;\n}\n\n/**\n * Compute the height of a sub-tree.\n */\nDynamicTree.prototype.computeHeight = function(id) {\n  var node;\n  if (typeof id !== 'undefined') {\n    node = this.m_nodes[id];\n  } else {\n    node = this.m_root;\n  }\n\n  // _ASSERT && common.assert(0 <= id && id < this.m_nodeCapacity);\n\n  if (node.isLeaf()) {\n    return 0;\n  }\n\n  var height1 = ComputeHeight(node.child1);\n  var height2 = ComputeHeight(node.child2);\n  return 1 + Math.max(height1, height2);\n}\n\nDynamicTree.prototype.validateStructure = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  if (node == this.m_root) {\n    _ASSERT && common.assert(node.parent == null);\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  _ASSERT && common.assert(child1.parent == node);\n  _ASSERT && common.assert(child2.parent == node);\n\n  this.validateStructure(child1);\n  this.validateStructure(child2);\n}\n\nDynamicTree.prototype.validateMetrics = function(node) {\n  if (node == null) {\n    return;\n  }\n\n  var child1 = node.child1;\n  var child2 = node.child2;\n\n  if (node.isLeaf()) {\n    _ASSERT && common.assert(child1 == null);\n    _ASSERT && common.assert(child2 == null);\n    _ASSERT && common.assert(node.height == 0);\n    return;\n  }\n\n  // _ASSERT && common.assert(0 <= child1 && child1 < this.m_nodeCapacity);\n  // _ASSERT && common.assert(0 <= child2 && child2 < this.m_nodeCapacity);\n\n  var height1 = this.m_nodes[child1].height;\n  var height2 = this.m_nodes[child2].height;\n  var height = 1 + Math.max(height1, height2);\n  _ASSERT && common.assert(node.height == height);\n\n  var aabb = new AABB();\n  aabb.combine(child1.aabb, child2.aabb);\n\n  _ASSERT && common.assert(AABB.areEqual(aabb, node.aabb));\n\n  this.validateMetrics(child1);\n  this.validateMetrics(child2);\n}\n\n// Validate this tree. For testing.\nDynamicTree.prototype.validate = function() {\n  ValidateStructure(this.m_root);\n  ValidateMetrics(this.m_root);\n\n  _ASSERT && common.assert(this.getHeight() == this.computeHeight());\n}\n\n/**\n * Get the maximum balance of an node in the tree. The balance is the difference\n * in height of the two children of a node.\n */\nDynamicTree.prototype.getMaxBalance = function() {\n  var maxBalance = 0;\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height <= 1) {\n      continue;\n    }\n\n    _ASSERT && common.assert(node.isLeaf() == false);\n\n    var balance = Math.abs(node.child2.height - node.child1.height);\n    maxBalance = Math.max(maxBalance, balance);\n  }\n  iteratorPool.release(it);\n\n  return maxBalance;\n}\n\n/**\n * Build an optimal tree. Very expensive. For testing.\n */\nDynamicTree.prototype.rebuildBottomUp = function() {\n  var nodes = [];\n  var count = 0;\n\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    if (node.height < 0) {\n      // free node in pool\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      node.parent = null;\n      nodes[count] = node;\n      ++count;\n    } else {\n      this.freeNode(node);\n    }\n  }\n  iteratorPool.release(it);\n\n  while (count > 1) {\n    var minCost = Infinity;\n    var iMin = -1, jMin = -1;\n    for (var i = 0; i < count; ++i) {\n      var aabbi = nodes[i].aabb;\n      for (var j = i + 1; j < count; ++j) {\n        var aabbj = nodes[j].aabb;\n        var b = new AABB();\n        b.combine(aabbi, aabbj);\n        var cost = b.getPerimeter();\n        if (cost < minCost) {\n          iMin = i;\n          jMin = j;\n          minCost = cost;\n        }\n      }\n    }\n\n    var child1 = nodes[iMin];\n    var child2 = nodes[jMin];\n\n    var parent = this.allocateNode();\n    parent.child1 = child1;\n    parent.child2 = child2;\n    parent.height = 1 + Math.max(child1.height, child2.height);\n    parent.aabb.combine(child1.aabb, child2.aabb);\n    parent.parent = null;\n\n    child1.parent = parent;\n    child2.parent = parent;\n\n    nodes[jMin] = nodes[count - 1];\n    nodes[iMin] = parent;\n    --count;\n  }\n\n  this.m_root = nodes[0];\n\n  this.validate();\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nDynamicTree.prototype.shiftOrigin = function(newOrigin) {\n  // Build array of leaves. Free the rest.\n  var node, it = iteratorPool.allocate().preorder();\n  while (node = it.next()) {\n    var aabb = node.aabb;\n    aabb.lowerBound.x -= newOrigin.x;\n    aabb.lowerBound.y -= newOrigin.y;\n    aabb.upperBound.x -= newOrigin.x;\n    aabb.upperBound.y -= newOrigin.y;\n  }\n  iteratorPool.release(it);\n}\n\n/**\n * @function {DynamicTree~queryCallback}\n * \n * @param id Node id.\n */\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n * \n * @param {DynamicTree~queryCallback} queryCallback\n */\nDynamicTree.prototype.query = function(aabb, queryCallback) {\n  _ASSERT && common.assert(typeof queryCallback === 'function')\n  var stack = stackPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, aabb)) {\n      if (node.isLeaf()) {\n        var proceed = queryCallback(node.id);\n        if (proceed == false) {\n          return;\n        }\n      } else {\n        stack.push(node.child1);\n        stack.push(node.child2);\n      }\n    }\n  }\n\n  stackPool.release(stack);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nDynamicTree.prototype.rayCast = function(input, rayCastCallback) { // TODO GC\n  _ASSERT && common.assert(typeof rayCastCallback === 'function')\n  var p1 = input.p1;\n  var p2 = input.p2;\n  var r = Vec2.sub(p2, p1);\n  _ASSERT && common.assert(r.lengthSquared() > 0.0);\n  r.normalize();\n\n  // v is perpendicular to the segment.\n  var v = Vec2.cross(1.0, r);\n  var abs_v = Vec2.abs(v);\n\n  // Separating axis for segment (Gino, p80).\n  // |dot(v, p1 - c)| > dot(|v|, h)\n\n  var maxFraction = input.maxFraction;\n\n  // Build a bounding box for the segment.\n  var segmentAABB = new AABB();\n  var t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n  segmentAABB.combinePoints(p1, t);\n\n  var stack = stackPool.allocate();\n  var subInput = inputPool.allocate();\n\n  stack.push(this.m_root);\n  while (stack.length > 0) {\n    var node = stack.pop();\n    if (node == null) {\n      continue;\n    }\n\n    if (AABB.testOverlap(node.aabb, segmentAABB) == false) {\n      continue;\n    }\n\n    // Separating axis for segment (Gino, p80).\n    // |dot(v, p1 - c)| > dot(|v|, h)\n    var c = node.aabb.getCenter();\n    var h = node.aabb.getExtents();\n    var separation = Math.abs(Vec2.dot(v, Vec2.sub(p1, c)))\n        - Vec2.dot(abs_v, h);\n    if (separation > 0.0) {\n      continue;\n    }\n\n    if (node.isLeaf()) {\n      subInput.p1 = Vec2.clone(input.p1);\n      subInput.p2 = Vec2.clone(input.p2);\n      subInput.maxFraction = maxFraction;\n\n      var value = rayCastCallback(subInput, node.id);\n\n      if (value == 0.0) {\n        // The client has terminated the ray cast.\n        return;\n      }\n\n      if (value > 0.0) {\n        // update segment bounding box.\n        maxFraction = value;\n        t = Vec2.combine((1 - maxFraction), p1, maxFraction, p2);\n        segmentAABB.combinePoints(p1, t);\n      }\n    } else {\n      stack.push(node.child1);\n      stack.push(node.child2);\n    }\n  }\n\n  stackPool.release(stack);\n  inputPool.release(subInput);\n}\n\nvar inputPool = new Pool({\n  create : function() {\n    return {};\n  },\n  release : function(stack) {\n  }\n});\n\nvar stackPool = new Pool({\n  create : function() {\n    return [];\n  },\n  release : function(stack) {\n    stack.length = 0;\n  }\n});\n\nvar iteratorPool = new Pool({\n  create : function() {\n    return new Iterator();\n  },\n  release : function(iterator) {\n    iterator.close();\n  }\n});\n\nfunction Iterator() {\n  var parents = [];\n  var states = [];\n  return {\n    preorder : function(root) {\n      parents.length = 0;\n      parents.push(root);\n      states.length = 0;\n      states.push(0);\n      return this;\n    },\n    next : function() {\n      while (parents.length > 0) {\n        var i = parents.length - 1;\n        var node = parents[i];\n        if (states[i] === 0) {\n          states[i] = 1;\n          return node;\n        }\n        if (states[i] === 1) {\n          states[i] = 2;\n          if (node.child1) {\n            parents.push(node.child1);\n            states.push(1);\n            return node.child1;\n          }\n        }\n        if (states[i] === 2) {\n          states[i] = 3;\n          if (node.child2) {\n            parents.push(node.child2);\n            states.push(1);\n            return node.child2;\n          }\n        }\n        parents.pop();\n        states.pop();\n      }\n    },\n    close : function() {\n      parents.length = 0;\n    }\n  };\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Fixture;\n\nvar common = require('./util/common');\nvar options = require('./util/options');\n\nvar Math = require('./common/Math');\nvar Vec2 = require('./common/Vec2');\n\nvar AABB = require('./collision/AABB');\n\nvar Shape = require('./Shape');\n\n/**\n * @typedef {Object} FixtureDef\n *\n * A fixture definition is used to create a fixture. This class defines an\n * abstract fixture definition. You can reuse fixture definitions safely.\n * \n * @prop friction The friction coefficient, usually in the range [0,1]\n * @prop restitution The restitution (elasticity) usually in the range [0,1]\n * @prop density The density, usually in kg/m^2\n * @prop isSensor A sensor shape collects contact information but never\n *       generates a collision response\n * @prop userData\n * @prop filterGroupIndex Zero, positive or negative collision group. Fixtures with same positive groupIndex always collide and fixtures with same\n * negative groupIndex never collide.\n * @prop filterCategoryBits Collision category bit or bits that this fixture belongs\n *       to. If groupIndex is zero or not matching, then at least one bit in this fixture\n * categoryBits should match other fixture maskBits and vice versa.\n * @prop filterMaskBits Collision category bit or bits that this fixture accept for\n *       collision.\n */\nvar FixtureDef = {\n  userData : null,\n  friction : 0.2,\n  restitution : 0.0,\n  density : 0.0,\n  isSensor : false,\n\n  filterGroupIndex : 0,\n  filterCategoryBits : 0x0001,\n  filterMaskBits : 0xFFFF\n};\n\n/**\n * This proxy is used internally to connect shape children to the broad-phase.\n */\nfunction FixtureProxy(fixture, childIndex) {\n  this.aabb = new AABB();\n  this.fixture = fixture;\n  this.childIndex = childIndex;\n  this.proxyId;\n};\n\n/**\n * A fixture is used to attach a shape to a body for collision detection. A\n * fixture inherits its transform from its parent. Fixtures hold additional\n * non-geometric data such as friction, collision filters, etc. Fixtures are\n * created via Body.createFixture.\n * \n * @param {Body} body\n * @param {Shape|FixtureDef} shape Shape of fixture definition.\n * @param {FixtureDef|number} def Fixture definition or number.\n */\nfunction Fixture(body, shape, def) {\n  if (shape.shape) {\n    def = shape;\n    shape = shape.shape;\n\n  } else if (typeof def === 'number') {\n    def = {density : def};\n  }\n\n  def = options(def, FixtureDef);\n\n  this.m_body = body;\n\n  this.m_friction = def.friction;\n  this.m_restitution = def.restitution;\n  this.m_density = def.density;\n  this.m_isSensor = def.isSensor;\n\n  this.m_filterGroupIndex = def.filterGroupIndex;\n  this.m_filterCategoryBits = def.filterCategoryBits;\n  this.m_filterMaskBits = def.filterMaskBits;\n\n  // TODO validate shape\n  this.m_shape = shape; //.clone();\n\n  this.m_next = null;\n\n  this.m_proxies = [];\n  this.m_proxyCount = 0;\n\n  var childCount = this.m_shape.getChildCount();\n  for (var i = 0; i < childCount; ++i) {\n    this.m_proxies[i] = new FixtureProxy(this, i);\n  }\n\n  this.m_userData = def.userData;\n};\n\nFixture.prototype._serialize = function() {\n  return {\n    friction: this.m_friction,\n    restitution: this.m_restitution,\n    density: this.m_density,\n    isSensor: this.m_isSensor,\n\n    filterGroupIndex: this.m_filterGroupIndex,\n    filterCategoryBits: this.m_filterCategoryBits,\n    filterMaskBits: this.m_filterMaskBits,\n\n    shape: this.m_shape,\n\n    userData: this.m_userData,\n  };\n};\n\nFixture._deserialize = function(body, data) {\n  var shape = Shape._deserialize(data.shape);\n  var fixture = shape && new Fixture(body, shape, data);\n  return fixture;\n};\n\n/**\n * Get the type of the child shape. You can use this to down cast to the\n * concrete shape.\n */\nFixture.prototype.getType = function() {\n  return this.m_shape.getType();\n}\n\n/**\n * Get the child shape. You can modify the child shape, however you should not\n * change the number of vertices because this will crash some collision caching\n * mechanisms. Manipulating the shape may lead to non-physical behavior.\n */\nFixture.prototype.getShape = function() {\n  return this.m_shape;\n}\n/**\n * A sensor shape collects contact information but never generates a collision\n * response.\n */\nFixture.prototype.isSensor = function() {\n  return this.m_isSensor;\n}\n\n/**\n * Set if this fixture is a sensor.\n */\nFixture.prototype.setSensor = function(sensor) {\n  if (sensor != this.m_isSensor) {\n    this.m_body.setAwake(true);\n    this.m_isSensor = sensor;\n  }\n}\n\n/**\n * Get the contact filtering data.\n */\n// Fixture.prototype.getFilterData = function() {\n//   return this.m_filter;\n// }\n\n/**\n * Get the user data that was assigned in the fixture definition. Use this to\n * store your application specific data.\n */\nFixture.prototype.getUserData = function() {\n  return this.m_userData;\n}\n\n/**\n * Set the user data. Use this to store your application specific data.\n */\nFixture.prototype.setUserData = function(data) {\n  this.m_userData = data;\n}\n\n/**\n * Get the parent body of this fixture. This is null if the fixture is not\n * attached.\n */\nFixture.prototype.getBody = function() {\n  return this.m_body;\n}\n\n/**\n * Get the next fixture in the parent body's fixture list.\n */\nFixture.prototype.getNext = function() {\n  return this.m_next;\n}\n\n/**\n * Get the density of this fixture.\n */\nFixture.prototype.getDensity = function() {\n  return this.m_density;\n}\n\n/**\n * Set the density of this fixture. This will _not_ automatically adjust the\n * mass of the body. You must call Body.resetMassData to update the body's mass.\n */\nFixture.prototype.setDensity = function(density) {\n  _ASSERT && common.assert(Math.isFinite(density) && density >= 0.0);\n  this.m_density = density;\n}\n\n/**\n * Get the coefficient of friction, usually in the range [0,1].\n */\nFixture.prototype.getFriction = function() {\n  return this.m_friction;\n}\n\n/**\n * Set the coefficient of friction. This will not change the friction of\n * existing contacts.\n */\nFixture.prototype.setFriction = function(friction) {\n  this.m_friction = friction;\n}\n\n/**\n * Get the coefficient of restitution.\n */\nFixture.prototype.getRestitution = function() {\n  return this.m_restitution;\n}\n\n/**\n * Set the coefficient of restitution. This will not change the restitution of\n * existing contacts.\n */\nFixture.prototype.setRestitution = function(restitution) {\n  this.m_restitution = restitution;\n}\n\n/**\n * Test a point in world coordinates for containment in this fixture.\n */\nFixture.prototype.testPoint = function(p) {\n  return this.m_shape.testPoint(this.m_body.getTransform(), p);\n}\n\n/**\n * Cast a ray against this shape.\n */\nFixture.prototype.rayCast = function(output, input, childIndex) {\n  return this.m_shape.rayCast(output, input, this.m_body.getTransform(), childIndex);\n}\n\n/**\n * Get the mass data for this fixture. The mass data is based on the density and\n * the shape. The rotational inertia is about the shape's origin. This operation\n * may be expensive.\n */\nFixture.prototype.getMassData = function(massData) {\n  this.m_shape.computeMass(massData, this.m_density);\n}\n\n/**\n * Get the fixture's AABB. This AABB may be enlarge and/or stale. If you need a\n * more accurate AABB, compute it using the shape and the body transform.\n */\nFixture.prototype.getAABB = function(childIndex) {\n  _ASSERT && common.assert(0 <= childIndex && childIndex < this.m_proxyCount);\n  return this.m_proxies[childIndex].aabb;\n}\n\n/**\n * These support body activation/deactivation.\n */\nFixture.prototype.createProxies = function(broadPhase, xf) {\n  _ASSERT && common.assert(this.m_proxyCount == 0);\n\n  // Create proxies in the broad-phase.\n  this.m_proxyCount = this.m_shape.getChildCount();\n\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    this.m_shape.computeAABB(proxy.aabb, xf, i);\n    proxy.proxyId = broadPhase.createProxy(proxy.aabb, proxy);\n  }\n}\n\nFixture.prototype.destroyProxies = function(broadPhase) {\n  // Destroy proxies in the broad-phase.\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    broadPhase.destroyProxy(proxy.proxyId);\n    proxy.proxyId = null;\n  }\n\n  this.m_proxyCount = 0;\n}\n\n/**\n * Updates this fixture proxy in broad-phase (with combined AABB of current and\n * next transformation).\n */\nFixture.prototype.synchronize = function(broadPhase, xf1, xf2) {\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    var proxy = this.m_proxies[i];\n    // Compute an AABB that covers the swept shape (may miss some rotation\n    // effect).\n    var aabb1 = new AABB();\n    var aabb2 = new AABB();\n    this.m_shape.computeAABB(aabb1, xf1, proxy.childIndex);\n    this.m_shape.computeAABB(aabb2, xf2, proxy.childIndex);\n\n    proxy.aabb.combine(aabb1, aabb2);\n\n    var displacement = Vec2.sub(xf2.p, xf1.p);\n\n    broadPhase.moveProxy(proxy.proxyId, proxy.aabb, displacement);\n  }\n}\n\n/**\n * Set the contact filtering data. This will not update contacts until the next\n * time step when either parent body is active and awake. This automatically\n * calls refilter.\n */\nFixture.prototype.setFilterData = function(filter) {\n  this.m_filterGroupIndex = filter.groupIndex;\n  this.m_filterCategoryBits = filter.categoryBits;\n  this.m_filterMaskBits = filter.maskBits;\n  this.refilter();\n}\n\nFixture.prototype.getFilterGroupIndex = function() {\n  return this.m_filterGroupIndex;\n}\n\nFixture.prototype.getFilterCategoryBits = function() {\n  return this.m_filterCategoryBits;\n}\n\nFixture.prototype.getFilterMaskBits = function() {\n  return this.m_filterMaskBits;\n}\n\n/**\n * Call this if you want to establish collision that was previously disabled by\n * ContactFilter.\n */\nFixture.prototype.refilter = function() {\n  if (this.m_body == null) {\n    return;\n  }\n\n  // Flag associated contacts for filtering.\n  var edge = this.m_body.getContactList();\n  while (edge) {\n    var contact = edge.contact;\n    var fixtureA = contact.getFixtureA();\n    var fixtureB = contact.getFixtureB();\n    if (fixtureA == this || fixtureB == this) {\n      contact.flagForFiltering();\n    }\n\n    edge = edge.next;\n  }\n\n  var world = this.m_body.getWorld();\n\n  if (world == null) {\n    return;\n  }\n\n  // Touch each proxy so that new pairs may be created\n  var broadPhase = world.m_broadPhase;\n  for (var i = 0; i < this.m_proxyCount; ++i) {\n    broadPhase.touchProxy(this.m_proxies[i].proxyId);\n  }\n}\n\n/**\n * Implement this method to provide collision filtering, if you want finer\n * control over contact creation.\n * \n * Return true if contact calculations should be performed between these two\n * fixtures.\n * \n * Warning: for performance reasons this is only called when the AABBs begin to\n * overlap.\n * \n * @param {Fixture} fixtureA\n * @param {Fixture} fixtureB\n */\nFixture.prototype.shouldCollide = function(that) {\n\n  if (that.m_filterGroupIndex == this.m_filterGroupIndex && that.m_filterGroupIndex != 0) {\n    return that.m_filterGroupIndex > 0;\n  }\n\n  var collide = (that.m_filterMaskBits & this.m_filterCategoryBits) != 0\n      && (that.m_filterCategoryBits & this.m_filterMaskBits) != 0;\n  return collide;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = TimeOfImpact;\nmodule.exports.Input = TOIInput;\nmodule.exports.Output = TOIOutput;\n\nvar Settings = require('../Settings');\n\nvar common = require('../util/common');\nvar Timer = require('../util/Timer');\n\nvar stats = require('../common/stats');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Distance = require('./Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\n/**\n * Input parameters for TimeOfImpact.\n * \n * @prop {DistanceProxy} proxyA\n * @prop {DistanceProxy} proxyB\n * @prop {Sweep} sweepA\n * @prop {Sweep} sweepB\n * @prop tMax defines sweep interval [0, tMax]\n */\nfunction TOIInput() {\n  this.proxyA = new DistanceProxy();\n  this.proxyB = new DistanceProxy();\n  this.sweepA = new Sweep();\n  this.sweepB = new Sweep();\n  this.tMax;\n};\n\n// TOIOutput State\nTOIOutput.e_unknown = 0;\nTOIOutput.e_failed = 1;\nTOIOutput.e_overlapped = 2;\nTOIOutput.e_touching = 3;\nTOIOutput.e_separated = 4;\n\n/**\n * Output parameters for TimeOfImpact.\n * \n * @prop state\n * @prop t\n */\nfunction TOIOutput() {\n  this.state;\n  this.t;\n};\n\nstats.toiTime = 0;\nstats.toiMaxTime = 0;\nstats.toiCalls = 0;\nstats.toiIters = 0;\nstats.toiMaxIters = 0;\nstats.toiRootIters = 0;\nstats.toiMaxRootIters = 0;\n\n/**\n * Compute the upper bound on time before two shapes penetrate. Time is\n * represented as a fraction between [0,tMax]. This uses a swept separating axis\n * and may miss some intermediate, non-tunneling collision. If you change the\n * time interval, you should call this function again.\n * \n * Note: use Distance to compute the contact point and normal at the time of\n * impact.\n * \n * CCD via the local separating axis method. This seeks progression by computing\n * the largest time at which separation is maintained.\n */\nfunction TimeOfImpact(output, input) {\n  var timer = Timer.now();\n\n  ++stats.toiCalls;\n\n  output.state = TOIOutput.e_unknown;\n  output.t = input.tMax;\n\n  var proxyA = input.proxyA; // DistanceProxy\n  var proxyB = input.proxyB; // DistanceProxy\n\n  var sweepA = input.sweepA; // Sweep\n  var sweepB = input.sweepB; // Sweep\n\n  // Large rotations can make the root finder fail, so we normalize the\n  // sweep angles.\n  sweepA.normalize();\n  sweepB.normalize();\n\n  var tMax = input.tMax;\n\n  var totalRadius = proxyA.m_radius + proxyB.m_radius;\n  var target = Math.max(Settings.linearSlop, totalRadius - 3.0 * Settings.linearSlop);\n  var tolerance = 0.25 * Settings.linearSlop;\n  _ASSERT && common.assert(target > tolerance);\n\n  var t1 = 0.0;\n  var k_maxIterations = Settings.maxTOIIterations;\n  var iter = 0;\n\n  // Prepare input for distance query.\n  var cache = new SimplexCache();\n\n  var distanceInput = new DistanceInput();\n  distanceInput.proxyA = input.proxyA;\n  distanceInput.proxyB = input.proxyB;\n  distanceInput.useRadii = false;\n\n  // The outer loop progressively attempts to compute new separating axes.\n  // This loop terminates when an axis is repeated (no progress is made).\n  for (;;) {\n    var xfA = Transform.identity();\n    var xfB = Transform.identity();\n    sweepA.getTransform(xfA, t1);\n    sweepB.getTransform(xfB, t1);\n\n    // Get the distance between shapes. We can also use the results\n    // to get a separating axis.\n    distanceInput.transformA = xfA;\n    distanceInput.transformB = xfB;\n    var distanceOutput = new DistanceOutput();\n    Distance(distanceOutput, cache, distanceInput);\n\n    // If the shapes are overlapped, we give up on continuous collision.\n    if (distanceOutput.distance <= 0.0) {\n      // Failure!\n      output.state = TOIOutput.e_overlapped;\n      output.t = 0.0;\n      break;\n    }\n\n    if (distanceOutput.distance < target + tolerance) {\n      // Victory!\n      output.state = TOIOutput.e_touching;\n      output.t = t1;\n      break;\n    }\n\n    // Initialize the separating axis.\n    var fcn = new SeparationFunction();\n    fcn.initialize(cache, proxyA, sweepA, proxyB, sweepB, t1);\n\n    if (false) {\n      // Dump the curve seen by the root finder\n      var N = 100;\n      var dx = 1.0 / N;\n      var xs = []; // [ N + 1 ];\n      var fs = []; // [ N + 1 ];\n      var x = 0.0;\n      for (var i = 0; i <= N; ++i) {\n        sweepA.getTransform(xfA, x);\n        sweepB.getTransform(xfB, x);\n        var f = fcn.evaluate(xfA, xfB) - target;\n        printf(\"%g %g\\n\", x, f);\n        xs[i] = x;\n        fs[i] = f;\n        x += dx;\n      }\n    }\n\n    // Compute the TOI on the separating axis. We do this by successively\n    // resolving the deepest point. This loop is bounded by the number of\n    // vertices.\n    var done = false;\n    var t2 = tMax;\n    var pushBackIter = 0;\n    for (;;) {\n      // Find the deepest point at t2. Store the witness point indices.\n      var s2 = fcn.findMinSeparation(t2);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Is the final configuration separated?\n      if (s2 > target + tolerance) {\n        // Victory!\n        output.state = TOIOutput.e_separated;\n        output.t = tMax;\n        done = true;\n        break;\n      }\n\n      // Has the separation reached tolerance?\n      if (s2 > target - tolerance) {\n        // Advance the sweeps\n        t1 = t2;\n        break;\n      }\n\n      // Compute the initial separation of the witness points.\n      var s1 = fcn.evaluate(t1);\n      var indexA = fcn.indexA;\n      var indexB = fcn.indexB;\n\n      // Check for initial overlap. This might happen if the root finder\n      // runs out of iterations.\n      if (s1 < target - tolerance) {\n        output.state = TOIOutput.e_failed;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Check for touching\n      if (s1 <= target + tolerance) {\n        // Victory! t1 should hold the TOI (could be 0.0).\n        output.state = TOIOutput.e_touching;\n        output.t = t1;\n        done = true;\n        break;\n      }\n\n      // Compute 1D root of: f(x) - target = 0\n      var rootIterCount = 0;\n      var a1 = t1, a2 = t2;\n      for (;;) {\n        // Use a mix of the secant rule and bisection.\n        var t;\n        if (rootIterCount & 1) {\n          // Secant rule to improve convergence.\n          t = a1 + (target - s1) * (a2 - a1) / (s2 - s1);\n        } else {\n          // Bisection to guarantee progress.\n          t = 0.5 * (a1 + a2);\n        }\n\n        ++rootIterCount;\n        ++stats.toiRootIters;\n\n        var s = fcn.evaluate(t);\n        var indexA = fcn.indexA;\n        var indexB = fcn.indexB;\n\n        if (Math.abs(s - target) < tolerance) {\n          // t2 holds a tentative value for t1\n          t2 = t;\n          break;\n        }\n\n        // Ensure we continue to bracket the root.\n        if (s > target) {\n          a1 = t;\n          s1 = s;\n        } else {\n          a2 = t;\n          s2 = s;\n        }\n\n        if (rootIterCount == 50) {\n          break;\n        }\n      }\n\n      stats.toiMaxRootIters = Math.max(stats.toiMaxRootIters, rootIterCount);\n\n      ++pushBackIter;\n\n      if (pushBackIter == Settings.maxPolygonVertices) {\n        break;\n      }\n    }\n\n    ++iter;\n    ++stats.toiIters;\n\n    if (done) {\n      break;\n    }\n\n    if (iter == k_maxIterations) {\n      // Root finder got stuck. Semi-victory.\n      output.state = TOIOutput.e_failed;\n      output.t = t1;\n      break;\n    }\n  }\n\n  stats.toiMaxIters = Math.max(stats.toiMaxIters, iter);\n\n  var time = Timer.diff(timer);\n  stats.toiMaxTime = Math.max(stats.toiMaxTime, time);\n  stats.toiTime += time;\n}\n\n// SeparationFunction Type\nvar e_points = 1;\nvar e_faceA = 2;\nvar e_faceB = 3;\n\nfunction SeparationFunction() {\n  this.m_proxyA = new DistanceProxy();\n  this.m_proxyB = new DistanceProxy();\n  this.m_sweepA;// Sweep\n  this.m_sweepB;// Sweep\n  this.m_type;\n  this.m_localPoint = Vec2.zero();\n  this.m_axis = Vec2.zero();\n};\n\n// TODO_ERIN might not need to return the separation\n\n/**\n * @param {SimplexCache} cache\n * @param {DistanceProxy} proxyA\n * @param {Sweep} sweepA\n * @param {DistanceProxy} proxyB\n * @param {Sweep} sweepB\n * @param {float} t1\n */\nSeparationFunction.prototype.initialize = function(cache, proxyA, sweepA, proxyB, sweepB, t1) {\n  this.m_proxyA = proxyA;\n  this.m_proxyB = proxyB;\n  var count = cache.count;\n  _ASSERT && common.assert(0 < count && count < 3);\n\n  this.m_sweepA = sweepA;\n  this.m_sweepB = sweepB;\n\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t1);\n  this.m_sweepB.getTransform(xfB, t1);\n\n  if (count == 1) {\n    this.m_type = e_points;\n    var localPointA = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n    this.m_axis.setCombine(1, pointB, -1, pointA);\n    var s = this.m_axis.normalize();\n    return s;\n\n  } else if (cache.indexA[0] == cache.indexA[1]) {\n    // Two points on B and one on A.\n    this.m_type = e_faceB;\n    var localPointB1 = proxyB.getVertex(cache.indexB[0]);\n    var localPointB2 = proxyB.getVertex(cache.indexB[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointB2, localPointB1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointB1, localPointB2);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    var localPointA = proxyA.getVertex(cache.indexA[0]);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var s = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n\n  } else {\n    // Two points on A and one or two points on B.\n    this.m_type = e_faceA;\n    var localPointA1 = this.m_proxyA.getVertex(cache.indexA[0]);\n    var localPointA2 = this.m_proxyA.getVertex(cache.indexA[1]);\n\n    this.m_axis = Vec2.cross(Vec2.sub(localPointA2, localPointA1), 1.0);\n    this.m_axis.normalize();\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n\n    this.m_localPoint = Vec2.mid(localPointA1, localPointA2);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    var localPointB = this.m_proxyB.getVertex(cache.indexB[0]);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var s = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    if (s < 0.0) {\n      this.m_axis = Vec2.neg(this.m_axis);\n      s = -s;\n    }\n    return s;\n  }\n};\n\nSeparationFunction.prototype.compute = function(find, t) {\n  // It was findMinSeparation and evaluate\n  var xfA = Transform.identity();\n  var xfB = Transform.identity();\n  this.m_sweepA.getTransform(xfA, t);\n  this.m_sweepB.getTransform(xfB, t);\n\n  switch (this.m_type) {\n  case e_points: {\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, this.m_axis);\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(this.m_axis));\n\n      this.indexA = this.m_proxyA.getSupport(axisA);\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n\n    var pointA = Transform.mulVec2(xfA, localPointA);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, this.m_axis) - Vec2.dot(pointA, this.m_axis);\n    return sep;\n  }\n\n  case e_faceA: {\n    var normal = Rot.mulVec2(xfA.q, this.m_axis);\n    var pointA = Transform.mulVec2(xfA, this.m_localPoint);\n\n    if (find) {\n      var axisB = Rot.mulTVec2(xfB.q, Vec2.neg(normal));\n\n      this.indexA = -1;\n      this.indexB = this.m_proxyB.getSupport(axisB);\n    }\n\n    var localPointB = this.m_proxyB.getVertex(this.indexB);\n    var pointB = Transform.mulVec2(xfB, localPointB);\n\n    var sep = Vec2.dot(pointB, normal) - Vec2.dot(pointA, normal);\n    return sep;\n  }\n\n  case e_faceB: {\n    var normal = Rot.mulVec2(xfB.q, this.m_axis);\n    var pointB = Transform.mulVec2(xfB, this.m_localPoint);\n\n    if (find) {\n      var axisA = Rot.mulTVec2(xfA.q, Vec2.neg(normal));\n\n      this.indexB = -1;\n      this.indexA = this.m_proxyA.getSupport(axisA);\n    }\n\n    var localPointA = this.m_proxyA.getVertex(this.indexA);\n    var pointA = Transform.mulVec2(xfA, localPointA);\n\n    var sep = Vec2.dot(pointA, normal) - Vec2.dot(pointB, normal);\n    return sep;\n  }\n\n  default:\n    _ASSERT && common.assert(false);\n    if (find) {\n      this.indexA = -1;\n      this.indexB = -1;\n    }\n    return 0.0;\n  }\n};\n\nSeparationFunction.prototype.findMinSeparation = function(t) {\n  return this.compute(true, t);\n};\n\nSeparationFunction.prototype.evaluate = function(t) {\n  return this.compute(false, t);\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RevoluteJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRevoluteJoint.TYPE = 'revolute-joint';\n\nRevoluteJoint._super = Joint;\nRevoluteJoint.prototype = create(RevoluteJoint._super.prototype);\n\n/**\n * @typedef {Object} RevoluteJointDef\n *\n * Revolute joint definition. This requires defining an anchor point where the\n * bodies are joined. The definition uses local anchor points so that the\n * initial configuration can violate the constraint slightly. You also need to\n * specify the initial relative angle for joint limits. This helps when saving\n * and loading a game.\n * \n * The local anchor points are measured from the body's origin rather than the\n * center of mass because: 1. you might not know where the center of mass will\n * be. 2. if you add/remove shapes from a body and recompute the mass, the\n * joints will be broken.\n * \n * @prop {bool} enableLimit A flag to enable joint limits.\n * @prop {bool} enableMotor A flag to enable the joint motor.\n * @prop {float} lowerAngle The lower angle for the joint limit (radians).\n * @prop {float} upperAngle The upper angle for the joint limit (radians).\n * @prop {float} motorSpeed The desired motor speed. Usually in radians per\n *       second.\n * @prop {float} maxMotorTorque The maximum motor torque used to achieve the\n *       desired motor speed. Usually in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\n\nvar DEFAULTS = {\n  lowerAngle : 0.0,\n  upperAngle : 0.0,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  enableLimit : false,\n  enableMotor : false\n};\n\n/**\n * A revolute joint constrains two bodies to share a common point while they are\n * free to rotate about the point. The relative rotation about the shared point\n * is the joint angle. You can limit the relative rotation with a joint limit\n * that specifies a lower and upper angle. You can use a motor to drive the\n * relative rotation about the shared point. A maximum motor torque is provided\n * so that infinite forces are not generated.\n *\n * @param {RevoluteJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RevoluteJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RevoluteJoint)) {\n    return new RevoluteJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RevoluteJoint.TYPE;\n\n  this.m_localAnchorA =  anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB =  anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerAngle = def.lowerAngle;\n  this.m_upperAngle = def.upperAngle;\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  // effective mass for point-to-point constraint.\n  this.m_mass = new Mat33();\n  // effective mass for motor/limit angular constraint.\n  this.m_motorMass; // float\n  this.m_limitState = inactiveLimit;\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Motor constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRevoluteJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Get the reference angle.\n */\nRevoluteJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle in radians.\n */\nRevoluteJoint.prototype.getJointAngle = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_sweep.a - bA.m_sweep.a - this.m_referenceAngle;\n}\n\n/**\n * Get the current joint angle speed in radians per second.\n */\nRevoluteJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n  return bB.m_angularVelocity - bA.m_angularVelocity;\n}\n\n/**\n * Is the joint motor enabled?\n */\nRevoluteJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nRevoluteJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Get the current motor torque given the inverse time step. Unit is N*m.\n */\nRevoluteJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set the motor speed in radians per second.\n */\nRevoluteJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed in radians per second.\n */\nRevoluteJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set the maximum motor torque, usually in N-m.\n */\nRevoluteJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\n/**\n * Is the joint limit enabled?\n */\nRevoluteJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nRevoluteJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit in radians.\n */\nRevoluteJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerAngle;\n}\n\n/**\n * Get the upper joint limit in radians.\n */\nRevoluteJoint.prototype.getUpperLimit = function() {\n  return this.m_upperAngle;\n}\n\n/**\n * Set the joint limits in radians.\n */\nRevoluteJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n\n  if (lower != this.m_lowerAngle || upper != this.m_upperAngle) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_impulse.z = 0.0;\n    this.m_lowerAngle = lower;\n    this.m_upperAngle = upper;\n  }\n}\n\nRevoluteJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRevoluteJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\n/**\n * Get the reaction force given the inverse time step. Unit is N.\n */\nRevoluteJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n}\n\n/**\n * Get the reaction torque due to the joint limit given the inverse time step.\n * Unit is N*m.\n */\nRevoluteJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n}\n\nRevoluteJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  this.m_mass.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y\n      * this.m_rB.y * iB;\n  this.m_mass.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y\n      * this.m_rB.x * iB;\n  this.m_mass.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  this.m_mass.ex.y = this.m_mass.ey.x;\n  this.m_mass.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x\n      * this.m_rB.x * iB;\n  this.m_mass.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  this.m_mass.ex.z = this.m_mass.ez.x;\n  this.m_mass.ey.z = this.m_mass.ez.y;\n  this.m_mass.ez.z = iA + iB;\n\n  this.m_motorMass = iA + iB;\n  if (this.m_motorMass > 0.0) {\n    this.m_motorMass = 1.0 / this.m_motorMass;\n  }\n\n  if (this.m_enableMotor == false || fixedRotation) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (this.m_enableLimit && fixedRotation == false) {\n    var jointAngle = aB - aA - this.m_referenceAngle; // float\n\n    if (Math.abs(this.m_upperAngle - this.m_lowerAngle) < 2.0 * Settings.angularSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointAngle <= this.m_lowerAngle) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atLowerLimit;\n\n    } else if (jointAngle >= this.m_upperAngle) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_impulse.z = 0.0;\n      }\n      this.m_limitState = atUpperLimit;\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_motorImpulse + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_motorImpulse + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var fixedRotation = (iA + iB === 0.0); // bool\n\n  // Solve motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits\n      && fixedRotation == false) {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var impulse = Vec3.neg(this.m_mass.solve33(Cdot)); // Vec3\n\n    if (this.m_limitState == equalLimits) {\n      this.m_impulse.add(impulse);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse < 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var newImpulse = this.m_impulse.z + impulse.z; // float\n\n      if (newImpulse > 0.0) {\n        var rhs = Vec2.combine(-1, Cdot1, this.m_impulse.z, Vec2.neo(this.m_mass.ez.x, this.m_mass.ez.y)); // Vec2\n        var reduced = this.m_mass.solve22(rhs); // Vec2\n        impulse.x = reduced.x;\n        impulse.y = reduced.y;\n        impulse.z = -this.m_impulse.z;\n        this.m_impulse.x += reduced.x;\n        this.m_impulse.y += reduced.y;\n        this.m_impulse.z = 0.0;\n\n      } else {\n        this.m_impulse.add(impulse);\n      }\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n\n  } else {\n    // Solve point-to-point constraint\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    var impulse = this.m_mass.solve22(Vec2.neg(Cdot)); // Vec2\n\n    this.m_impulse.x += impulse.x;\n    this.m_impulse.y += impulse.y;\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRevoluteJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var angularError = 0.0; // float\n  var positionError = 0.0; // float\n\n  var fixedRotation = (this.m_invIA + this.m_invIB == 0.0); // bool\n\n  // Solve angular limit constraint.\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit\n      && fixedRotation == false) {\n    var angle = aB - aA - this.m_referenceAngle; // float\n    var limitImpulse = 0.0; // float\n\n    if (this.m_limitState == equalLimits) {\n      // Prevent large angular corrections\n      var C = Math.clamp(angle - this.m_lowerAngle,\n          -Settings.maxAngularCorrection, Settings.maxAngularCorrection); // float\n      limitImpulse = -this.m_motorMass * C;\n      angularError = Math.abs(C);\n\n    } else if (this.m_limitState == atLowerLimit) {\n      var C = angle - this.m_lowerAngle; // float\n      angularError = -C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C + Settings.angularSlop, -Settings.maxAngularCorrection,\n          0.0);\n      limitImpulse = -this.m_motorMass * C;\n\n    } else if (this.m_limitState == atUpperLimit) {\n      var C = angle - this.m_upperAngle; // float\n      angularError = C;\n\n      // Prevent large angular corrections and allow some slop.\n      C = Math.clamp(C - Settings.angularSlop, 0.0,\n          Settings.maxAngularCorrection);\n      limitImpulse = -this.m_motorMass * C;\n    }\n\n    aA -= this.m_invIA * limitImpulse;\n    aB += this.m_invIB * limitImpulse;\n  }\n\n  // Solve point-to-point constraint.\n  {\n    qA.set(aA);\n    qB.set(aB);\n    var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n    var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n\n    var C = Vec2.zero();\n    C.addCombine(1, cB, 1, rB);\n    C.subCombine(1, cA, 1, rA);\n    positionError = C.length();\n\n    var mA = this.m_invMassA;\n    var mB = this.m_invMassB; // float\n    var iA = this.m_invIA;\n    var iB = this.m_invIB; // float\n\n    var K = new Mat22();\n    K.ex.x = mA + mB + iA * rA.y * rA.y + iB * rB.y * rB.y;\n    K.ex.y = -iA * rA.x * rA.y - iB * rB.x * rB.y;\n    K.ey.x = K.ex.y;\n    K.ey.y = mA + mB + iA * rA.x * rA.x + iB * rB.x * rB.x;\n\n    var impulse = Vec2.neg(K.solve(C)); // Vec2\n\n    cA.subMul(mA, impulse);\n    aA -= iA * Vec2.cross(rA, impulse);\n\n    cB.addMul(mB, impulse);\n    aB += iB * Vec2.cross(rB, impulse);\n  }\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PrismaticJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nPrismaticJoint.TYPE = 'prismatic-joint';\n\nPrismaticJoint._super = Joint;\nPrismaticJoint.prototype = create(PrismaticJoint._super.prototype);\n\n/**\n * @typedef {Object} PrismaticJointDef\n *\n * Prismatic joint definition. This requires defining a line of motion using an\n * axis and an anchor point. The definition uses local anchor points and a local\n * axis so that the initial configuration can violate the constraint slightly.\n * The joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableLimit Enable/disable the joint limit.\n * @prop {float} lowerTranslation The lower translation limit, usually in\n *       meters.\n * @prop {float} upperTranslation The upper translation limit, usually in\n *       meters.\n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorForce The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation unit axis in bodyA.\n * @prop {float} referenceAngle The constrained angle between the bodies:\n *       bodyB_angle - bodyA_angle.\n */\n\nvar DEFAULTS = {\n  enableLimit : false,\n  lowerTranslation : 0.0,\n  upperTranslation : 0.0,\n  enableMotor : false,\n  maxMotorForce : 0.0,\n  motorSpeed : 0.0\n};\n\n/**\n * A prismatic joint. This joint provides one degree of freedom: translation\n * along an axis fixed in bodyA. Relative rotation is prevented. You can use a\n * joint limit to restrict the range of motion and a joint motor to drive the\n * motion or to model joint friction.\n *\n * @param {PrismaticJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PrismaticJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof PrismaticJoint)) {\n    return new PrismaticJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PrismaticJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localXAxisA = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n  this.m_localXAxisA.normalize();\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_impulse = Vec3();\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n\n  this.m_lowerTranslation = def.lowerTranslation;\n  this.m_upperTranslation = def.upperTranslation;\n  this.m_maxMotorForce = def.maxMotorForce;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableLimit = def.enableLimit;\n  this.m_enableMotor = def.enableMotor;\n  this.m_limitState = inactiveLimit;\n\n  this.m_axis = Vec2.zero();\n  this.m_perp = Vec2.zero();\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_axis, this.m_perp; // Vec2\n  this.m_s1, this.m_s2; // float\n  this.m_a1, this.m_a2; // float\n  this.m_K = new Mat33();\n  this.m_motorMass; // float\n\n  // Linear constraint (point-to-line)\n  // d = p2 - p1 = x2 + r2 - x1 - r1\n  // C = dot(perp, d)\n  // Cdot = dot(d, cross(w1, perp)) + dot(perp, v2 + cross(w2, r2) - v1 -\n  // cross(w1, r1))\n  // = -dot(perp, v1) - dot(cross(d + r1, perp), w1) + dot(perp, v2) +\n  // dot(cross(r2, perp), v2)\n  // J = [-perp, -cross(d + r1, perp), perp, cross(r2,perp)]\n  //\n  // Angular constraint\n  // C = a2 - a1 + a_initial\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  //\n  // K = J * invM * JT\n  //\n  // J = [-a -s1 a s2]\n  // [0 -1 0 1]\n  // a = perp\n  // s1 = cross(d + r1, a) = cross(p2 - x1, a)\n  // s2 = cross(r2, a) = cross(p2 - x2, a)\n\n  // Motor/Limit linear constraint\n  // C = dot(ax1, d)\n  // Cdot = = -dot(ax1, v1) - dot(cross(d + r1, ax1), w1) + dot(ax1, v2) +\n  // dot(cross(r2, ax1), v2)\n  // J = [-ax1 -cross(d+r1,ax1) ax1 cross(r2,ax1)]\n\n  // Block Solver\n  // We develop a block solver that includes the joint limit. This makes the\n  // limit stiff (inelastic) even\n  // when the mass has poor distribution (leading to large torques about the\n  // joint anchor points).\n  //\n  // The Jacobian has 3 rows:\n  // J = [-uT -s1 uT s2] // linear\n  // [0 -1 0 1] // angular\n  // [-vT -a1 vT a2] // limit\n  //\n  // u = perp\n  // v = axis\n  // s1 = cross(d + r1, u), s2 = cross(r2, u)\n  // a1 = cross(d + r1, v), a2 = cross(r2, v)\n\n  // M * (v2 - v1) = JT * df\n  // J * v2 = bias\n  //\n  // v2 = v1 + invM * JT * df\n  // J * (v1 + invM * JT * df) = bias\n  // K * df = bias - J * v1 = -Cdot\n  // K = J * invM * JT\n  // Cdot = J * v1 - bias\n  //\n  // Now solve for f2.\n  // df = f2 - f1\n  // K * (f2 - f1) = -Cdot\n  // f2 = invK * (-Cdot) + f1\n  //\n  // Clamp accumulated limit impulse.\n  // lower: f2(3) = max(f2(3), 0)\n  // upper: f2(3) = min(f2(3), 0)\n  //\n  // Solve for correct f2(1:2)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:3) * f1\n  // = -Cdot(1:2) - K(1:2,3) * f2(3) + K(1:2,1:2) * f1(1:2) + K(1:2,3) * f1(3)\n  // K(1:2, 1:2) * f2(1:2) = -Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3)) +\n  // K(1:2,1:2) * f1(1:2)\n  // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n  // f1(1:2)\n  //\n  // Now compute impulse to be applied:\n  // df = f2 - f1\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nPrismaticJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nPrismaticJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the reference angle.\n */\nPrismaticJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nPrismaticJoint.prototype.getJointTranslation = function() {\n  var pA = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var pB = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var d = Vec2.sub(pB, pA);\n  var axis = this.m_bodyA.getWorldVector(this.m_localXAxisA);\n\n  var translation = Vec2.dot(d, axis);\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getJointSpeed = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var rA = Rot.mulVec2(bA.m_xf.q, Vec2.sub(this.m_localAnchorA, bA.m_sweep.localCenter)); // Vec2\n  var rB = Rot.mulVec2(bB.m_xf.q, Vec2.sub(this.m_localAnchorB, bB.m_sweep.localCenter)); // Vec2\n  var p1 = Vec2.add(bA.m_sweep.c, rA); // Vec2\n  var p2 = Vec2.add(bB.m_sweep.c, rB); // Vec2\n  var d = Vec2.sub(p2, p1); // Vec2\n  var axis = Rot.mulVec2(bA.m_xf.q, this.m_localXAxisA); // Vec2\n\n  var vA = bA.m_linearVelocity; // Vec2\n  var vB = bB.m_linearVelocity; // Vec2\n  var wA = bA.m_angularVelocity; // float\n  var wB = bB.m_angularVelocity; // float\n\n  var speed = Vec2.dot(d, Vec2.cross(wA, axis))\n      + Vec2.dot(axis, Vec2.sub(Vec2.addCross(vB, wB, rB), Vec2.addCross(vA, wA, rA))); // float\n  return speed;\n}\n\n/**\n * Is the joint limit enabled?\n */\nPrismaticJoint.prototype.isLimitEnabled = function() {\n  return this.m_enableLimit;\n}\n\n/**\n * Enable/disable the joint limit.\n */\nPrismaticJoint.prototype.enableLimit = function(flag) {\n  if (flag != this.m_enableLimit) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_enableLimit = flag;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Get the lower joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getLowerLimit = function() {\n  return this.m_lowerTranslation;\n}\n\n/**\n * Get the upper joint limit, usually in meters.\n */\nPrismaticJoint.prototype.getUpperLimit = function() {\n  return this.m_upperTranslation;\n}\n\n/**\n * Set the joint limits, usually in meters.\n */\nPrismaticJoint.prototype.setLimits = function(lower, upper) {\n  _ASSERT && common.assert(lower <= upper);\n  if (lower != this.m_lowerTranslation || upper != this.m_upperTranslation) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_lowerTranslation = lower;\n    this.m_upperTranslation = upper;\n    this.m_impulse.z = 0.0;\n  }\n}\n\n/**\n * Is the joint motor enabled?\n */\nPrismaticJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nPrismaticJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Set the maximum motor force, usually in N.\n */\nPrismaticJoint.prototype.setMaxMotorForce = function(force) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorForce = force;\n}\n\n/**\n * Get the motor speed, usually in meters per second.\n */\nPrismaticJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Get the current motor force given the inverse time step, usually in N.\n */\nPrismaticJoint.prototype.getMotorForce = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nPrismaticJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPrismaticJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPrismaticJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse + this.m_impulse.z, this.m_axis).mul(inv_dt);\n}\n\nPrismaticJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.y;\n}\n\nPrismaticJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  // Compute motor Jacobian and effective mass.\n  {\n    this.m_axis = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_a1 = Vec2.cross(Vec2.add(d, rA), this.m_axis);\n    this.m_a2 = Vec2.cross(rB, this.m_axis);\n\n    this.m_motorMass = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2\n        * this.m_a2;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  }\n\n  // Prismatic constraint.\n  {\n    this.m_perp = Rot.mulVec2(qA, this.m_localYAxisA);\n\n    this.m_s1 = Vec2.cross(Vec2.add(d, rA), this.m_perp);\n    this.m_s2 = Vec2.cross(rB, this.m_perp);\n\n    var s1test = Vec2.cross(rA, this.m_perp);\n\n    var k11 = mA + mB + iA * this.m_s1 * this.m_s1 + iB * this.m_s2 * this.m_s2;\n    var k12 = iA * this.m_s1 + iB * this.m_s2;\n    var k13 = iA * this.m_s1 * this.m_a1 + iB * this.m_s2 * this.m_a2;\n    var k22 = iA + iB;\n    if (k22 == 0.0) {\n      // For bodies with fixed rotation.\n      k22 = 1.0;\n    }\n    var k23 = iA * this.m_a1 + iB * this.m_a2;\n    var k33 = mA + mB + iA * this.m_a1 * this.m_a1 + iB * this.m_a2 * this.m_a2;\n\n    this.m_K.ex.set(k11, k12, k13);\n    this.m_K.ey.set(k12, k22, k23);\n    this.m_K.ez.set(k13, k23, k33);\n  }\n\n  // Compute motor and limit terms.\n  if (this.m_enableLimit) {\n\n    var jointTranslation = Vec2.dot(this.m_axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * Settings.linearSlop) {\n      this.m_limitState = equalLimits;\n\n    } else if (jointTranslation <= this.m_lowerTranslation) {\n      if (this.m_limitState != atLowerLimit) {\n        this.m_limitState = atLowerLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else if (jointTranslation >= this.m_upperTranslation) {\n      if (this.m_limitState != atUpperLimit) {\n        this.m_limitState = atUpperLimit;\n        this.m_impulse.z = 0.0;\n      }\n\n    } else {\n      this.m_limitState = inactiveLimit;\n      this.m_impulse.z = 0.0;\n    }\n\n  } else {\n    this.m_limitState = inactiveLimit;\n    this.m_impulse.z = 0.0;\n  }\n\n  if (this.m_enableMotor == false) {\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse.mul(step.dtRatio);\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse.x, this.m_perp, this.m_motorImpulse\n        + this.m_impulse.z, this.m_axis);\n    var LA = this.m_impulse.x * this.m_s1 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a1;\n    var LB = this.m_impulse.x * this.m_s2 + this.m_impulse.y\n        + (this.m_motorImpulse + this.m_impulse.z) * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    this.m_impulse.setZero();\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Solve linear motor constraint.\n  if (this.m_enableMotor && this.m_limitState != equalLimits) {\n    var Cdot = Vec2.dot(this.m_axis, Vec2.sub(vB, vA)) + this.m_a2 * wB\n        - this.m_a1 * wA;\n    var impulse = this.m_motorMass * (this.m_motorSpeed - Cdot);\n    var oldImpulse = this.m_motorImpulse;\n    var maxImpulse = step.dt * this.m_maxMotorForce;\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    var P = Vec2.mul(impulse, this.m_axis);\n    var LA = impulse * this.m_a1;\n    var LB = impulse * this.m_a2;\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  var Cdot1 = Vec2.zero();\n  Cdot1.x += Vec2.dot(this.m_perp, vB) + this.m_s2 * wB;\n  Cdot1.x -= Vec2.dot(this.m_perp, vA) + this.m_s1 * wA;\n  Cdot1.y = wB - wA;\n\n  if (this.m_enableLimit && this.m_limitState != inactiveLimit) {\n    // Solve prismatic and limit constraint in block form.\n    var Cdot2 = 0;\n    Cdot2 += Vec2.dot(this.m_axis, vB) + this.m_a2 * wB;\n    Cdot2 -= Vec2.dot(this.m_axis, vA) + this.m_a1 * wA;\n\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2);\n\n    var f1 = Vec3(this.m_impulse);\n    var df = this.m_K.solve33(Vec3.neg(Cdot)); // Vec3\n    this.m_impulse.add(df);\n\n    if (this.m_limitState == atLowerLimit) {\n      this.m_impulse.z = Math.max(this.m_impulse.z, 0.0);\n    } else if (this.m_limitState == atUpperLimit) {\n      this.m_impulse.z = Math.min(this.m_impulse.z, 0.0);\n    }\n\n    // f2(1:2) = invK(1:2,1:2) * (-Cdot(1:2) - K(1:2,3) * (f2(3) - f1(3))) +\n    // f1(1:2)\n    var b = Vec2.combine(-1, Cdot1, -(this.m_impulse.z - f1.z), Vec2.neo(this.m_K.ez.x, this.m_K.ez.y)); // Vec2\n    var f2r = Vec2.add(this.m_K.solve22(b), Vec2.neo(f1.x, f1.y)); // Vec2\n    this.m_impulse.x = f2r.x;\n    this.m_impulse.y = f2r.y;\n\n    df = Vec3.sub(this.m_impulse, f1);\n\n    var P = Vec2.combine(df.x, this.m_perp, df.z, this.m_axis); // Vec2\n    var LA = df.x * this.m_s1 + df.y + df.z * this.m_a1; // float\n    var LB = df.x * this.m_s2 + df.y + df.z * this.m_a2; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  } else {\n    // Limit is inactive, just solve the prismatic constraint in block form.\n    var df = this.m_K.solve22(Vec2.neg(Cdot1)); // Vec2\n    this.m_impulse.x += df.x;\n    this.m_impulse.y += df.y;\n\n    var P = Vec2.mul(df.x, this.m_perp); // Vec2\n    var LA = df.x * this.m_s1 + df.y; // float\n    var LB = df.x * this.m_s2 + df.y; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPrismaticJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  // Compute fresh Jacobians\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA)); // Vec2\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB)); // Vec2\n  var d = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA)); // Vec2\n\n  var axis = Rot.mulVec2(qA, this.m_localXAxisA); // Vec2\n  var a1 = Vec2.cross(Vec2.add(d, rA), axis); // float\n  var a2 = Vec2.cross(rB, axis); // float\n  var perp = Rot.mulVec2(qA, this.m_localYAxisA); // Vec2\n\n  var s1 = Vec2.cross(Vec2.add(d, rA), perp); // float\n  var s2 = Vec2.cross(rB, perp); // float\n\n  var impulse = Vec3();\n  var C1 = Vec2.zero(); // Vec2\n  C1.x = Vec2.dot(perp, d);\n  C1.y = aB - aA - this.m_referenceAngle;\n\n  var linearError = Math.abs(C1.x); // float\n  var angularError = Math.abs(C1.y); // float\n\n  var linearSlop = Settings.linearSlop;\n  var maxLinearCorrection = Settings.maxLinearCorrection;\n\n  var active = false; // bool\n  var C2 = 0.0; // float\n  if (this.m_enableLimit) {\n\n    var translation = Vec2.dot(axis, d); // float\n    if (Math.abs(this.m_upperTranslation - this.m_lowerTranslation) < 2.0 * linearSlop) {\n      // Prevent large angular corrections\n      C2 = Math.clamp(translation, -maxLinearCorrection, maxLinearCorrection);\n      linearError = Math.max(linearError, Math.abs(translation));\n      active = true;\n\n    } else if (translation <= this.m_lowerTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_lowerTranslation + linearSlop,\n          -maxLinearCorrection, 0.0);\n      linearError = Math\n          .max(linearError, this.m_lowerTranslation - translation);\n      active = true;\n\n    } else if (translation >= this.m_upperTranslation) {\n      // Prevent large linear corrections and allow some slop.\n      C2 = Math.clamp(translation - this.m_upperTranslation - linearSlop, 0.0,\n          maxLinearCorrection);\n      linearError = Math\n          .max(linearError, translation - this.m_upperTranslation);\n      active = true;\n    }\n  }\n\n  if (active) {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k13 = iA * s1 * a1 + iB * s2 * a2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      // For fixed rotation\n      k22 = 1.0;\n    }\n    var k23 = iA * a1 + iB * a2; // float\n    var k33 = mA + mB + iA * a1 * a1 + iB * a2 * a2; // float\n\n    var K = new Mat33()\n    K.ex.set(k11, k12, k13);\n    K.ey.set(k12, k22, k23);\n    K.ez.set(k13, k23, k33);\n\n    var C = Vec3();\n    C.x = C1.x;\n    C.y = C1.y;\n    C.z = C2;\n\n    impulse = K.solve33(Vec3.neg(C));\n  } else {\n    var k11 = mA + mB + iA * s1 * s1 + iB * s2 * s2; // float\n    var k12 = iA * s1 + iB * s2; // float\n    var k22 = iA + iB; // float\n    if (k22 == 0.0) {\n      k22 = 1.0;\n    }\n\n    var K = new Mat22();\n    K.ex.set(k11, k12);\n    K.ey.set(k12, k22);\n\n    var impulse1 = K.solve(Vec2.neg(C1)); // Vec2\n    impulse.x = impulse1.x;\n    impulse.y = impulse1.y;\n    impulse.z = 0.0;\n  }\n\n  var P = Vec2.combine(impulse.x, perp, impulse.z, axis); // Vec2\n  var LA = impulse.x * s1 + impulse.y + impulse.z * a1; // float\n  var LB = impulse.x * s2 + impulse.y + impulse.z * a2; // float\n\n  cA.subMul(mA, P);\n  aA -= iA * LA;\n  cB.addMul(mB, P);\n  aB += iB * LB;\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","module.exports = {};\n","module.exports = function(base) {\n  for (var i = 1; i < arguments.length; i++) {\n    var obj = arguments[i];\n    for ( var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        base[key] = obj[key];\n      }\n    }\n  }\n  return base;\n};\n","/**\n * ! is the definitive JavaScript type testing library\n * \n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\n\nvar NON_HOST_TYPES = {\n  'boolean' : 1,\n  'number' : 1,\n  'string' : 1,\n  'undefined' : 1\n};\n\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\nvar is = module.exports = {};\n\nis.a = is.an = is.type = function(value, type) {\n  return typeof value === type;\n};\n\nis.defined = function(value) {\n  return typeof value !== 'undefined';\n};\n\nis.empty = function(value) {\n  var type = toStr.call(value);\n  var key;\n\n  if ('[object Array]' === type || '[object Arguments]' === type\n      || '[object String]' === type) {\n    return value.length === 0;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\nis.equal = function(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if ('[object Object]' === type) {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Array]' === type) {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (--key) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if ('[object Function]' === type) {\n    return value.prototype === other.prototype;\n  }\n\n  if ('[object Date]' === type) {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\nis.instance = function(value, constructor) {\n  return value instanceof constructor;\n};\n\nis.nil = function(value) {\n  return value === null;\n};\n\nis.undef = function(value) {\n  return typeof value === 'undefined';\n};\n\nis.array = function(value) {\n  return '[object Array]' === toStr.call(value);\n};\n\nis.emptyarray = function(value) {\n  return is.array(value) && value.length === 0;\n};\n\nis.arraylike = function(value) {\n  return !!value && !is.boolean(value) && owns.call(value, 'length')\n      && isFinite(value.length) && is.number(value.length) && value.length >= 0;\n};\n\nis.boolean = function(value) {\n  return '[object Boolean]' === toStr.call(value);\n};\n\nis.element = function(value) {\n  return value !== undefined && typeof HTMLElement !== 'undefined'\n      && value instanceof HTMLElement && value.nodeType === 1;\n};\n\nis.fn = function(value) {\n  return '[object Function]' === toStr.call(value);\n};\n\nis.number = function(value) {\n  return '[object Number]' === toStr.call(value);\n};\n\nis.nan = function(value) {\n  return !is.number(value) || value !== value;\n};\n\nis.object = function(value) {\n  return '[object Object]' === toStr.call(value);\n};\n\nis.hash = function(value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType\n      && !value.setInterval;\n};\n\nis.regexp = function(value) {\n  return '[object RegExp]' === toStr.call(value);\n};\n\nis.string = function(value) {\n  return '[object String]' === toStr.call(value);\n};\n\nis.hex = function(value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n","exports.internal = {};\n\nexports.Serializer = require('./Serializer');\n\nexports.Math = require('./common/Math');\nexports.Vec2 = require('./common/Vec2');\nexports.Vec3 = require('./common/Vec3');\nexports.Mat22 = require('./common/Mat22');\nexports.Mat33 = require('./common/Mat33');\nexports.Transform = require('./common/Transform');\nexports.Rot = require('./common/Rot');\n\nexports.AABB = require('./collision/AABB');\n\nexports.Shape = require('./Shape');\nexports.Fixture = require('./Fixture');\nexports.Body = require('./Body');\nexports.Contact = require('./Contact');\nexports.Joint = require('./Joint');\nexports.World = require('./World');\n\nexports.Circle = require('./shape/CircleShape');\nexports.Edge = require('./shape/EdgeShape');\nexports.Polygon = require('./shape/PolygonShape');\nexports.Chain = require('./shape/ChainShape');\nexports.Box = require('./shape/BoxShape');\n\nrequire('./shape/CollideCircle');\nrequire('./shape/CollideEdgeCircle');\nexports.internal.CollidePolygons = require('./shape/CollidePolygon');\nrequire('./shape/CollideCirclePolygone');\nrequire('./shape/CollideEdgePolygon');\n\nexports.DistanceJoint = require('./joint/DistanceJoint');\nexports.FrictionJoint = require('./joint/FrictionJoint');\nexports.GearJoint = require('./joint/GearJoint');\nexports.MotorJoint = require('./joint/MotorJoint');\nexports.MouseJoint = require('./joint/MouseJoint');\nexports.PrismaticJoint = require('./joint/PrismaticJoint');\nexports.PulleyJoint = require('./joint/PulleyJoint');\nexports.RevoluteJoint = require('./joint/RevoluteJoint');\nexports.RopeJoint = require('./joint/RopeJoint');\nexports.WeldJoint = require('./joint/WeldJoint');\nexports.WheelJoint = require('./joint/WheelJoint');\n\nexports.internal.Sweep= require('./common/Sweep');\nexports.internal.stats = require('./common/stats');\nexports.internal.Manifold = require('./Manifold');\nexports.internal.Distance = require('./collision/Distance');\nexports.internal.TimeOfImpact = require('./collision/TimeOfImpact');\nexports.internal.DynamicTree = require('./collision/DynamicTree');\nexports.internal.Settings = require('./Settings');\n","var World = require('./World');\n\nexports.toJson = function(world) {\n  return JSON.stringify(world._serialize(), function(key, value) {\n    if (typeof value === 'object') {\n      if (value !== null) {\n        if (typeof value._serialize === 'function') {\n          value = value._serialize();\n        }\n      }\n    }\n    return value;\n  }, '  ');\n};\n\nexports.fromJson = function(string) {\n  return World._deserialize(JSON.parse(string));\n};\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar Settings = require('../Settings');\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar AABB = require('./AABB');\nvar DynamicTree = require('./DynamicTree');\n\nmodule.exports = BroadPhase;\n\n/**\n * The broad-phase wraps and extends a dynamic-tree to keep track of moved\n * objects and query them on update.\n */\nfunction BroadPhase() {\n  this.m_tree = new DynamicTree();\n  this.m_proxyCount = 0;\n  this.m_moveBuffer = [];\n  this.queryCallback = this.queryCallback.bind(this);\n};\n\n/**\n * Get user data from a proxy. Returns null if the id is invalid.\n */\nBroadPhase.prototype.getUserData = function(proxyId) {\n  return this.m_tree.getUserData(proxyId);\n}\n\n/**\n * Test overlap of fat AABBs.\n */\nBroadPhase.prototype.testOverlap = function(proxyIdA, proxyIdB) {\n  var aabbA = this.m_tree.getFatAABB(proxyIdA);\n  var aabbB = this.m_tree.getFatAABB(proxyIdB);\n  return AABB.testOverlap(aabbA, aabbB);\n}\n\n/**\n * Get the fat AABB for a proxy.\n */\nBroadPhase.prototype.getFatAABB = function(proxyId) {\n  return this.m_tree.getFatAABB(proxyId);\n}\n\n/**\n * Get the number of proxies.\n */\nBroadPhase.prototype.getProxyCount = function() {\n  return this.m_proxyCount;\n}\n\n/**\n * Get the height of the embedded tree.\n */\nBroadPhase.prototype.getTreeHeight = function() {\n  return this.m_tree.getHeight();\n}\n\n/**\n * Get the balance (integer) of the embedded tree.\n */\nBroadPhase.prototype.getTreeBalance = function() {\n  return this.m_tree.getMaxBalance();\n}\n\n/**\n * Get the quality metric of the embedded tree.\n */\nBroadPhase.prototype.getTreeQuality = function() {\n  return this.m_tree.getAreaRatio();\n}\n\n/**\n * Query an AABB for overlapping proxies. The callback class is called for each\n * proxy that overlaps the supplied AABB.\n */\nBroadPhase.prototype.query = function(aabb, queryCallback) {\n  this.m_tree.query(aabb, queryCallback);\n}\n\n/**\n * Ray-cast against the proxies in the tree. This relies on the callback to\n * perform a exact ray-cast in the case were the proxy contains a shape. The\n * callback also performs the any collision filtering. This has performance\n * roughly equal to k * log(n), where k is the number of collisions and n is the\n * number of proxies in the tree.\n * \n * @param input The ray-cast input data. The ray extends from p1 to p1 +\n *          maxFraction * (p2 - p1).\n * @param rayCastCallback A function that is called for each proxy that is hit by\n *          the ray.\n */\nBroadPhase.prototype.rayCast = function(input, rayCastCallback) {\n  this.m_tree.rayCast(input, rayCastCallback);\n}\n\n/**\n * Shift the world origin. Useful for large worlds. The shift formula is:\n * position -= newOrigin\n * \n * @param newOrigin The new origin with respect to the old origin\n */\nBroadPhase.prototype.shiftOrigin = function(newOrigin) {\n  this.m_tree.shiftOrigin(newOrigin);\n}\n\n/**\n * Create a proxy with an initial AABB. Pairs are not reported until UpdatePairs\n * is called.\n */\nBroadPhase.prototype.createProxy = function(aabb, userData) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var proxyId = this.m_tree.createProxy(aabb, userData);\n  this.m_proxyCount++;\n  this.bufferMove(proxyId);\n  return proxyId;\n}\n\n/**\n * Destroy a proxy. It is up to the client to remove any pairs.\n */\nBroadPhase.prototype.destroyProxy = function(proxyId) {\n  this.unbufferMove(proxyId);\n  this.m_proxyCount--;\n  this.m_tree.destroyProxy(proxyId);\n}\n\n/**\n * Call moveProxy as many times as you like, then when you are done call\n * UpdatePairs to finalized the proxy pairs (for your time step).\n */\nBroadPhase.prototype.moveProxy = function(proxyId, aabb, displacement) {\n  _ASSERT && common.assert(AABB.isValid(aabb));\n  var changed = this.m_tree.moveProxy(proxyId, aabb, displacement);\n  if (changed) {\n    this.bufferMove(proxyId);\n  }\n}\n\n/**\n * Call to trigger a re-processing of it's pairs on the next call to\n * UpdatePairs.\n */\nBroadPhase.prototype.touchProxy = function(proxyId) {\n  this.bufferMove(proxyId);\n}\n\nBroadPhase.prototype.bufferMove = function(proxyId) {\n  this.m_moveBuffer.push(proxyId);\n}\n\nBroadPhase.prototype.unbufferMove = function(proxyId) {\n  for (var i = 0; i < this.m_moveBuffer.length; ++i) {\n    if (this.m_moveBuffer[i] == proxyId) {\n      this.m_moveBuffer[i] = null;\n    }\n  }\n}\n\n/**\n * @function BroadPhase~addPair\n * @param {Object} userDataA\n * @param {Object} userDataB\n */\n\n/**\n * Update the pairs. This results in pair callbacks. This can only add pairs.\n * \n * @param {BroadPhase~AddPair} addPairCallback\n */\nBroadPhase.prototype.updatePairs = function(addPairCallback) {\n  _ASSERT && common.assert(typeof addPairCallback === 'function');\n  this.m_callback = addPairCallback;\n\n  // Perform tree queries for all moving proxies.\n  while (this.m_moveBuffer.length > 0) {\n    this.m_queryProxyId = this.m_moveBuffer.pop();\n    if (this.m_queryProxyId === null) {\n      continue;\n    }\n\n    // We have to query the tree with the fat AABB so that\n    // we don't fail to create a pair that may touch later.\n    var fatAABB = this.m_tree.getFatAABB(this.m_queryProxyId);\n\n    // Query tree, create pairs and add them pair buffer.\n    this.m_tree.query(fatAABB, this.queryCallback);\n  }\n\n  // Try to keep the tree balanced.\n  // this.m_tree.rebalance(4);\n}\n\nBroadPhase.prototype.queryCallback = function(proxyId) {\n  // A proxy cannot form a pair with itself.\n  if (proxyId == this.m_queryProxyId) {\n    return true;\n  }\n\n  var proxyIdA = Math.min(proxyId, this.m_queryProxyId);\n  var proxyIdB = Math.max(proxyId, this.m_queryProxyId);\n\n  // TODO: Skip any duplicate pairs.\n\n  var userDataA = this.m_tree.getUserData(proxyIdA);\n  var userDataB = this.m_tree.getUserData(proxyIdB);\n\n  // Send the pairs back to the client.\n  this.m_callback(userDataA, userDataB);\n\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Pool;\n\nfunction Pool(opts) {\n  var _list = [];\n  var _max = opts.max || Infinity;\n\n  var _createFn = opts.create;\n  var _outFn = opts.allocate;\n  var _inFn = opts.release;\n  var _discardFn = opts.discard;\n\n  var _createCount = 0;\n  var _outCount = 0;\n  var _inCount = 0;\n  var _discardCount = 0;\n\n  this.max = function(n) {\n    if (typeof n === 'number') {\n      _max = n;\n      return this;\n    }\n    return _max;\n  };\n\n  this.size = function() {\n    return _list.length;\n  };\n\n  this.allocate = function() {\n    var item;\n    if (_list.length > 0) {\n      item = _list.shift();\n    } else {\n      _createCount++;\n      if (typeof _createFn === 'function') {\n        item = _createFn();\n      } else {\n        item = {};\n      }\n    }\n    _outCount++;\n    if (typeof _outFn === 'function') {\n      _outFn(item);\n    }\n    return item;\n  };\n\n  this.release = function(item) {\n    if (_list.length < _max) {\n      _inCount++;\n      if (typeof _inFn === 'function') {\n        _inFn(item);\n      }\n      _list.push(item);\n    } else {\n      _discardCount++;\n      if (typeof _discardFn === 'function') {\n        item = _discardFn(item);\n      }\n    }\n  };\n\n  this.toString = function() {\n    return \" +\" + _createCount + \" >\" + _outCount + \" <\" + _inCount + \" -\"\n        + _discardCount + \" =\" + _list.length + \"/\" + _max;\n  };\n}","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = Solver;\nmodule.exports.TimeStep = TimeStep;\n\nvar Settings = require('./Settings');\nvar common = require('./util/common');\n\nvar Vec2 = require('./common/Vec2');\nvar Math = require('./common/Math');\n\nvar Body = require('./Body');\nvar Contact = require('./Contact');\nvar Joint = require('./Joint');\n\nvar TimeOfImpact = require('./collision/TimeOfImpact');\nvar TOIInput = TimeOfImpact.Input;\nvar TOIOutput = TimeOfImpact.Output;\n\nvar Distance = require('./collision/Distance');\nvar DistanceInput = Distance.Input;\nvar DistanceOutput = Distance.Output;\nvar DistanceProxy = Distance.Proxy;\nvar SimplexCache = Distance.Cache;\n\nfunction TimeStep(dt) {\n  this.dt = 0; // time step\n  this.inv_dt = 0; // inverse time step (0 if dt == 0)\n  this.velocityIterations = 0;\n  this.positionIterations = 0;\n  this.warmStarting = false;\n  this.blockSolve = true;\n\n  // timestep ratio for variable timestep\n  this.inv_dt0 = 0.0;\n  this.dtRatio = 1; // dt * inv_dt0\n}\n\nTimeStep.prototype.reset = function(dt) {\n  if (this.dt > 0.0) {\n    this.inv_dt0 = this.inv_dt;\n  }\n  this.dt = dt;\n  this.inv_dt = dt == 0 ? 0 : 1 / dt;\n  this.dtRatio = dt * this.inv_dt0;\n}\n\n/**\n * Finds and solves islands. An island is a connected subset of the world.\n * \n * @param {World} world\n */\nfunction Solver(world) {\n  this.m_world = world;\n  this.m_stack = [];\n  this.m_bodies = [];\n  this.m_contacts = [];\n  this.m_joints = [];\n}\n\nSolver.prototype.clear = function() {\n  this.m_stack.length = 0;\n  this.m_bodies.length = 0;\n  this.m_contacts.length = 0;\n  this.m_joints.length = 0;\n}\n\nSolver.prototype.addBody = function(body) {\n  _ASSERT && common.assert(body instanceof Body, 'Not a Body!', body);\n  this.m_bodies.push(body);\n  // why?\n//  body.c_position.c.setZero();\n//  body.c_position.a = 0;\n//  body.c_velocity.v.setZero();\n//  body.c_velocity.w = 0;\n};\n\nSolver.prototype.addContact = function(contact) {\n  _ASSERT && common.assert(contact instanceof Contact, 'Not a Contact!', contact);\n  this.m_contacts.push(contact);\n};\n\nSolver.prototype.addJoint = function(joint) {\n  _ASSERT && common.assert(joint instanceof Joint, 'Not a Joint!', joint);\n  this.m_joints.push(joint);\n};\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorld = function(step) {\n  var world = this.m_world;\n\n  // Clear all the island flags.\n  for (var b = world.m_bodyList; b; b = b.m_next) {\n    b.m_islandFlag = false;\n  }\n  for (var c = world.m_contactList; c; c = c.m_next) {\n    c.m_islandFlag = false;\n  }\n  for (var j = world.m_jointList; j; j = j.m_next) {\n    j.m_islandFlag = false;\n  }\n\n  // Build and simulate all awake islands.\n  var stack = this.m_stack;\n  var loop = -1;\n  for (var seed = world.m_bodyList; seed; seed = seed.m_next) {\n    loop++;\n    if (seed.m_islandFlag) {\n      continue;\n    }\n\n    if (seed.isAwake() == false || seed.isActive() == false) {\n      continue;\n    }\n\n    // The seed can be dynamic or kinematic.\n    if (seed.isStatic()) {\n      continue;\n    }\n\n    // Reset island and stack.\n    this.clear();\n\n    stack.push(seed);\n\n    seed.m_islandFlag = true;\n\n    // Perform a depth first search (DFS) on the constraint graph.\n    while (stack.length > 0) {\n      // Grab the next body off the stack and add it to the island.\n      var b = stack.pop();\n      _ASSERT && common.assert(b.isActive() == true);\n      this.addBody(b);\n\n      // Make sure the body is awake.\n      b.setAwake(true);\n\n      // To keep islands as small as possible, we don't\n      // propagate islands across static bodies.\n      if (b.isStatic()) {\n        continue;\n      }\n      \n      // Search all contacts connected to this body.\n      for (var ce = b.m_contactList; ce; ce = ce.next) {\n        var contact = ce.contact;\n\n        // Has this contact already been added to an island?\n        if (contact.m_islandFlag) {\n          continue;\n        }\n\n        // Is this contact solid and touching?\n        if (contact.isEnabled() == false || contact.isTouching() == false) {\n          continue;\n        }\n\n        // Skip sensors.\n        var sensorA = contact.m_fixtureA.m_isSensor;\n        var sensorB = contact.m_fixtureB.m_isSensor;\n        if (sensorA || sensorB) {\n          continue;\n        }\n\n        this.addContact(contact);\n        contact.m_islandFlag = true;\n\n        var other = ce.other;\n\n        // Was the other body already added to this island?\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n\n      // Search all joints connect to this body.\n      for (var je = b.m_jointList; je; je = je.next) {\n        if (je.joint.m_islandFlag == true) {\n          continue;\n        }\n\n        var other = je.other;\n\n        // Don't simulate joints connected to inactive bodies.\n        if (other.isActive() == false) {\n          continue;\n        }\n\n        this.addJoint(je.joint);\n        je.joint.m_islandFlag = true;\n\n        if (other.m_islandFlag) {\n          continue;\n        }\n\n        // _ASSERT && common.assert(stack.length < world.m_bodyCount);\n        stack.push(other);\n        other.m_islandFlag = true;\n      }\n    }\n\n    this.solveIsland(step);\n\n    // Post solve cleanup.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      // Allow static bodies to participate in other islands.\n      // TODO: are they added at all?\n      var b = this.m_bodies[i];\n      if (b.isStatic()) {\n        b.m_islandFlag = false;\n      }\n    }\n  }\n}\n\n/**\n * @param {TimeStep} step\n */\nSolver.prototype.solveIsland = function(step) {\n  // B2: Island Solve\n  var world = this.m_world;\n  var gravity = world.m_gravity;\n  var allowSleep = world.m_allowSleep;\n\n  var h = step.dt;\n\n  // Integrate velocities and apply damping. Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.m_sweep.c);\n    var a = body.m_sweep.a;\n    var v = Vec2.clone(body.m_linearVelocity);\n    var w = body.m_angularVelocity;\n\n    // Store positions for continuous collision.\n    body.m_sweep.c0.set(body.m_sweep.c);\n    body.m_sweep.a0 = body.m_sweep.a;\n\n    if (body.isDynamic()) {\n      // Integrate velocities.\n      v.addMul(h * body.m_gravityScale, gravity);\n      v.addMul(h * body.m_invMass, body.m_force);\n      w += h * body.m_invI * body.m_torque;\n      /**\n       * <pre>\n       * Apply damping.\n       * ODE: dv/dt + c * v = 0\n       * Solution: v(t) = v0 * exp(-c * t)\n       * Time step: v(t + dt) = v0 * exp(-c * (t + dt)) = v0 * exp(-c * t) * exp(-c * dt) = v * exp(-c * dt)\n       * v2 = exp(-c * dt) * v1\n       * Pade approximation:\n       * v2 = v1 * 1 / (1 + c * dt)\n       * </pre>\n       */\n      v.mul(1.0 / (1.0 + h * body.m_linearDamping));\n      w *= 1.0 / (1.0 + h * body.m_angularDamping);\n    }\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('M: ');\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(step);\n  }\n\n  _DEBUG && this.printBodies('R: ');\n\n  if (step.warmStarting) {\n    // Warm start.\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var contact = this.m_contacts[i];\n      contact.warmStartConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('Q: ');\n  \n  for (var i = 0; i < this.m_joints.length; ++i) {\n    var joint = this.m_joints[i];\n    joint.initVelocityConstraints(step);\n  }\n\n  _DEBUG && this.printBodies('E: ');\n\n  // Solve velocity constraints\n  for (var i = 0; i < step.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      joint.solveVelocityConstraints(step);\n    }\n\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(step);\n    }\n  }\n\n  _DEBUG && this.printBodies('D: ');\n\n  // Store impulses for warm starting\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.storeConstraintImpulses(step);\n  }\n\n  _DEBUG && this.printBodies('C: ');\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.lengthSquared(translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c.set(c);\n    body.c_position.a = a;\n    body.c_velocity.v.set(v);\n    body.c_velocity.w = w;\n  }\n\n  _DEBUG && this.printBodies('B: ');\n\n  // Solve position constraints\n  var positionSolved = false;\n  for (var i = 0; i < step.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraint(step);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -3.0 * Settings.linearSlop;\n\n    var jointsOkay = true;\n    for (var j = 0; j < this.m_joints.length; ++j) {\n      var joint = this.m_joints[j];\n      var jointOkay = joint.solvePositionConstraints(step);\n      jointsOkay = jointsOkay && jointOkay;\n    }\n\n    if (contactsOkay && jointsOkay) {\n      // Exit early if the position errors are small.\n      positionSolved = true;\n      break;\n    }\n  }\n\n  _DEBUG && this.printBodies('L: ');\n\n  // Copy state buffers back to the bodies\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    body.m_sweep.c.set(body.c_position.c);\n    body.m_sweep.a = body.c_position.a;\n    body.m_linearVelocity.set(body.c_velocity.v);\n    body.m_angularVelocity = body.c_velocity.w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n\n  if (allowSleep) {\n    var minSleepTime = Infinity;\n\n    var linTolSqr = Settings.linearSleepToleranceSqr;\n    var angTolSqr = Settings.angularSleepToleranceSqr;\n\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      if (body.isStatic()) {\n        continue;\n      }\n\n      if ((body.m_autoSleepFlag == false)\n          || (body.m_angularVelocity * body.m_angularVelocity > angTolSqr)\n          || (Vec2.lengthSquared(body.m_linearVelocity) > linTolSqr)) {\n        body.m_sleepTime = 0.0;\n        minSleepTime = 0.0;\n      } else {\n        body.m_sleepTime += h;\n        minSleepTime = Math.min(minSleepTime, body.m_sleepTime);\n      }\n    }\n\n    if (minSleepTime >= Settings.timeToSleep && positionSolved) {\n      for (var i = 0; i < this.m_bodies.length; ++i) {\n        var body = this.m_bodies[i];\n        body.setAwake(false);\n      }\n    }\n  }\n};\n\nSolver.prototype.printBodies = function(tag) {\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var b = this.m_bodies[i];\n    common.debug(tag, b.c_position.a, b.c_position.c.x, b.c_position.c.y, b.c_velocity.w, b.c_velocity.v.x, b.c_velocity.v.y);\n  }\n};\n\nvar s_subStep = new TimeStep(); // reuse\n\n/**\n * Find TOI contacts and solve them.\n *\n * @param {TimeStep} step\n */\nSolver.prototype.solveWorldTOI = function(step) {\n  var world = this.m_world;\n\n  if (world.m_stepComplete) {\n    for (var b = world.m_bodyList; b; b = b.m_next) {\n      b.m_islandFlag = false;\n      b.m_sweep.alpha0 = 0.0;\n    }\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Invalidate TOI\n      c.m_toiFlag = false;\n      c.m_islandFlag = false;\n      c.m_toiCount = 0;\n      c.m_toi = 1.0;\n    }\n  }\n\n  // Find TOI events and solve them.\n  for (;;) {\n    // Find the first TOI.\n    var minContact = null; // Contact\n    var minAlpha = 1.0;\n\n    for (var c = world.m_contactList; c; c = c.m_next) {\n      // Is this contact disabled?\n      if (c.isEnabled() == false) {\n        continue;\n      }\n\n      // Prevent excessive sub-stepping.\n      if (c.m_toiCount > Settings.maxSubSteps) {\n        continue;\n      }\n\n      var alpha = 1.0;\n      if (c.m_toiFlag) {\n        // This contact has a valid cached TOI.\n        alpha = c.m_toi;\n      } else {\n        var fA = c.getFixtureA();\n        var fB = c.getFixtureB();\n\n        // Is there a sensor?\n        if (fA.isSensor() || fB.isSensor()) {\n          continue;\n        }\n\n        var bA = fA.getBody();\n        var bB = fB.getBody();\n\n        _ASSERT && common.assert(bA.isDynamic() || bB.isDynamic());\n\n        var activeA = bA.isAwake() && !bA.isStatic();\n        var activeB = bB.isAwake() && !bB.isStatic();\n\n        // Is at least one body active (awake and dynamic or kinematic)?\n        if (activeA == false && activeB == false) {\n          continue;\n        }\n\n        var collideA = bA.isBullet() || !bA.isDynamic();\n        var collideB = bB.isBullet() || !bB.isDynamic();\n\n        // Are these two non-bullet dynamic bodies?\n        if (collideA == false && collideB == false) {\n          continue;\n        }\n\n        // Compute the TOI for this contact.\n        // Put the sweeps onto the same time interval.\n        var alpha0 = bA.m_sweep.alpha0;\n\n        if (bA.m_sweep.alpha0 < bB.m_sweep.alpha0) {\n          alpha0 = bB.m_sweep.alpha0;\n          bA.m_sweep.advance(alpha0);\n        } else if (bB.m_sweep.alpha0 < bA.m_sweep.alpha0) {\n          alpha0 = bA.m_sweep.alpha0;\n          bB.m_sweep.advance(alpha0);\n        }\n\n        _ASSERT && common.assert(alpha0 < 1.0);\n\n        var indexA = c.getChildIndexA();\n        var indexB = c.getChildIndexB();\n\n        var sweepA = bA.m_sweep;\n        var sweepB = bB.m_sweep;\n\n        // Compute the time of impact in interval [0, minTOI]\n        var input = new TOIInput(); // TODO: reuse\n        input.proxyA.set(fA.getShape(), indexA);\n        input.proxyB.set(fB.getShape(), indexB);\n        input.sweepA.set(bA.m_sweep);\n        input.sweepB.set(bB.m_sweep);\n        input.tMax = 1.0;\n\n        var output = new TOIOutput(); // TODO: reuse\n        TimeOfImpact(output, input);\n\n        // Beta is the fraction of the remaining portion of the [time?].\n        var beta = output.t;\n        if (output.state == TOIOutput.e_touching) {\n          alpha = Math.min(alpha0 + (1.0 - alpha0) * beta, 1.0);\n        } else {\n          alpha = 1.0;\n        }\n\n        c.m_toi = alpha;\n        c.m_toiFlag = true;\n      }\n\n      if (alpha < minAlpha) {\n        // This is the minimum TOI found so far.\n        minContact = c;\n        minAlpha = alpha;\n      }\n    }\n\n    if (minContact == null || 1.0 - 10.0 * Math.EPSILON < minAlpha) {\n      // No more TOI events. Done!\n      world.m_stepComplete = true;\n      break;\n    }\n\n    // Advance the bodies to the TOI.\n    var fA = minContact.getFixtureA();\n    var fB = minContact.getFixtureB();\n    var bA = fA.getBody();\n    var bB = fB.getBody();\n\n    var backup1 = bA.m_sweep.clone();\n    var backup2 = bB.m_sweep.clone();\n\n    bA.advance(minAlpha);\n    bB.advance(minAlpha);\n\n    // The TOI contact likely has some new contact points.\n    minContact.update(world);\n    minContact.m_toiFlag = false;\n    ++minContact.m_toiCount;\n\n    // Is the contact solid?\n    if (minContact.isEnabled() == false || minContact.isTouching() == false) {\n      // Restore the sweeps.\n      minContact.setEnabled(false);\n      bA.m_sweep.set(backup1);\n      bB.m_sweep.set(backup2);\n      bA.synchronizeTransform();\n      bB.synchronizeTransform();\n      continue;\n    }\n\n    bA.setAwake(true);\n    bB.setAwake(true);\n\n    // Build the island\n    this.clear();\n    this.addBody(bA);\n    this.addBody(bB);\n    this.addContact(minContact);\n\n    bA.m_islandFlag = true;\n    bB.m_islandFlag = true;\n    minContact.m_islandFlag = true;\n\n    // Get contacts on bodyA and bodyB.\n    var bodies = [ bA, bB ];\n    for (var i = 0; i < bodies.length; ++i) {\n      var body = bodies[i];\n      if (body.isDynamic()) {\n        for (var ce = body.m_contactList; ce; ce = ce.next) {\n          // if (this.m_bodyCount == this.m_bodyCapacity) { break; }\n          // if (this.m_contactCount == this.m_contactCapacity) { break; }\n\n          var contact = ce.contact;\n\n          // Has this contact already been added to the island?\n          if (contact.m_islandFlag) {\n            continue;\n          }\n\n          // Only add if either is static, kinematic or bullet.\n          var other = ce.other;\n          if (other.isDynamic() && !body.isBullet() && !other.isBullet()) {\n            continue;\n          }\n\n          // Skip sensors.\n          var sensorA = contact.m_fixtureA.m_isSensor;\n          var sensorB = contact.m_fixtureB.m_isSensor;\n          if (sensorA || sensorB) {\n            continue;\n          }\n\n          // Tentatively advance the body to the TOI.\n          var backup = other.m_sweep.clone();\n          if (other.m_islandFlag == false) {\n            other.advance(minAlpha);\n          }\n\n          // Update the contact points\n          contact.update(world);\n\n          // Was the contact disabled by the user?\n          // Are there contact points?\n          if (contact.isEnabled() == false || contact.isTouching() == false) {\n            other.m_sweep.set(backup);\n            other.synchronizeTransform();\n            continue;\n          }\n\n          // Add the contact to the island\n          contact.m_islandFlag = true;\n          this.addContact(contact);\n\n          // Has the other body already been added to the island?\n          if (other.m_islandFlag) {\n            continue;\n          }\n\n          // Add the other body to the island.\n          other.m_islandFlag = true;\n\n          if (!other.isStatic()) {\n            other.setAwake(true);\n          }\n\n          this.addBody(other);\n        }\n      }\n    }\n\n    s_subStep.reset((1.0 - minAlpha) * step.dt);\n    s_subStep.dtRatio = 1.0;\n    s_subStep.positionIterations = 20;\n    s_subStep.velocityIterations = step.velocityIterations;\n    s_subStep.warmStarting = false;\n\n    this.solveIslandTOI(s_subStep, bA, bB);\n\n    // Reset island flags and synchronize broad-phase proxies.\n    for (var i = 0; i < this.m_bodies.length; ++i) {\n      var body = this.m_bodies[i];\n      body.m_islandFlag = false;\n\n      if (!body.isDynamic()) {\n        continue;\n      }\n\n      body.synchronizeFixtures();\n\n      // Invalidate all contact TOIs on this displaced body.\n      for (var ce = body.m_contactList; ce; ce = ce.next) {\n        ce.contact.m_toiFlag = false;\n        ce.contact.m_islandFlag = false;\n      }\n    }\n\n    // Commit fixture proxy movements to the broad-phase so that new contacts\n    // are created.\n    // Also, some contacts can be destroyed.\n    world.findNewContacts();\n\n    if (world.m_subStepping) {\n      world.m_stepComplete = false;\n      break;\n    }\n  }\n\n  if (_DEBUG) for (var b = world.m_bodyList; b; b = b.m_next) {\n    var c = b.m_sweep.c;\n    var a = b.m_sweep.a;\n    var v = b.m_linearVelocity;\n    var w = b.m_angularVelocity;\n  }\n}\n\n/**\n * @param {TimeStep} subStep\n * @param toiA\n * @param toiB\n */\nSolver.prototype.solveIslandTOI = function(subStep, toiA, toiB) {\n  var world = this.m_world;\n\n  // Initialize the body state.\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n    body.c_position.c.set(body.m_sweep.c);\n    body.c_position.a = body.m_sweep.a;\n    body.c_velocity.v.set(body.m_linearVelocity);\n    body.c_velocity.w = body.m_angularVelocity;\n  }\n\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initConstraint(subStep);\n  }\n\n  // Solve position constraints.\n  for (var i = 0; i < subStep.positionIterations; ++i) {\n    var minSeparation = 0.0;\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      var separation = contact.solvePositionConstraintTOI(subStep, toiA, toiB);\n      minSeparation = Math.min(minSeparation, separation);\n    }\n    // We can't expect minSpeparation >= -Settings.linearSlop because we don't\n    // push the separation above -Settings.linearSlop.\n    var contactsOkay = minSeparation >= -1.5 * Settings.linearSlop;\n    if (contactsOkay) {\n      break;\n    }\n  }\n\n  if (false) {\n    // Is the new position really safe?\n    for (var i = 0; i < this.m_contacts.length; ++i) {\n      var c = this.m_contacts[i];\n      var fA = c.getFixtureA();\n      var fB = c.getFixtureB();\n\n      var bA = fA.getBody();\n      var bB = fB.getBody();\n\n      var indexA = c.getChildIndexA();\n      var indexB = c.getChildIndexB();\n\n      var input = new DistanceInput();\n      input.proxyA.set(fA.getShape(), indexA);\n      input.proxyB.set(fB.getShape(), indexB);\n      input.transformA = bA.getTransform();\n      input.transformB = bB.getTransform();\n      input.useRadii = false;\n\n      var output = new DistanceOutput();\n      var cache = new SimplexCache();\n      Distance(output, cache, input);\n\n      if (output.distance == 0 || cache.count == 3) {\n        cache.count += 0;\n      }\n    }\n  }\n\n  // Leap of faith to new safe state.\n  toiA.m_sweep.c0.set(toiA.c_position.c);\n  toiA.m_sweep.a0 = toiA.c_position.a;\n  toiB.m_sweep.c0.set(toiB.c_position.c);\n  toiB.m_sweep.a0 = toiB.c_position.a;\n\n  // No warm starting is needed for TOI events because warm\n  // starting impulses were applied in the discrete solver.\n  for (var i = 0; i < this.m_contacts.length; ++i) {\n    var contact = this.m_contacts[i];\n    contact.initVelocityConstraint(subStep);\n  }\n\n  // Solve velocity constraints.\n  for (var i = 0; i < subStep.velocityIterations; ++i) {\n    for (var j = 0; j < this.m_contacts.length; ++j) {\n      var contact = this.m_contacts[j];\n      contact.solveVelocityConstraint(subStep);\n    }\n  }\n\n  // Don't store the TOI contact forces for warm starting\n  // because they can be quite large.\n\n  var h = subStep.dt;\n\n  // Integrate positions\n  for (var i = 0; i < this.m_bodies.length; ++i) {\n    var body = this.m_bodies[i];\n\n    var c = Vec2.clone(body.c_position.c);\n    var a = body.c_position.a;\n    var v = Vec2.clone(body.c_velocity.v);\n    var w = body.c_velocity.w;\n\n    // Check for large velocities\n    var translation = Vec2.mul(h, v);\n    if (Vec2.dot(translation, translation) > Settings.maxTranslationSquared) {\n      var ratio = Settings.maxTranslation / translation.length();\n      v.mul(ratio);\n    }\n\n    var rotation = h * w;\n    if (rotation * rotation > Settings.maxRotationSquared) {\n      var ratio = Settings.maxRotation / Math.abs(rotation);\n      w *= ratio;\n    }\n\n    // Integrate\n    c.addMul(h, v);\n    a += h * w;\n\n    body.c_position.c = c;\n    body.c_position.a = a;\n    body.c_velocity.v = v;\n    body.c_velocity.w = w;\n\n    // Sync bodies\n    body.m_sweep.c = c;\n    body.m_sweep.a = a;\n    body.m_linearVelocity = v;\n    body.m_angularVelocity = w;\n    body.synchronizeTransform();\n  }\n\n  this.postSolveIsland();\n};\n\n/**\n * Contact impulses for reporting. Impulses are used instead of forces because\n * sub-step forces may approach infinity for rigid body collisions. These match\n * up one-to-one with the contact points in Manifold.\n */\nfunction ContactImpulse() {\n  this.normalImpulses = [];\n  this.tangentImpulses = [];\n};\n\nSolver.prototype.postSolveIsland = function() {\n  // TODO: report contact.v_points instead of new object?\n  var impulse = new ContactImpulse();\n  for (var c = 0; c < this.m_contacts.length; ++c) {\n    var contact = this.m_contacts[c];\n    for (var p = 0; p < contact.v_points.length; ++p) {\n      impulse.normalImpulses.push(contact.v_points[p].normalImpulse);\n      impulse.tangentImpulses.push(contact.v_points[p].tangentImpulse);\n    }\n    this.m_world.postSolve(contact, impulse);\n  }\n};\n","var _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports.now = function() {\n  return Date.now();\n}\n\nmodule.exports.diff = function(time) {\n  return Date.now() - time;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = BoxShape;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar PolygonShape = require('./PolygonShape');\n\nBoxShape._super = PolygonShape;\nBoxShape.prototype = create(BoxShape._super.prototype);\n\nBoxShape.TYPE = 'polygon';\n\n/**\n * A rectangle polygon which extend PolygonShape.\n */\nfunction BoxShape(hx, hy, center, angle) {\n  if (!(this instanceof BoxShape)) {\n    return new BoxShape(hx, hy, center, angle);\n  }\n\n  BoxShape._super.call(this);\n\n  this._setAsBox(hx, hy, center, angle);\n}\n\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(CircleShape.TYPE, CircleShape.TYPE, CircleCircleContact);\n\nfunction CircleCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == CircleShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollideCircles(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\nfunction CollideCircles(manifold, circleA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  var pA = Transform.mulVec2(xfA, circleA.m_p);\n  var pB = Transform.mulVec2(xfB, circleB.m_p);\n\n  var distSqr = Vec2.distanceSquared(pB, pA);\n  var rA = circleA.m_radius;\n  var rB = circleB.m_radius;\n  var radius = rA + rB;\n  if (distSqr > radius * radius) {\n    return;\n  }\n\n  manifold.type = Manifold.e_circles;\n  manifold.localPoint.set(circleA.m_p);\n  manifold.localNormal.setZero();\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n\nexports.CollideCircles = CollideCircles;","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar CircleShape = require('./CircleShape');\n\nContact.addType(EdgeShape.TYPE, CircleShape.TYPE, EdgeCircleContact);\nContact.addType(ChainShape.TYPE, CircleShape.TYPE, ChainCircleContact);\n\nfunction EdgeCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var shapeA = fixtureA.getShape();\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\nfunction ChainCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB,\n    indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n\n  var chain = fixtureA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  var shapeA = edge;\n  var shapeB = fixtureB.getShape();\n\n  CollideEdgeCircle(manifold, shapeA, xfA, shapeB, xfB);\n}\n\n// Compute contact points for edge versus circle.\n// This accounts for edge connectivity.\nfunction CollideEdgeCircle(manifold, edgeA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle in frame of edge\n  var Q = Transform.mulTVec2(xfA, Transform.mulVec2(xfB, circleB.m_p));\n\n  var A = edgeA.m_vertex1;\n  var B = edgeA.m_vertex2;\n  var e = Vec2.sub(B, A);\n\n  // Barycentric coordinates\n  var u = Vec2.dot(e, Vec2.sub(B, Q));\n  var v = Vec2.dot(e, Vec2.sub(Q, A));\n\n  var radius = edgeA.m_radius + circleB.m_radius;\n\n  // Region A\n  if (v <= 0.0) {\n    var P = Vec2.clone(A);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to A?\n    if (edgeA.m_hasVertex0) {\n      var A1 = edgeA.m_vertex0;\n      var B1 = A;\n      var e1 = Vec2.sub(B1, A1);\n      var u1 = Vec2.dot(e1, Vec2.sub(B1, Q));\n\n      // Is the circle in Region AB of the previous edge?\n      if (u1 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region B\n  if (u <= 0.0) {\n    var P = Vec2.clone(B);\n    var d = Vec2.sub(Q, P);\n    var dd = Vec2.dot(d, d);\n    if (dd > radius * radius) {\n      return;\n    }\n\n    // Is there an edge connected to B?\n    if (edgeA.m_hasVertex3) {\n      var B2 = edgeA.m_vertex3;\n      var A2 = B;\n      var e2 = Vec2.sub(B2, A2);\n      var v2 = Vec2.dot(e2, Vec2.sub(Q, A2));\n\n      // Is the circle in Region AB of the next edge?\n      if (v2 > 0.0) {\n        return;\n      }\n    }\n\n    manifold.type = Manifold.e_circles;\n    manifold.localNormal.setZero();\n    manifold.localPoint.set(P);\n    manifold.pointCount = 1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 1;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Region AB\n  var den = Vec2.dot(e, e);\n  _ASSERT && common.assert(den > 0.0);\n  var P = Vec2.combine(u / den, A, v / den, B);\n  var d = Vec2.sub(Q, P);\n  var dd = Vec2.dot(d, d);\n  if (dd > radius * radius) {\n    return;\n  }\n\n  var n = Vec2.neo(-e.y, e.x);\n  if (Vec2.dot(n, Vec2.sub(Q, A)) < 0.0) {\n    n.set(-n.x, -n.y);\n  }\n  n.normalize();\n\n  manifold.type = Manifold.e_faceA;\n  manifold.localNormal = n;\n  manifold.localPoint.set(A);\n  manifold.pointCount = 1;\n  manifold.points[0].localPoint.set(circleB.m_p);\n\n  // manifold.points[0].id.key = 0;\n  manifold.points[0].id.cf.indexA = 0;\n  manifold.points[0].id.cf.typeA = Manifold.e_face;\n  manifold.points[0].id.cf.indexB = 0;\n  manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar PolygonShape = require('./PolygonShape');\n\nmodule.exports = CollidePolygons;\n\nContact.addType(PolygonShape.TYPE, PolygonShape.TYPE, PolygonContact);\n\nfunction PolygonContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == PolygonShape.TYPE);\n  CollidePolygons(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(), xfB);\n}\n\n/**\n * Find the max separation between poly1 and poly2 using edge normals from\n * poly1.\n */\nfunction FindMaxSeparation(poly1, xf1, poly2, xf2) {\n  var count1 = poly1.m_count;\n  var count2 = poly2.m_count;\n  var n1s = poly1.m_normals;\n  var v1s = poly1.m_vertices;\n  var v2s = poly2.m_vertices;\n  var xf = Transform.mulTXf(xf2, xf1);\n\n  var bestIndex = 0;\n  var maxSeparation = -Infinity;\n  for (var i = 0; i < count1; ++i) {\n    // Get poly1 normal in frame2.\n    var n = Rot.mulVec2(xf.q, n1s[i]);\n    var v1 = Transform.mulVec2(xf, v1s[i]);\n\n    // Find deepest point for normal i.\n    var si = Infinity;\n    for (var j = 0; j < count2; ++j) {\n      var sij = Vec2.dot(n, v2s[j]) - Vec2.dot(n, v1);\n      if (sij < si) {\n        si = sij;\n      }\n    }\n\n    if (si > maxSeparation) {\n      maxSeparation = si;\n      bestIndex = i;\n    }\n  }\n\n  // used to keep last FindMaxSeparation call values\n  FindMaxSeparation._maxSeparation = maxSeparation;\n  FindMaxSeparation._bestIndex = bestIndex;\n}\n\n/**\n * @param {ClipVertex[2]} c\n * @param {int} edge1\n */\nfunction FindIncidentEdge(c, poly1, xf1, edge1, poly2, xf2) {\n  var normals1 = poly1.m_normals;\n\n  var count2 = poly2.m_count;\n  var vertices2 = poly2.m_vertices;\n  var normals2 = poly2.m_normals;\n\n  _ASSERT && common.assert(0 <= edge1 && edge1 < poly1.m_count);\n\n  // Get the normal of the reference edge in poly2's frame.\n  var normal1 = Rot.mulT(xf2.q, Rot.mulVec2(xf1.q, normals1[edge1]));\n\n  // Find the incident edge on poly2.\n  var index = 0;\n  var minDot = Infinity;\n  for (var i = 0; i < count2; ++i) {\n    var dot = Vec2.dot(normal1, normals2[i]);\n    if (dot < minDot) {\n      minDot = dot;\n      index = i;\n    }\n  }\n\n  // Build the clip vertices for the incident edge.\n  var i1 = index;\n  var i2 = i1 + 1 < count2 ? i1 + 1 : 0;\n\n  c[0].v = Transform.mulVec2(xf2, vertices2[i1]);\n  c[0].id.cf.indexA = edge1;\n  c[0].id.cf.indexB = i1;\n  c[0].id.cf.typeA = Manifold.e_face;\n  c[0].id.cf.typeB = Manifold.e_vertex;\n\n  c[1].v = Transform.mulVec2(xf2, vertices2[i2]);\n  c[1].id.cf.indexA = edge1;\n  c[1].id.cf.indexB = i2;\n  c[1].id.cf.typeA = Manifold.e_face;\n  c[1].id.cf.typeB = Manifold.e_vertex;\n}\n\n/**\n * \n * Find edge normal of max separation on A - return if separating axis is found<br>\n * Find edge normal of max separation on B - return if separation axis is found<br>\n * Choose reference edge as min(minA, minB)<br>\n * Find incident edge<br>\n * Clip\n * \n * The normal points from 1 to 2\n */\nfunction CollidePolygons(manifold, polyA, xfA, polyB, xfB) {\n  manifold.pointCount = 0;\n  var totalRadius = polyA.m_radius + polyB.m_radius;\n\n  FindMaxSeparation(polyA, xfA, polyB, xfB);\n  var edgeA = FindMaxSeparation._bestIndex;\n  var separationA = FindMaxSeparation._maxSeparation;\n  if (separationA > totalRadius)\n    return;\n\n  FindMaxSeparation(polyB, xfB, polyA, xfA);\n  var edgeB = FindMaxSeparation._bestIndex;\n  var separationB = FindMaxSeparation._maxSeparation;\n  if (separationB > totalRadius)\n    return;\n\n  var poly1; // reference polygon\n  var poly2; // incident polygon\n  var xf1;\n  var xf2;\n  var edge1; // reference edge\n  var flip;\n  var k_tol = 0.1 * Settings.linearSlop;\n\n  if (separationB > separationA + k_tol) {\n    poly1 = polyB;\n    poly2 = polyA;\n    xf1 = xfB;\n    xf2 = xfA;\n    edge1 = edgeB;\n    manifold.type = Manifold.e_faceB;\n    flip = 1;\n  } else {\n    poly1 = polyA;\n    poly2 = polyB;\n    xf1 = xfA;\n    xf2 = xfB;\n    edge1 = edgeA;\n    manifold.type = Manifold.e_faceA;\n    flip = 0;\n  }\n\n  var incidentEdge = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  FindIncidentEdge(incidentEdge, poly1, xf1, edge1, poly2, xf2);\n\n  var count1 = poly1.m_count;\n  var vertices1 = poly1.m_vertices;\n\n  var iv1 = edge1;\n  var iv2 = edge1 + 1 < count1 ? edge1 + 1 : 0;\n\n  var v11 = vertices1[iv1];\n  var v12 = vertices1[iv2];\n\n  var localTangent = Vec2.sub(v12, v11);\n  localTangent.normalize();\n\n  var localNormal = Vec2.cross(localTangent, 1.0);\n  var planePoint = Vec2.combine(0.5, v11, 0.5, v12);\n\n  var tangent = Rot.mulVec2(xf1.q, localTangent);\n  var normal = Vec2.cross(tangent, 1.0);\n\n  v11 = Transform.mulVec2(xf1, v11);\n  v12 = Transform.mulVec2(xf1, v12);\n\n  // Face offset.\n  var frontOffset = Vec2.dot(normal, v11);\n\n  // Side offsets, extended by polytope skin thickness.\n  var sideOffset1 = -Vec2.dot(tangent, v11) + totalRadius;\n  var sideOffset2 = Vec2.dot(tangent, v12) + totalRadius;\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, incidentEdge, Vec2.neg(tangent),\n      sideOffset1, iv1);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, tangent,\n      sideOffset2, iv2);\n\n  if (np < 2) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  manifold.localNormal = localNormal;\n  manifold.localPoint = planePoint;\n\n  var pointCount = 0;\n  for (var i = 0; i < clipPoints2.length/* maxManifoldPoints */; ++i) {\n    var separation = Vec2.dot(normal, clipPoints2[i].v) - frontOffset;\n\n    if (separation <= totalRadius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n      cp.localPoint.set(Transform.mulTVec2(xf2, clipPoints2[i].v));\n      cp.id = clipPoints2[i].id;\n      if (flip) {\n        // Swap features\n        var cf = cp.id.cf; // ContactFeature\n        var indexA = cf.indexA;\n        var indexB = cf.indexB;\n        var typeA = cf.typeA;\n        var typeB = cf.typeB;\n        cf.indexA = indexB;\n        cf.indexB = indexA;\n        cf.typeA = typeB;\n        cf.typeB = typeA;\n      }\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Rot = require('../common/Rot');\nvar Vec2 = require('../common/Vec2');\nvar AABB = require('../collision/AABB');\nvar Settings = require('../Settings');\nvar Manifold = require('../Manifold');\nvar Contact = require('../Contact');\nvar Shape = require('../Shape');\nvar CircleShape = require('./CircleShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(PolygonShape.TYPE, CircleShape.TYPE, PolygonCircleContact);\n\nfunction PolygonCircleContact(manifold, xfA, fixtureA, indexA, xfB, fixtureB, indexB) {\n  _ASSERT && common.assert(fixtureA.getType() == PolygonShape.TYPE);\n  _ASSERT && common.assert(fixtureB.getType() == CircleShape.TYPE);\n  CollidePolygonCircle(manifold, fixtureA.getShape(), xfA, fixtureB.getShape(),\n      xfB);\n}\n\nfunction CollidePolygonCircle(manifold, polygonA, xfA, circleB, xfB) {\n  manifold.pointCount = 0;\n\n  // Compute circle position in the frame of the polygon.\n  var c = Transform.mulVec2(xfB, circleB.m_p);\n  var cLocal = Transform.mulTVec2(xfA, c);\n\n  // Find the min separating edge.\n  var normalIndex = 0;\n  var separation = -Infinity;\n  var radius = polygonA.m_radius + circleB.m_radius;\n  var vertexCount = polygonA.m_count;\n  var vertices = polygonA.m_vertices;\n  var normals = polygonA.m_normals;\n\n  for (var i = 0; i < vertexCount; ++i) {\n    var s = Vec2.dot(normals[i], Vec2.sub(cLocal, vertices[i]));\n\n    if (s > radius) {\n      // Early out.\n      return;\n    }\n\n    if (s > separation) {\n      separation = s;\n      normalIndex = i;\n    }\n  }\n\n  // Vertices that subtend the incident face.\n  var vertIndex1 = normalIndex;\n  var vertIndex2 = vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;\n  var v1 = vertices[vertIndex1];\n  var v2 = vertices[vertIndex2];\n\n  // If the center is inside the polygon ...\n  if (separation < Math.EPSILON) {\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[normalIndex]);\n    manifold.localPoint.setCombine(0.5, v1, 0.5, v2);\n    manifold.points[0].localPoint = circleB.m_p;\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n    return;\n  }\n\n  // Compute barycentric coordinates\n  var u1 = Vec2.dot(Vec2.sub(cLocal, v1), Vec2.sub(v2, v1));\n  var u2 = Vec2.dot(Vec2.sub(cLocal, v2), Vec2.sub(v1, v2));\n  if (u1 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v1) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v1);\n    manifold.localNormal.normalize();\n    manifold.localPoint = v1;\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else if (u2 <= 0.0) {\n    if (Vec2.distanceSquared(cLocal, v2) > radius * radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.setCombine(1, cLocal, -1, v2);\n    manifold.localNormal.normalize();\n    manifold.localPoint.set(v2);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  } else {\n    var faceCenter = Vec2.mid(v1, v2);\n    var separation = Vec2.dot(cLocal, normals[vertIndex1])\n        - Vec2.dot(faceCenter, normals[vertIndex1]);\n    if (separation > radius) {\n      return;\n    }\n\n    manifold.pointCount = 1;\n    manifold.type = Manifold.e_faceA;\n    manifold.localNormal.set(normals[vertIndex1]);\n    manifold.localPoint.set(faceCenter);\n    manifold.points[0].localPoint.set(circleB.m_p);\n\n    // manifold.points[0].id.key = 0;\n    manifold.points[0].id.cf.indexA = 0;\n    manifold.points[0].id.cf.typeA = Manifold.e_vertex;\n    manifold.points[0].id.cf.indexB = 0;\n    manifold.points[0].id.cf.typeB = Manifold.e_vertex;\n  }\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nvar common = require('../util/common');\nvar create = require('../util/create');\nvar Math = require('../common/Math');\nvar Transform = require('../common/Transform');\nvar Vec2 = require('../common/Vec2');\nvar Rot = require('../common/Rot');\nvar Settings = require('../Settings');\nvar Shape = require('../Shape');\nvar Contact = require('../Contact');\nvar Manifold = require('../Manifold');\nvar EdgeShape = require('./EdgeShape');\nvar ChainShape = require('./ChainShape');\nvar PolygonShape = require('./PolygonShape');\n\nContact.addType(EdgeShape.TYPE, PolygonShape.TYPE, EdgePolygonContact);\nContact.addType(ChainShape.TYPE, PolygonShape.TYPE, ChainPolygonContact);\n\nfunction EdgePolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == EdgeShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  CollideEdgePolygon(manifold, fA.getShape(), xfA, fB.getShape(), xfB);\n}\n\nfunction ChainPolygonContact(manifold, xfA, fA, indexA, xfB, fB, indexB) {\n  _ASSERT && common.assert(fA.getType() == ChainShape.TYPE);\n  _ASSERT && common.assert(fB.getType() == PolygonShape.TYPE);\n\n  var chain = fA.getShape();\n  var edge = new EdgeShape();\n  chain.getChildEdge(edge, indexA);\n\n  CollideEdgePolygon(manifold, edge, xfA, fB.getShape(), xfB);\n}\n\n// EPAxis Type\nvar e_unknown = -1;\nvar e_edgeA = 1;\nvar e_edgeB = 2;\n\n// VertexType unused?\nvar e_isolated = 0;\nvar e_concave = 1;\nvar e_convex = 2;\n\n// This structure is used to keep track of the best separating axis.\nfunction EPAxis() {\n  this.type; // Type\n  this.index;\n  this.separation;\n};\n\n// This holds polygon B expressed in frame A.\nfunction TempPolygon() {\n  this.vertices = []; // Vec2[Settings.maxPolygonVertices]\n  this.normals = []; // Vec2[Settings.maxPolygonVertices];\n  this.count = 0;\n};\n\n// Reference face used for clipping\nfunction ReferenceFace() {\n  this.i1, this.i2; // int\n  this.v1, this.v2; // v\n  this.normal = Vec2.zero();\n  this.sideNormal1 = Vec2.zero();\n  this.sideOffset1; // float\n  this.sideNormal2 = Vec2.zero();\n  this.sideOffset2; // float\n};\n\n// reused\nvar edgeAxis = new EPAxis();\nvar polygonAxis = new EPAxis();\nvar polygonBA = new TempPolygon();\nvar rf = new ReferenceFace();\n\n/**\n * This function collides and edge and a polygon, taking into account edge\n * adjacency.\n */\nfunction CollideEdgePolygon(manifold, edgeA, xfA, polygonB, xfB) {\n  // Algorithm:\n  // 1. Classify v1 and v2\n  // 2. Classify polygon centroid as front or back\n  // 3. Flip normal if necessary\n  // 4. Initialize normal range to [-pi, pi] about face normal\n  // 5. Adjust normal range according to adjacent edges\n  // 6. Visit each separating axes, only accept axes within the range\n  // 7. Return if _any_ axis indicates separation\n  // 8. Clip\n\n  var m_type1, m_type2; // VertexType unused?\n\n  var xf = Transform.mulTXf(xfA, xfB);\n\n  var centroidB = Transform.mulVec2(xf, polygonB.m_centroid);\n\n  var v0 = edgeA.m_vertex0;\n  var v1 = edgeA.m_vertex1;\n  var v2 = edgeA.m_vertex2;\n  var v3 = edgeA.m_vertex3;\n\n  var hasVertex0 = edgeA.m_hasVertex0;\n  var hasVertex3 = edgeA.m_hasVertex3;\n\n  var edge1 = Vec2.sub(v2, v1);\n  edge1.normalize();\n  var normal1 = Vec2.neo(edge1.y, -edge1.x);\n  var offset1 = Vec2.dot(normal1, Vec2.sub(centroidB, v1));\n  var offset0 = 0.0;\n  var offset2 = 0.0;\n  var convex1 = false;\n  var convex2 = false;\n\n  // Is there a preceding edge?\n  if (hasVertex0) {\n    var edge0 = Vec2.sub(v1, v0);\n    edge0.normalize();\n    var normal0 = Vec2.neo(edge0.y, -edge0.x);\n    convex1 = Vec2.cross(edge0, edge1) >= 0.0;\n    offset0 = Vec2.dot(normal0, centroidB) - Vec2.dot(normal0, v0);\n  }\n\n  // Is there a following edge?\n  if (hasVertex3) {\n    var edge2 = Vec2.sub(v3, v2);\n    edge2.normalize();\n    var normal2 = Vec2.neo(edge2.y, -edge2.x);\n    convex2 = Vec2.cross(edge1, edge2) > 0.0;\n    offset2 = Vec2.dot(normal2, centroidB) - Vec2.dot(normal2, v2);\n  }\n\n  var front;\n  var normal = Vec2.zero();\n  var lowerLimit = Vec2.zero();\n  var upperLimit = Vec2.zero();\n\n  // Determine front or back collision. Determine collision normal limits.\n  if (hasVertex0 && hasVertex3) {\n    if (convex1 && convex2) {\n      front = offset0 >= 0.0 || offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex1) {\n      front = offset0 >= 0.0 || (offset1 >= 0.0 && offset2 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else if (convex2) {\n      front = offset2 >= 0.0 || (offset0 >= 0.0 && offset1 >= 0.0);\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex0) {\n    if (convex1) {\n      front = offset0 >= 0.0 || offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal0);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      }\n    } else {\n      front = offset0 >= 0.0 && offset1 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.set(normal1);\n        upperLimit.setMul(-1, normal0);\n      }\n    }\n  } else if (hasVertex3) {\n    if (convex2) {\n      front = offset1 >= 0.0 || offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal2);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      }\n    } else {\n      front = offset1 >= 0.0 && offset2 >= 0.0;\n      if (front) {\n        normal.set(normal1);\n        lowerLimit.setMul(-1, normal1);\n        upperLimit.set(normal1);\n      } else {\n        normal.setMul(-1, normal1);\n        lowerLimit.setMul(-1, normal2);\n        upperLimit.set(normal1);\n      }\n    }\n  } else {\n    front = offset1 >= 0.0;\n    if (front) {\n      normal.set(normal1);\n      lowerLimit.setMul(-1, normal1);\n      upperLimit.setMul(-1, normal1);\n    } else {\n      normal.setMul(-1, normal1);\n      lowerLimit.set(normal1);\n      upperLimit.set(normal1);\n    }\n  }\n\n  // Get polygonB in frameA\n  polygonBA.count = polygonB.m_count;\n  for (var i = 0; i < polygonB.m_count; ++i) {\n    polygonBA.vertices[i] = Transform.mulVec2(xf, polygonB.m_vertices[i]);\n    polygonBA.normals[i] = Rot.mulVec2(xf.q, polygonB.m_normals[i]);\n  }\n\n  var radius = 2.0 * Settings.polygonRadius;\n\n  manifold.pointCount = 0;\n\n  { // ComputeEdgeSeparation\n    edgeAxis.type = e_edgeA;\n    edgeAxis.index = front ? 0 : 1;\n    edgeAxis.separation = Infinity;\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var s = Vec2.dot(normal, Vec2.sub(polygonBA.vertices[i], v1));\n      if (s < edgeAxis.separation) {\n        edgeAxis.separation = s;\n      }\n    }\n  }\n\n  // If no valid normal can be found than this edge should not collide.\n  if (edgeAxis.type == e_unknown) {\n    return;\n  }\n\n  if (edgeAxis.separation > radius) {\n    return;\n  }\n\n  { // ComputePolygonSeparation\n    polygonAxis.type = e_unknown;\n    polygonAxis.index = -1;\n    polygonAxis.separation = -Infinity;\n\n    var perp = Vec2.neo(-normal.y, normal.x);\n\n    for (var i = 0; i < polygonBA.count; ++i) {\n      var n = Vec2.neg(polygonBA.normals[i]);\n\n      var s1 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v1));\n      var s2 = Vec2.dot(n, Vec2.sub(polygonBA.vertices[i], v2));\n      var s = Math.min(s1, s2);\n\n      if (s > radius) {\n        // No collision\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n        break;\n      }\n\n      // Adjacency\n      if (Vec2.dot(n, perp) >= 0.0) {\n        if (Vec2.dot(Vec2.sub(n, upperLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      } else {\n        if (Vec2.dot(Vec2.sub(n, lowerLimit), normal) < -Settings.angularSlop) {\n          continue;\n        }\n      }\n\n      if (s > polygonAxis.separation) {\n        polygonAxis.type = e_edgeB;\n        polygonAxis.index = i;\n        polygonAxis.separation = s;\n      }\n    }\n  }\n\n  if (polygonAxis.type != e_unknown && polygonAxis.separation > radius) {\n    return;\n  }\n\n  // Use hysteresis for jitter reduction.\n  var k_relativeTol = 0.98;\n  var k_absoluteTol = 0.001;\n\n  var primaryAxis;\n  if (polygonAxis.type == e_unknown) {\n    primaryAxis = edgeAxis;\n  } else if (polygonAxis.separation > k_relativeTol * edgeAxis.separation + k_absoluteTol) {\n    primaryAxis = polygonAxis;\n  } else {\n    primaryAxis = edgeAxis;\n  }\n\n  var ie = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  if (primaryAxis.type == e_edgeA) {\n    manifold.type = Manifold.e_faceA;\n\n    // Search for the polygon normal that is most anti-parallel to the edge\n    // normal.\n    var bestIndex = 0;\n    var bestValue = Vec2.dot(normal, polygonBA.normals[0]);\n    for (var i = 1; i < polygonBA.count; ++i) {\n      var value = Vec2.dot(normal, polygonBA.normals[i]);\n      if (value < bestValue) {\n        bestValue = value;\n        bestIndex = i;\n      }\n    }\n\n    var i1 = bestIndex;\n    var i2 = i1 + 1 < polygonBA.count ? i1 + 1 : 0;\n\n    ie[0].v = polygonBA.vertices[i1];\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = i1;\n    ie[0].id.cf.typeA = Manifold.e_face;\n    ie[0].id.cf.typeB = Manifold.e_vertex;\n\n    ie[1].v = polygonBA.vertices[i2];\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = i2;\n    ie[1].id.cf.typeA = Manifold.e_face;\n    ie[1].id.cf.typeB = Manifold.e_vertex;\n\n    if (front) {\n      rf.i1 = 0;\n      rf.i2 = 1;\n      rf.v1 = v1;\n      rf.v2 = v2;\n      rf.normal.set(normal1);\n    } else {\n      rf.i1 = 1;\n      rf.i2 = 0;\n      rf.v1 = v2;\n      rf.v2 = v1;\n      rf.normal.setMul(-1, normal1);\n    }\n  } else {\n    manifold.type = Manifold.e_faceB;\n\n    ie[0].v = v1;\n    ie[0].id.cf.indexA = 0;\n    ie[0].id.cf.indexB = primaryAxis.index;\n    ie[0].id.cf.typeA = Manifold.e_vertex;\n    ie[0].id.cf.typeB = Manifold.e_face;\n\n    ie[1].v = v2;\n    ie[1].id.cf.indexA = 0;\n    ie[1].id.cf.indexB = primaryAxis.index;\n    ie[1].id.cf.typeA = Manifold.e_vertex;\n    ie[1].id.cf.typeB = Manifold.e_face;\n\n    rf.i1 = primaryAxis.index;\n    rf.i2 = rf.i1 + 1 < polygonBA.count ? rf.i1 + 1 : 0;\n    rf.v1 = polygonBA.vertices[rf.i1];\n    rf.v2 = polygonBA.vertices[rf.i2];\n    rf.normal.set(polygonBA.normals[rf.i1]);\n  }\n\n  rf.sideNormal1.set(rf.normal.y, -rf.normal.x);\n  rf.sideNormal2.setMul(-1, rf.sideNormal1);\n  rf.sideOffset1 = Vec2.dot(rf.sideNormal1, rf.v1);\n  rf.sideOffset2 = Vec2.dot(rf.sideNormal2, rf.v2);\n\n  // Clip incident edge against extruded edge1 side edges.\n  var clipPoints1 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n  var clipPoints2 = [ new Manifold.clipVertex(), new Manifold.clipVertex() ];\n\n  var np;\n\n  // Clip to box side 1\n  np = Manifold.clipSegmentToLine(clipPoints1, ie, rf.sideNormal1, rf.sideOffset1, rf.i1);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Clip to negative box side 1\n  np = Manifold.clipSegmentToLine(clipPoints2, clipPoints1, rf.sideNormal2, rf.sideOffset2, rf.i2);\n\n  if (np < Settings.maxManifoldPoints) {\n    return;\n  }\n\n  // Now clipPoints2 contains the clipped points.\n  if (primaryAxis.type == e_edgeA) {\n    manifold.localNormal = Vec2.clone(rf.normal);\n    manifold.localPoint = Vec2.clone(rf.v1);\n  } else {\n    manifold.localNormal = Vec2.clone(polygonB.m_normals[rf.i1]);\n    manifold.localPoint = Vec2.clone(polygonB.m_vertices[rf.i1]);\n  }\n\n  var pointCount = 0;\n  for (var i = 0; i < Settings.maxManifoldPoints; ++i) {\n    var separation = Vec2.dot(rf.normal, Vec2.sub(clipPoints2[i].v, rf.v1));\n\n    if (separation <= radius) {\n      var cp = manifold.points[pointCount]; // ManifoldPoint\n\n      if (primaryAxis.type == e_edgeA) {\n        cp.localPoint = Transform.mulT(xf, clipPoints2[i].v);\n        cp.id = clipPoints2[i].id;\n      } else {\n        cp.localPoint = clipPoints2[i].v;\n        cp.id.cf.typeA = clipPoints2[i].id.cf.typeB;\n        cp.id.cf.typeB = clipPoints2[i].id.cf.typeA;\n        cp.id.cf.indexA = clipPoints2[i].id.cf.indexB;\n        cp.id.cf.indexB = clipPoints2[i].id.cf.indexA;\n      }\n\n      ++pointCount;\n    }\n  }\n\n  manifold.pointCount = pointCount;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = DistanceJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nDistanceJoint.TYPE = 'distance-joint';\n\nDistanceJoint._super = Joint;\nDistanceJoint.prototype = create(DistanceJoint._super.prototype);\n\n/**\n * @typedef {Object} DistanceJointDef\n *\n * Distance joint definition. This requires defining an anchor point on both\n * bodies and the non-zero length of the distance joint. The definition uses\n * local anchor points so that the initial configuration can violate the\n * constraint slightly. This helps when saving and loading a game. Warning: Do\n * not use a zero or short length.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. A value\n *       of 0 disables softness.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {number} def.length Distance length.\n */\n\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0\n};\n\n/**\n * A distance joint constrains two points on two bodies to remain at a fixed\n * distance from each other. You can view this as a massless, rigid rod.\n *\n * @param {DistanceJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchorA Anchor A in global coordination.\n * @param {Vec2} anchorB Anchor B in global coordination.\n */\nfunction DistanceJoint(def, bodyA, bodyB, anchorA, anchorB) {\n  if (!(this instanceof DistanceJoint)) {\n    return new DistanceJoint(def, bodyA, bodyB, anchorA, anchorB);\n  }\n\n  // order of constructor arguments is changed in v0.2\n  if (bodyB && anchorA && ('m_type' in anchorA) && ('x' in bodyB) && ('y' in bodyB)) {\n    var temp = bodyB;\n    bodyB = anchorA;\n    anchorA = temp;\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = DistanceJoint.TYPE;\n\n  // Solver shared\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.zero();\n  this.m_length = Math.isFinite(def.length) ? def.length :\n    Vec2.distance(bodyA.getWorldPoint(this.m_localAnchorA), bodyB.getWorldPoint(this.m_localAnchorB));\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n  this.m_impulse = 0.0;\n  this.m_gamma = 0.0;\n  this.m_bias = 0.0;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA;\n  this.m_invMassB;\n  this.m_invIA;\n  this.m_invIB;\n  this.m_mass;\n\n  // 1-D constrained system\n  // m (v2 - v1) = lambda\n  // v2 + (beta/h) * x1 + gamma * lambda = 0, gamma has units of inverse mass.\n  // x2 = x1 + h * v2\n\n  // 1-D mass-damper-spring system\n  // m (v2 - v1) + h * d * v2 + h * k *\n\n  // C = norm(p2 - p1) - L\n  // u = (p2 - p1) / norm(p2 - p1)\n  // Cdot = dot(u, v2 + cross(w2, r2) - v1 - cross(w1, r1))\n  // J = [-u -cross(r1, u) u cross(r2, u)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u)^2 + invMass2 + invI2 * cross(r2, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nDistanceJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nDistanceJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/get the natural length. Manipulating the length can lead to non-physical\n * behavior when the frequency is zero.\n */\nDistanceJoint.prototype.setLength = function(length) {\n  this.m_length = length;\n}\n\nDistanceJoint.prototype.getLength = function() {\n  return this.m_length;\n}\n\nDistanceJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nDistanceJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\nDistanceJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nDistanceJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nDistanceJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nDistanceJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nDistanceJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nDistanceJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nDistanceJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  this.m_u = Vec2.sub(Vec2.add(cB, this.m_rB), Vec2.add(cA, this.m_rA));\n\n  // Handle singularity.\n  var length = this.m_u.length();\n  if (length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / length);\n  } else {\n    this.m_u.set(0.0, 0.0);\n  }\n\n  var crAu = Vec2.cross(this.m_rA, this.m_u);\n  var crBu = Vec2.cross(this.m_rB, this.m_u);\n  var invMass = this.m_invMassA + this.m_invIA * crAu * crAu + this.m_invMassB\n      + this.m_invIB * crBu * crBu;\n\n  // Compute the effective mass matrix.\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C = length - this.m_length;\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n    // Damping coefficient\n    var d = 2.0 * this.m_mass * this.m_dampingRatio * omega;\n\n    // Spring stiffness\n    var k = this.m_mass * omega * omega;\n\n    // magic formulas\n    var h = step.dt;\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invMass += this.m_gamma;\n    this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n  } else {\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n  var Cdot = Vec2.dot(this.m_u, vpB) - Vec2.dot(this.m_u, vpA);\n\n  var impulse = -this.m_mass\n      * (Cdot + this.m_bias + this.m_gamma * this.m_impulse);\n  this.m_impulse += impulse;\n\n  var P = Vec2.mul(impulse, this.m_u);\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nDistanceJoint.prototype.solvePositionConstraints = function(step) {\n  if (this.m_frequencyHz > 0.0) {\n    // There is no position correction for soft distance constraints.\n    return true;\n  }\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.sub(Vec2.add(cB, rB), Vec2.add(cA, rA));\n\n  var length = u.normalize();\n  var C = length - this.m_length;\n  C = Math\n      .clamp(C, -Settings.maxLinearCorrection, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C;\n  var P = Vec2.mul(impulse, u);\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = FrictionJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nFrictionJoint.TYPE = 'friction-joint';\n\nFrictionJoint._super = Joint;\nFrictionJoint.prototype = create(FrictionJoint._super.prototype);\n\n/**\n * @typedef {Object} FrictionJointDef\n *\n * Friction joint definition.\n * \n * @prop {float} maxForce The maximum friction force in N.\n * @prop {float} maxTorque The maximum friction torque in N-m.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  maxTorque : 0.0,\n};\n\n/**\n * Friction joint. This is used for top-down friction. It provides 2D\n * translational friction and angular friction.\n *\n * @param {FrictionJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n * @param {Vec2} anchor Anchor in global coordination.\n */\nfunction FrictionJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof FrictionJoint)) {\n    return new FrictionJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = FrictionJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n\n  // Solver shared\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nFrictionJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nFrictionJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set the maximum friction force in N.\n */\nFrictionJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nFrictionJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nFrictionJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\nFrictionJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nFrictionJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nFrictionJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nFrictionJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nFrictionJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var K = new Mat22()\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var h = step.dt; // float\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA; // float\n    var impulse = -this.m_angularMass * Cdot; // float\n\n    var oldImpulse = this.m_angularImpulse; // float\n    var maxImpulse = h * this.m_maxTorque; // float\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.sub(Vec2.add(vB, Vec2.cross(wB, this.m_rB)), Vec2.add(vA,\n        Vec2.cross(wA, this.m_rA))); // Vec2\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot)); // Vec2\n    var oldImpulse = this.m_linearImpulse; // Vec2\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce; // float\n\n    if (this.m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {\n      this.m_linearImpulse.normalize();\n      this.m_linearImpulse.mul(maxImpulse);\n    }\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nFrictionJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = GearJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar RevoluteJoint = require('./RevoluteJoint');\nvar PrismaticJoint = require('./PrismaticJoint');\n\nGearJoint.TYPE = 'gear-joint';\n\nGearJoint._super = Joint;\nGearJoint.prototype = create(GearJoint._super.prototype);\n\n/**\n * @typedef {Object} GearJointDef\n *\n * Gear joint definition.\n *\n * @prop {float} ratio The gear ratio. See GearJoint for explanation.\n *\n * @prop {RevoluteJoint|PrismaticJoint} joint1 The first revolute/prismatic\n *          joint attached to the gear joint.\n * @prop {PrismaticJoint|RevoluteJoint} joint2 The second prismatic/revolute\n *          joint attached to the gear joint.\n */\n\nvar DEFAULTS = {\n  ratio : 1.0\n};\n\n/**\n * A gear joint is used to connect two joints together. Either joint can be a\n * revolute or prismatic joint. You specify a gear ratio to bind the motions\n * together: coordinate1 + ratio * coordinate2 = constant\n * \n * The ratio can be negative or positive. If one joint is a revolute joint and\n * the other joint is a prismatic joint, then the ratio will have units of\n * length or units of 1/length. Warning: You have to manually destroy the gear\n * joint if joint1 or joint2 is destroyed.\n * \n * This definition requires two existing revolute or prismatic joints (any\n * combination will work).\n *\n * @param {GearJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction GearJoint(def, bodyA, bodyB, joint1, joint2, ratio) {\n  if (!(this instanceof GearJoint)) {\n    return new GearJoint(def, bodyA, bodyB, joint1, joint2, ratio);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = GearJoint.TYPE;\n\n  _ASSERT && common.assert(joint1.m_type === RevoluteJoint.TYPE\n      || joint1.m_type === PrismaticJoint.TYPE);\n  _ASSERT && common.assert(joint2.m_type === RevoluteJoint.TYPE\n      || joint2.m_type === PrismaticJoint.TYPE);\n\n  this.m_joint1 = joint1 ? joint1 : def.joint1;\n  this.m_joint2 = joint2 ? joint2 : def.joint2;\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  this.m_type1 = this.m_joint1.getType();\n  this.m_type2 = this.m_joint2.getType();\n\n  // joint1 connects body A to body C\n  // joint2 connects body B to body D\n\n  var coordinateA, coordinateB; // float\n\n  // TODO_ERIN there might be some problem with the joint edges in Joint.\n\n  this.m_bodyC = this.m_joint1.getBodyA();\n  this.m_bodyA = this.m_joint1.getBodyB();\n\n  // Get geometry of joint1\n  var xfA = this.m_bodyA.m_xf;\n  var aA = this.m_bodyA.m_sweep.a;\n  var xfC = this.m_bodyC.m_xf;\n  var aC = this.m_bodyC.m_sweep.a;\n\n  if (this.m_type1 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint1;// RevoluteJoint\n    this.m_localAnchorC = revolute.m_localAnchorA;\n    this.m_localAnchorA = revolute.m_localAnchorB;\n    this.m_referenceAngleA = revolute.m_referenceAngle;\n    this.m_localAxisC = Vec2.zero();\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var prismatic = this.m_joint1; // PrismaticJoint\n    this.m_localAnchorC = prismatic.m_localAnchorA;\n    this.m_localAnchorA = prismatic.m_localAnchorB;\n    this.m_referenceAngleA = prismatic.m_referenceAngle;\n    this.m_localAxisC = prismatic.m_localXAxisA;\n\n    var pC = this.m_localAnchorC;\n    var pA = Rot.mulTVec2(xfC.q, Vec2.add(Rot.mul(xfA.q, this.m_localAnchorA), Vec2.sub(xfA.p, xfC.p)));\n    coordinateA = Vec2.dot(pA, this.m_localAxisC) - Vec2.dot(pC, this.m_localAxisC);\n  }\n\n  this.m_bodyD = this.m_joint2.getBodyA();\n  this.m_bodyB = this.m_joint2.getBodyB();\n\n  // Get geometry of joint2\n  var xfB = this.m_bodyB.m_xf;\n  var aB = this.m_bodyB.m_sweep.a;\n  var xfD = this.m_bodyD.m_xf;\n  var aD = this.m_bodyD.m_sweep.a;\n\n  if (this.m_type2 === RevoluteJoint.TYPE) {\n    var revolute = this.m_joint2; // RevoluteJoint\n    this.m_localAnchorD = revolute.m_localAnchorA;\n    this.m_localAnchorB = revolute.m_localAnchorB;\n    this.m_referenceAngleB = revolute.m_referenceAngle;\n    this.m_localAxisD = Vec2.zero();\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var prismatic = this.m_joint2; // PrismaticJoint\n    this.m_localAnchorD = prismatic.m_localAnchorA;\n    this.m_localAnchorB = prismatic.m_localAnchorB;\n    this.m_referenceAngleB = prismatic.m_referenceAngle;\n    this.m_localAxisD = prismatic.m_localXAxisA;\n\n    var pD = this.m_localAnchorD;\n    var pB = Rot.mulTVec2(xfD.q, Vec2.add(Rot.mul(xfB.q, this.m_localAnchorB), Vec2.sub(xfB.p, xfD.p)));\n    coordinateB = Vec2.dot(pB, this.m_localAxisD) - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  this.m_constant = coordinateA + this.m_ratio * coordinateB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_lcA, this.m_lcB, this.m_lcC, this.m_lcD; // Vec2\n  this.m_mA, this.m_mB, this.m_mC, this.m_mD; // float\n  this.m_iA, this.m_iB, this.m_iC, this.m_iD; // float\n  this.m_JvAC, this.m_JvBD; // Vec2\n  this.m_JwA, this.m_JwB, this.m_JwC, this.m_JwD; // float\n  this.m_mass; // float\n\n  // Gear Joint:\n  // C0 = (coordinate1 + ratio * coordinate2)_initial\n  // C = (coordinate1 + ratio * coordinate2) - C0 = 0\n  // J = [J1 ratio * J2]\n  // K = J * invM * JT\n  // = J1 * invM1 * J1T + ratio * ratio * J2 * invM2 * J2T\n  //\n  // Revolute:\n  // coordinate = rotation\n  // Cdot = angularVelocity\n  // J = [0 0 1]\n  // K = J * invM * JT = invI\n  //\n  // Prismatic:\n  // coordinate = dot(p - pg, ug)\n  // Cdot = dot(v + cross(w, r), ug)\n  // J = [ug cross(r, ug)]\n  // K = J * invM * JT = invMass + invI * cross(r, ug)^2\n};\n\n/**\n * Get the first joint.\n */\nGearJoint.prototype.getJoint1 = function() {\n  return this.m_joint1;\n}\n\n/**\n * Get the second joint.\n */\nGearJoint.prototype.getJoint2 = function() {\n  return this.m_joint2;\n}\n\n/**\n * Set/Get the gear ratio.\n */\nGearJoint.prototype.setRatio = function(ratio) {\n  _ASSERT && common.assert(Math.isFinite(ratio));\n  this.m_ratio = ratio;\n}\n\nGearJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\nGearJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nGearJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nGearJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_JvAC).mul(inv_dt);\n}\n\nGearJoint.prototype.getReactionTorque = function(inv_dt) {\n  var L = this.m_impulse * this.m_JwA; // float\n  return inv_dt * L;\n}\n\nGearJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_lcA = this.m_bodyA.m_sweep.localCenter;\n  this.m_lcB = this.m_bodyB.m_sweep.localCenter;\n  this.m_lcC = this.m_bodyC.m_sweep.localCenter;\n  this.m_lcD = this.m_bodyD.m_sweep.localCenter;\n  this.m_mA = this.m_bodyA.m_invMass;\n  this.m_mB = this.m_bodyB.m_invMass;\n  this.m_mC = this.m_bodyC.m_invMass;\n  this.m_mD = this.m_bodyD.m_invMass;\n  this.m_iA = this.m_bodyA.m_invI;\n  this.m_iB = this.m_bodyB.m_invI;\n  this.m_iC = this.m_bodyC.m_invI;\n  this.m_iD = this.m_bodyD.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var aC = this.m_bodyC.c_position.a;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n\n  var aD = this.m_bodyD.c_position.a;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  this.m_mass = 0.0;\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    this.m_JvAC = Vec2.zero();\n    this.m_JwA = 1.0;\n    this.m_JwC = 1.0;\n    this.m_mass += this.m_iA + this.m_iC;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    this.m_JvAC = u;\n    this.m_JwC = Vec2.cross(rC, u);\n    this.m_JwA = Vec2.cross(rA, u);\n    this.m_mass += this.m_mC + this.m_mA + this.m_iC * this.m_JwC * this.m_JwC + this.m_iA * this.m_JwA * this.m_JwA;\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    this.m_JvBD = Vec2.zero();\n    this.m_JwB = this.m_ratio;\n    this.m_JwD = this.m_ratio;\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD); // Vec2\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD); // Vec2\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB); // Vec2\n    this.m_JvBD = Vec2.mul(this.m_ratio, u);\n    this.m_JwD = this.m_ratio * Vec2.cross(rD, u);\n    this.m_JwB = this.m_ratio * Vec2.cross(rB, u);\n    this.m_mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD * this.m_JwD * this.m_JwD + this.m_iB * this.m_JwB * this.m_JwB;\n  }\n\n  // Compute effective mass.\n  this.m_mass = this.m_mass > 0.0 ? 1.0 / this.m_mass : 0.0;\n\n  if (step.warmStarting) {\n    vA.addMul(this.m_mA * this.m_impulse, this.m_JvAC);\n    wA += this.m_iA * this.m_impulse * this.m_JwA;\n    \n    vB.addMul(this.m_mB * this.m_impulse, this.m_JvBD);\n    wB += this.m_iB * this.m_impulse * this.m_JwB;\n    \n    vC.subMul(this.m_mC * this.m_impulse, this.m_JvAC);\n    wC -= this.m_iC * this.m_impulse * this.m_JwC;\n  \n    vD.subMul(this.m_mD * this.m_impulse, this.m_JvBD);\n    wD -= this.m_iD * this.m_impulse * this.m_JwD;\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n  var vC = this.m_bodyC.c_velocity.v;\n  var wC = this.m_bodyC.c_velocity.w;\n  var vD = this.m_bodyD.c_velocity.v;\n  var wD = this.m_bodyD.c_velocity.w;\n\n  var Cdot = Vec2.dot(this.m_JvAC, vA) - Vec2.dot(this.m_JvAC, vC)\n      + Vec2.dot(this.m_JvBD, vB) - Vec2.dot(this.m_JvBD, vD); // float\n  Cdot += (this.m_JwA * wA - this.m_JwC * wC)\n      + (this.m_JwB * wB - this.m_JwD * wD);\n\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  vA.addMul(this.m_mA * impulse, this.m_JvAC);\n  wA += this.m_iA * impulse * this.m_JwA;\n  vB.addMul(this.m_mB * impulse, this.m_JvBD);\n  wB += this.m_iB * impulse * this.m_JwB;\n  vC.subMul(this.m_mC * impulse, this.m_JvAC);\n  wC -= this.m_iC * impulse * this.m_JwC;\n  vD.subMul(this.m_mD * impulse, this.m_JvBD);\n  wD -= this.m_iD * impulse * this.m_JwD;\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n  this.m_bodyC.c_velocity.v.set(vC);\n  this.m_bodyC.c_velocity.w = wC;\n  this.m_bodyD.c_velocity.v.set(vD);\n  this.m_bodyD.c_velocity.w = wD;\n}\n\nGearJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var cC = this.m_bodyC.c_position.c;\n  var aC = this.m_bodyC.c_position.a;\n  var cD = this.m_bodyD.c_position.c;\n  var aD = this.m_bodyD.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n  var qC = Rot.neo(aC);\n  var qD = Rot.neo(aD);\n\n  var linearError = 0.0; // float\n\n  var coordinateA, coordinateB; // float\n\n  var JvAC, JvBD; // Vec2\n  var JwA, JwB, JwC, JwD; // float\n  var mass = 0.0; // float\n\n  if (this.m_type1 == RevoluteJoint.TYPE) {\n    JvAC = Vec2.zero();\n    JwA = 1.0;\n    JwC = 1.0;\n    mass += this.m_iA + this.m_iC;\n\n    coordinateA = aA - aC - this.m_referenceAngleA;\n  } else {\n    var u = Rot.mulVec2(qC, this.m_localAxisC); // Vec2\n    var rC = Rot.mulSub(qC, this.m_localAnchorC, this.m_lcC); // Vec2\n    var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_lcA); // Vec2\n    JvAC = u;\n    JwC = Vec2.cross(rC, u);\n    JwA = Vec2.cross(rA, u);\n    mass += this.m_mC + this.m_mA + this.m_iC * JwC * JwC + this.m_iA * JwA * JwA;\n\n    var pC = Vec2.sub(this.m_localAnchorC, this.m_lcC); // Vec2\n    var pA = Rot.mulTVec2(qC, Vec2.add(rA, Vec2.sub(cA, cC))); // Vec2\n    coordinateA = Vec2.dot(Vec2.sub(pA, pC), this.m_localAxisC);\n  }\n\n  if (this.m_type2 == RevoluteJoint.TYPE) {\n    JvBD = Vec2.zero();\n    JwB = this.m_ratio;\n    JwD = this.m_ratio;\n    mass += this.m_ratio * this.m_ratio * (this.m_iB + this.m_iD);\n\n    coordinateB = aB - aD - this.m_referenceAngleB;\n  } else {\n    var u = Rot.mulVec2(qD, this.m_localAxisD);\n    var rD = Rot.mulSub(qD, this.m_localAnchorD, this.m_lcD);\n    var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_lcB);\n    JvBD = Vec2.mul(this.m_ratio, u);\n    JwD = this.m_ratio * Vec2.cross(rD, u);\n    JwB = this.m_ratio * Vec2.cross(rB, u);\n    mass += this.m_ratio * this.m_ratio * (this.m_mD + this.m_mB) + this.m_iD\n        * JwD * JwD + this.m_iB * JwB * JwB;\n\n    var pD = Vec2.sub(this.m_localAnchorD, this.m_lcD); // Vec2\n    var pB = Rot.mulTVec2(qD, Vec2.add(rB, Vec2.sub(cB, cD))); // Vec2\n    coordinateB = Vec2.dot(pB, this.m_localAxisD)\n        - Vec2.dot(pD, this.m_localAxisD);\n  }\n\n  var C = (coordinateA + this.m_ratio * coordinateB) - this.m_constant; // float\n\n  var impulse = 0.0; // float\n  if (mass > 0.0) {\n    impulse = -C / mass;\n  }\n\n  cA.addMul(this.m_mA * impulse, JvAC);\n  aA += this.m_iA * impulse * JwA;\n  cB.addMul(this.m_mB * impulse, JvBD);\n  aB += this.m_iB * impulse * JwB;\n  cC.subMul(this.m_mC * impulse, JvAC);\n  aC -= this.m_iC * impulse * JwC;\n  cD.subMul(this.m_mD * impulse, JvBD);\n  aD -= this.m_iD * impulse * JwD;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n  this.m_bodyC.c_position.c.set(cC);\n  this.m_bodyC.c_position.a = aC;\n  this.m_bodyD.c_position.c.set(cD);\n  this.m_bodyD.c_position.a = aD;\n\n  // TODO_ERIN not implemented\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MotorJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMotorJoint.TYPE = 'motor-joint';\n\nMotorJoint._super = Joint;\nMotorJoint.prototype = create(MotorJoint._super.prototype);\n\n/**\n * @typedef {Object} MotorJointDef\n *\n * Motor joint definition.\n * \n * @prop {float} angularOffset The bodyB angle minus bodyA angle in radians.\n * @prop {float} maxForce The maximum motor force in N.\n * @prop {float} maxTorque The maximum motor torque in N-m.\n * @prop {float} correctionFactor Position correction factor in the range [0,1].\n * @prop {Vec2} linearOffset Position of bodyB minus the position of bodyA, in\n *       bodyA's frame, in meters.\n */\n\nvar DEFAULTS = {\n  maxForce : 1.0,\n  maxTorque : 1.0,\n  correctionFactor : 0.3\n};\n\n/**\n * A motor joint is used to control the relative motion between two bodies. A\n * typical usage is to control the movement of a dynamic body with respect to\n * the ground.\n *\n * @param {MotorJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MotorJoint(def, bodyA, bodyB) {\n  if (!(this instanceof MotorJoint)) {\n    return new MotorJoint(def, bodyA, bodyB);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MotorJoint.TYPE;\n\n  this.m_linearOffset = def.linearOffset ? def.linearOffset : bodyA.getLocalPoint(bodyB.getPosition());\n\n  var angleA = bodyA.getAngle();\n  var angleB = bodyB.getAngle();\n  this.m_angularOffset = angleB - angleA;\n\n  this.m_linearImpulse = Vec2.zero();\n  this.m_angularImpulse = 0.0;\n\n  this.m_maxForce = def.maxForce;\n  this.m_maxTorque = def.maxTorque;\n  this.m_correctionFactor = def.correctionFactor;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_linearError; // Vec2\n  this.m_angularError; // float\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_linearMass; // Mat22\n  this.m_angularMass; // float\n\n  // Point-to-point constraint\n  // Cdot = v2 - v1\n  // = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * Set the maximum friction force in N.\n */\nMotorJoint.prototype.setMaxForce = function(force) {\n  _ASSERT && common.assert(Math.isFinite(force) && force >= 0.0);\n  this.m_maxForce = force;\n}\n\n/**\n * Get the maximum friction force in N.\n */\nMotorJoint.prototype.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set the maximum friction torque in N*m.\n */\nMotorJoint.prototype.setMaxTorque = function(torque) {\n  _ASSERT && common.assert(Math.isFinite(torque) && torque >= 0.0);\n  this.m_maxTorque = torque;\n}\n\n/**\n * Get the maximum friction torque in N*m.\n */\nMotorJoint.prototype.getMaxTorque = function() {\n  return this.m_maxTorque;\n}\n\n/**\n * Set the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.setCorrectionFactor = function(factor) {\n  _ASSERT && common.assert(Math.isFinite(factor) && 0.0 <= factor && factor <= 1.0);\n  this.m_correctionFactor = factor;\n}\n\n/**\n * Get the position correction factor in the range [0,1].\n */\nMotorJoint.prototype.getCorrectionFactor = function() {\n  return this.m_correctionFactor;\n}\n\n/**\n * Set/get the target linear offset, in frame A, in meters.\n */\nMotorJoint.prototype.setLinearOffset = function(linearOffset) {\n  if (linearOffset.x != this.m_linearOffset.x\n      || linearOffset.y != this.m_linearOffset.y) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_linearOffset = linearOffset;\n  }\n}\n\nMotorJoint.prototype.getLinearOffset = function() {\n  return this.m_linearOffset;\n}\n\n/**\n * Set/get the target angular offset, in radians.\n */\nMotorJoint.prototype.setAngularOffset = function(angularOffset) {\n  if (angularOffset != this.m_angularOffset) {\n    this.m_bodyA.setAwake(true);\n    this.m_bodyB.setAwake(true);\n    this.m_angularOffset = angularOffset;\n  }\n}\n\nMotorJoint.prototype.getAngularOffset = function() {\n  return this.m_angularOffset;\n}\n\nMotorJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getPosition();\n}\n\nMotorJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getPosition();\n}\n\nMotorJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_linearImpulse);\n}\n\nMotorJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_angularImpulse;\n}\n\nMotorJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  // Compute the effective mass matrix.\n  this.m_rA = Rot.mulVec2(qA, Vec2.neg(this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.neg(this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB;\n  var iA = this.m_invIA;\n  var iB = this.m_invIB;\n\n  var K = new Mat22();\n  K.ex.x = mA + mB + iA * this.m_rA.y * this.m_rA.y + iB * this.m_rB.y\n      * this.m_rB.y;\n  K.ex.y = -iA * this.m_rA.x * this.m_rA.y - iB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = mA + mB + iA * this.m_rA.x * this.m_rA.x + iB * this.m_rB.x\n      * this.m_rB.x;\n\n  this.m_linearMass = K.getInverse();\n\n  this.m_angularMass = iA + iB;\n  if (this.m_angularMass > 0.0) {\n    this.m_angularMass = 1.0 / this.m_angularMass;\n  }\n\n  this.m_linearError = Vec2.zero();\n  this.m_linearError.addCombine(1, cB, 1, this.m_rB);\n  this.m_linearError.subCombine(1, cA, 1, this.m_rA);\n  this.m_linearError.sub(Rot.mulVec2(qA, this.m_linearOffset));\n\n  this.m_angularError = aB - aA - this.m_angularOffset;\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_linearImpulse.mul(step.dtRatio);\n    this.m_angularImpulse *= step.dtRatio;\n\n    var P = Vec2.neo(this.m_linearImpulse.x, this.m_linearImpulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_angularImpulse);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_angularImpulse);\n\n  } else {\n    this.m_linearImpulse.setZero();\n    this.m_angularImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA, mB = this.m_invMassB;\n  var iA = this.m_invIA, iB = this.m_invIB;\n\n  var h = step.dt;\n  var inv_h = step.inv_dt;\n\n  // Solve angular friction\n  {\n    var Cdot = wB - wA + inv_h * this.m_correctionFactor * this.m_angularError;\n    var impulse = -this.m_angularMass * Cdot;\n\n    var oldImpulse = this.m_angularImpulse;\n    var maxImpulse = h * this.m_maxTorque;\n    this.m_angularImpulse = Math.clamp(this.m_angularImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_angularImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve linear friction\n  {\n    var Cdot = Vec2.zero();\n    Cdot.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA));\n    Cdot.addMul(inv_h * this.m_correctionFactor, this.m_linearError);\n\n    var impulse = Vec2.neg(Mat22.mulVec2(this.m_linearMass, Cdot));\n    var oldImpulse = Vec2.clone(this.m_linearImpulse);\n    this.m_linearImpulse.add(impulse);\n\n    var maxImpulse = h * this.m_maxForce;\n\n    this.m_linearImpulse.clamp(maxImpulse);\n\n    impulse = Vec2.sub(this.m_linearImpulse, oldImpulse);\n\n    vA.subMul(mA, impulse);\n    wA -= iA * Vec2.cross(this.m_rA, impulse);\n\n    vB.addMul(mB, impulse);\n    wB += iB * Vec2.cross(this.m_rB, impulse);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nMotorJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = MouseJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nMouseJoint.TYPE = 'mouse-joint';\n\nMouseJoint._super = Joint;\nMouseJoint.prototype = create(MouseJoint._super.prototype);\n\n/**\n * @typedef {Object} MouseJointDef\n *\n * Mouse joint definition. This requires a world target point, tuning\n * parameters, and the time step.\n * \n * @prop [maxForce = 0.0] The maximum constraint force that can be exerted to\n *       move the candidate body. Usually you will express as some multiple of\n *       the weight (multiplier * mass * gravity).\n * @prop [frequencyHz = 5.0] The response speed.\n * @prop [dampingRatio = 0.7] The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} target The initial world target point. This is assumed to\n *       coincide with the body anchor initially.\n */\n\nvar DEFAULTS = {\n  maxForce : 0.0,\n  frequencyHz : 5.0,\n  dampingRatio : 0.7\n};\n\n/**\n * A mouse joint is used to make a point on a body track a specified world\n * point. This a soft constraint with a maximum force. This allows the\n * constraint to stretch and without applying huge forces.\n * \n * NOTE: this joint is not documented in the manual because it was developed to\n * be used in the testbed. If you want to learn how to use the mouse joint, look\n * at the testbed.\n *\n * @param {MouseJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction MouseJoint(def, bodyA, bodyB, target) {\n  if (!(this instanceof MouseJoint)) {\n    return new MouseJoint(def, bodyA, bodyB, target);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = MouseJoint.TYPE;\n\n  _ASSERT && common.assert(Math.isFinite(def.maxForce) && def.maxForce >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.frequencyHz) && def.frequencyHz >= 0.0);\n  _ASSERT && common.assert(Math.isFinite(def.dampingRatio) && def.dampingRatio >= 0.0);\n\n  this.m_targetA = target ? Vec2.clone(target) : def.target || Vec2.zero();\n  this.m_localAnchorB = Transform.mulTVec2(bodyB.getTransform(), this.m_targetA);\n\n  this.m_maxForce = def.maxForce;\n  this.m_impulse = Vec2.zero();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_beta = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rB = Vec2.zero();\n  this.m_localCenterB = Vec2.zero();\n  this.m_invMassB = 0.0;\n  this.m_invIB = 0.0;\n  this.mass = new Mat22()\n  this.m_C = Vec2.zero();\n\n  // p = attached point, m = mouse point\n  // C = p - m\n  // Cdot = v\n  // = v + cross(w, r)\n  // J = [I r_skew]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n}\n\n/**\n * Use this to update the target point.\n */\nMouseJoint.prototype.setTarget = function(target) {\n  if (this.m_bodyB.isAwake() == false) {\n    this.m_bodyB.setAwake(true);\n  }\n  this.m_targetA = Vec2.clone(target);\n}\n\nMouseJoint.prototype.getTarget = function() {\n  return this.m_targetA;\n}\n\n/**\n * Set/get the maximum force in Newtons.\n */\nMouseJoint.prototype.setMaxForce = function(force) {\n  this.m_maxForce = force;\n}\n\nMouseJoint.getMaxForce = function() {\n  return this.m_maxForce;\n}\n\n/**\n * Set/get the frequency in Hertz.\n */\nMouseJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nMouseJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/get the damping ratio (dimensionless).\n */\nMouseJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nMouseJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nMouseJoint.prototype.getAnchorA = function() {\n  return Vec2.clone(this.m_targetA);\n}\n\nMouseJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nMouseJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(inv_dt, this.m_impulse);\n}\n\nMouseJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * 0.0;\n}\n\nMouseJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_targetA.sub(newOrigin);\n}\n\nMouseJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var position = this.m_bodyB.c_position;\n  var velocity = this.m_bodyB.c_velocity;\n\n  var cB = position.c;\n  var aB = position.a;\n  var vB = velocity.v;\n  var wB = velocity.w;\n\n  var qB = Rot.neo(aB);\n\n  var mass = this.m_bodyB.getMass();\n\n  // Frequency\n  var omega = 2.0 * Math.PI * this.m_frequencyHz;\n\n  // Damping coefficient\n  var d = 2.0 * mass * this.m_dampingRatio * omega;\n\n  // Spring stiffness\n  var k = mass * (omega * omega);\n\n  // magic formulas\n  // gamma has units of inverse mass.\n  // beta has units of inverse time.\n  var h = step.dt;\n  _ASSERT && common.assert(d + h * k > Math.EPSILON);\n  this.m_gamma = h * (d + h * k);\n  if (this.m_gamma != 0.0) {\n    this.m_gamma = 1.0 / this.m_gamma;\n  }\n  this.m_beta = h * k * this.m_gamma;\n\n  // Compute the effective mass matrix.\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // K = [(1/m1 + 1/m2) * eye(2) - skew(r1) * invI1 * skew(r1) - skew(r2) *\n  // invI2 * skew(r2)]\n  // = [1/m1+1/m2 0 ] + invI1 * [r1.y*r1.y -r1.x*r1.y] + invI2 * [r1.y*r1.y\n  // -r1.x*r1.y]\n  // [ 0 1/m1+1/m2] [-r1.x*r1.y r1.x*r1.x] [-r1.x*r1.y r1.x*r1.x]\n  var K = new Mat22();\n  K.ex.x = this.m_invMassB + this.m_invIB * this.m_rB.y * this.m_rB.y\n      + this.m_gamma;\n  K.ex.y = -this.m_invIB * this.m_rB.x * this.m_rB.y;\n  K.ey.x = K.ex.y;\n  K.ey.y = this.m_invMassB + this.m_invIB * this.m_rB.x * this.m_rB.x\n      + this.m_gamma;\n\n  this.m_mass = K.getInverse();\n\n  this.m_C.set(cB);\n  this.m_C.addCombine(1, this.m_rB, -1, this.m_targetA);\n  this.m_C.mul(this.m_beta);\n\n  // Cheat with some damping\n  wB *= 0.98;\n\n  if (step.warmStarting) {\n    this.m_impulse.mul(step.dtRatio);\n    vB.addMul(this.m_invMassB, this.m_impulse);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, this.m_impulse);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solveVelocityConstraints = function(step) {\n  var velocity = this.m_bodyB.c_velocity;\n  var vB = Vec2.clone(velocity.v);\n  var wB = velocity.w;\n\n  // Cdot = v + cross(w, r)\n\n  var Cdot = Vec2.cross(wB, this.m_rB);\n  Cdot.add(vB);\n\n  Cdot.addCombine(1, this.m_C, this.m_gamma, this.m_impulse);\n  Cdot.neg();\n\n  var impulse = Mat22.mulVec2(this.m_mass, Cdot);\n\n  var oldImpulse = Vec2.clone(this.m_impulse);\n  this.m_impulse.add(impulse);\n  var maxImpulse = step.dt * this.m_maxForce;\n  this.m_impulse.clamp(maxImpulse);\n  impulse = Vec2.sub(this.m_impulse, oldImpulse);\n\n  vB.addMul(this.m_invMassB, impulse);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, impulse);\n\n  velocity.v.set(vB);\n  velocity.w = wB;\n}\n\nMouseJoint.prototype.solvePositionConstraints = function(step) {\n  return true;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = PulleyJoint;\n\nvar common = require('../util/common');\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nPulleyJoint.TYPE = 'pulley-joint';\nPulleyJoint.MIN_PULLEY_LENGTH = 2.0; // minPulleyLength\n\nPulleyJoint._super = Joint;\nPulleyJoint.prototype = create(PulleyJoint._super.prototype);\n\n/**\n * @typedef {Object} PulleyJointDef\n *\n * Pulley joint definition. This requires two ground anchors, two dynamic body\n * anchor points, and a pulley ratio.\n *\n * @prop {Vec2} groundAnchorA The first ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} groundAnchorB The second ground anchor in world coordinates.\n *          This point never moves.\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} ratio The pulley ratio, used to simulate a block-and-tackle.\n * @prop {float} lengthA The reference length for the segment attached to bodyA.\n * @prop {float} lengthB The reference length for the segment attached to bodyB.\n */\nvar PulleyJointDef = {\n  collideConnected : true\n};\n\n/**\n * The pulley joint is connected to two bodies and two fixed ground points. The\n * pulley supports a ratio such that: length1 + ratio * length2 <= constant\n * \n * Yes, the force transmitted is scaled by the ratio.\n * \n * Warning: the pulley joint can get a bit squirrelly by itself. They often work\n * better when combined with prismatic joints. You should also cover the the\n * anchor points with static shapes to prevent one side from going to zero\n * length.\n *\n * @param {PulleyJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio) {\n  if (!(this instanceof PulleyJoint)) {\n    return new PulleyJoint(def, bodyA, bodyB, groundA, groundB, anchorA, anchorB, ratio);\n  }\n\n  def = options(def, PulleyJointDef);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = PulleyJoint.TYPE;\n  this.m_groundAnchorA = groundA ? groundA : def.groundAnchorA || Vec2.neo(-1.0, 1.0);\n  this.m_groundAnchorB = groundB ? groundB : def.groundAnchorB || Vec2.neo(1.0, 1.0);\n  this.m_localAnchorA = anchorA ? bodyA.getLocalPoint(anchorA) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchorB ? bodyB.getLocalPoint(anchorB) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n  this.m_lengthA = Math.isFinite(def.lengthA) ? def.lengthA : Vec2.distance(anchorA, groundA);\n  this.m_lengthB = Math.isFinite(def.lengthB) ? def.lengthB : Vec2.distance(anchorB, groundB);\n  this.m_ratio = Math.isFinite(ratio) ? ratio : def.ratio;\n\n  _ASSERT && common.assert(ratio > Math.EPSILON);\n\n  this.m_constant = this.m_lengthA + this.m_ratio * this.m_lengthB;\n\n  this.m_impulse = 0.0;\n\n  // Solver temp\n  this.m_uA; // Vec2\n  this.m_uB; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Pulley:\n  // length1 = norm(p1 - s1)\n  // length2 = norm(p2 - s2)\n  // C0 = (length1 + ratio * length2)_initial\n  // C = C0 - (length1 + ratio * length2)\n  // u1 = (p1 - s1) / norm(p1 - s1)\n  // u2 = (p2 - s2) / norm(p2 - s2)\n  // Cdot = -dot(u1, v1 + cross(w1, r1)) - ratio * dot(u2, v2 + cross(w2, r2))\n  // J = -[u1 cross(r1, u1) ratio * u2 ratio * cross(r2, u2)]\n  // K = J * invM * JT\n  // = invMass1 + invI1 * cross(r1, u1)^2 + ratio^2 * (invMass2 + invI2 *\n  // cross(r2, u2)^2)\n}\n\n/**\n * Get the first ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorA = function() {\n  return this.m_groundAnchorA;\n}\n\n/**\n * Get the second ground anchor.\n */\nPulleyJoint.prototype.getGroundAnchorB = function() {\n  return this.m_groundAnchorB;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getLengthA = function() {\n  return this.m_lengthA;\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getLengthB = function() {\n  return this.m_lengthB;\n}\n\n/**\n * Get the pulley ratio.\n */\nPulleyJoint.prototype.getRatio = function() {\n  return this.m_ratio;\n}\n\n/**\n * Get the current length of the segment attached to bodyA.\n */\nPulleyJoint.prototype.getCurrentLengthA = function() {\n  var p = this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n  var s = this.m_groundAnchorA;\n  return Vec2.distance(p, s);\n}\n\n/**\n * Get the current length of the segment attached to bodyB.\n */\nPulleyJoint.prototype.getCurrentLengthB = function() {\n  var p = this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n  var s = this.m_groundAnchorB;\n  return Vec2.distance(p, s);\n}\n\nPulleyJoint.prototype.shiftOrigin = function(newOrigin) {\n  this.m_groundAnchorA.sub(newOrigin);\n  this.m_groundAnchorB.sub(newOrigin);\n}\n\nPulleyJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nPulleyJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nPulleyJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_uB).mul(inv_dt);\n}\n\nPulleyJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nPulleyJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  this.m_uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  this.m_uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = this.m_uA.length();\n  var lengthB = this.m_uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    this.m_uA.mul(1.0 / lengthA);\n  } else {\n    this.m_uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    this.m_uB.mul(1.0 / lengthB);\n  } else {\n    this.m_uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(this.m_rA, this.m_uA); // float\n  var ruB = Vec2.cross(this.m_rB, this.m_uB); // float\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  this.m_mass = mA + this.m_ratio * this.m_ratio * mB;\n\n  if (this.m_mass > 0.0) {\n    this.m_mass = 1.0 / this.m_mass;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support variable time steps.\n    this.m_impulse *= step.dtRatio;\n\n    // Warm starting.\n    var PA = Vec2.mul(-this.m_impulse, this.m_uA);\n    var PB = Vec2.mul(-this.m_ratio * this.m_impulse, this.m_uB);\n\n    vA.addMul(this.m_invMassA, PA);\n    wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n\n    vB.addMul(this.m_invMassB, PB);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var vpA = Vec2.add(vA, Vec2.cross(wA, this.m_rA));\n  var vpB = Vec2.add(vB, Vec2.cross(wB, this.m_rB));\n\n  var Cdot = -Vec2.dot(this.m_uA, vpA) - this.m_ratio\n      * Vec2.dot(this.m_uB, vpB); // float\n  var impulse = -this.m_mass * Cdot; // float\n  this.m_impulse += impulse;\n\n  var PA = Vec2.mul(-impulse, this.m_uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, this.m_uB); // Vec2\n  vA.addMul(this.m_invMassA, PA);\n  wA += this.m_invIA * Vec2.cross(this.m_rA, PA);\n  vB.addMul(this.m_invMassB, PB);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, PB);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nPulleyJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // Get the pulley axes.\n  var uA = Vec2.sub(Vec2.add(cA, this.m_rA), this.m_groundAnchorA);\n  var uB = Vec2.sub(Vec2.add(cB, this.m_rB), this.m_groundAnchorB);\n\n  var lengthA = uA.length();\n  var lengthB = uB.length();\n\n  if (lengthA > 10.0 * Settings.linearSlop) {\n    uA.mul(1.0 / lengthA);\n  } else {\n    uA.setZero();\n  }\n\n  if (lengthB > 10.0 * Settings.linearSlop) {\n    uB.mul(1.0 / lengthB);\n  } else {\n    uB.setZero();\n  }\n\n  // Compute effective mass.\n  var ruA = Vec2.cross(rA, uA);\n  var ruB = Vec2.cross(rB, uB);\n\n  var mA = this.m_invMassA + this.m_invIA * ruA * ruA; // float\n  var mB = this.m_invMassB + this.m_invIB * ruB * ruB; // float\n\n  var mass = mA + this.m_ratio * this.m_ratio * mB; // float\n\n  if (mass > 0.0) {\n    mass = 1.0 / mass;\n  }\n\n  var C = this.m_constant - lengthA - this.m_ratio * lengthB; // float\n  var linearError = Math.abs(C); // float\n\n  var impulse = -mass * C; // float\n\n  var PA = Vec2.mul(-impulse, uA); // Vec2\n  var PB = Vec2.mul(-this.m_ratio * impulse, uB); // Vec2\n\n  cA.addMul(this.m_invMassA, PA);\n  aA += this.m_invIA * Vec2.cross(rA, PA);\n  cB.addMul(this.m_invMassB, PB);\n  aB += this.m_invIB * Vec2.cross(rB, PB);\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return linearError < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = RopeJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nvar inactiveLimit = 0;\nvar atLowerLimit = 1;\nvar atUpperLimit = 2;\nvar equalLimits = 3;\n\nRopeJoint.TYPE = 'rope-joint';\n\nRopeJoint._super = Joint;\nRopeJoint.prototype = create(RopeJoint._super.prototype);\n\n/**\n * @typedef {Object} RopeJointDef\n *\n * Rope joint definition. This requires two body anchor points and a maximum\n * lengths. Note: by default the connected objects will not collide. see\n * collideConnected in JointDef.\n *\n * @prop {float} maxLength The maximum length of the rope. Warning: this must be\n *       larger than linearSlop or the joint will have no effect.\n *\n * @prop {Vec2} def.localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} def.localAnchorB The local anchor point relative to bodyB's origin.\n */\n\nvar DEFAULTS = {\n  maxLength : 0.0,\n};\n\n/**\n * A rope joint enforces a maximum distance between two points on two bodies. It\n * has no other effect.\n * \n * Warning: if you attempt to change the maximum length during the simulation\n * you will get some non-physical behavior.\n * \n * A model that would allow you to dynamically modify the length would have some\n * sponginess, so I chose not to implement it that way. See DistanceJoint if you\n * want to dynamically control length.\n *\n * @param {RopeJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction RopeJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof RopeJoint)) {\n    return new RopeJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = RopeJoint.TYPE;\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.neo(-1.0, 0.0);\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.neo(1.0, 0.0);\n\n  this.m_maxLength = def.maxLength;\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_length = 0.0;\n  this.m_state = inactiveLimit;\n\n  // Solver temp\n  this.m_u; // Vec2\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass; // float\n\n  // Limit:\n  // C = norm(pB - pA) - L\n  // u = (pB - pA) / norm(pB - pA)\n  // Cdot = dot(u, vB + cross(wB, rB) - vA - cross(wA, rA))\n  // J = [-u -cross(rA, u) u cross(rB, u)]\n  // K = J * invM * JT\n  // = invMassA + invIA * cross(rA, u)^2 + invMassB + invIB * cross(rB, u)^2\n};\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nRopeJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nRopeJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * Set/Get the maximum length of the rope.\n */\nRopeJoint.prototype.setMaxLength = function(length) {\n  this.m_maxLength = length;\n}\n\nRopeJoint.prototype.getMaxLength = function() {\n  return this.m_maxLength;\n}\n\nRopeJoint.prototype.getLimitState = function() {\n  // TODO LimitState\n  return this.m_state;\n}\n\nRopeJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nRopeJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nRopeJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.mul(this.m_impulse, this.m_u).mul(inv_dt);\n}\n\nRopeJoint.prototype.getReactionTorque = function(inv_dt) {\n  return 0.0;\n}\n\nRopeJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  this.m_rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  this.m_u = Vec2.zero();\n  this.m_u.addCombine(1, cB, 1, this.m_rB);\n  this.m_u.subCombine(1, cA, 1, this.m_rA); // Vec2\n\n  this.m_length = this.m_u.length();\n\n  var C = this.m_length - this.m_maxLength; // float\n  if (C > 0.0) {\n    this.m_state = atUpperLimit;\n  } else {\n    this.m_state = inactiveLimit;\n  }\n\n  if (this.m_length > Settings.linearSlop) {\n    this.m_u.mul(1.0 / this.m_length);\n  } else {\n    this.m_u.setZero();\n    this.m_mass = 0.0;\n    this.m_impulse = 0.0;\n    return;\n  }\n\n  // Compute effective mass.\n  var crA = Vec2.cross(this.m_rA, this.m_u); // float\n  var crB = Vec2.cross(this.m_rB, this.m_u); // float\n  var invMass = this.m_invMassA + this.m_invIA * crA * crA + this.m_invMassB\n      + this.m_invIB * crB * crB; // float\n\n  this.m_mass = invMass != 0.0 ? 1.0 / invMass : 0.0;\n\n  if (step.warmStarting) {\n    // Scale the impulse to support a variable time step.\n    this.m_impulse *= step.dtRatio;\n\n    var P = Vec2.mul(this.m_impulse, this.m_u);\n    \n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n    \n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n    \n  } else {\n    this.m_impulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Cdot = dot(u, v + cross(w, r))\n  var vpA = Vec2.addCross(vA, wA, this.m_rA); // Vec2\n  var vpB = Vec2.addCross(vB, wB, this.m_rB); // Vec2\n  var C = this.m_length - this.m_maxLength; // float\n  var Cdot = Vec2.dot(this.m_u, Vec2.sub(vpB, vpA)); // float\n\n  // Predictive constraint.\n  if (C < 0.0) {\n    Cdot += step.inv_dt * C;\n  }\n\n  var impulse = -this.m_mass * Cdot; // float\n  var oldImpulse = this.m_impulse; // float\n  this.m_impulse = Math.min(0.0, this.m_impulse + impulse);\n  impulse = this.m_impulse - oldImpulse;\n\n  var P = Vec2.mul(impulse, this.m_u); // Vec2\n  vA.subMul(this.m_invMassA, P);\n  wA -= this.m_invIA * Vec2.cross(this.m_rA, P);\n  vB.addMul(this.m_invMassB, P);\n  wB += this.m_invIB * Vec2.cross(this.m_rB, P);\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nRopeJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c; // Vec2\n  var aA = this.m_bodyA.c_position.a; // float\n  var cB = this.m_bodyB.c_position.c; // Vec2\n  var aB = this.m_bodyB.c_position.a; // float\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulSub(qA, this.m_localAnchorA, this.m_localCenterA);\n  var rB = Rot.mulSub(qB, this.m_localAnchorB, this.m_localCenterB);\n  var u = Vec2.zero();\n  u.addCombine(1, cB, 1, rB);\n  u.subCombine(1, cA, 1, rA); // Vec2\n\n  var length = u.normalize(); // float\n  var C = length - this.m_maxLength; // float\n\n  C = Math.clamp(C, 0.0, Settings.maxLinearCorrection);\n\n  var impulse = -this.m_mass * C; // float\n  var P = Vec2.mul(impulse, u); // Vec2\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * Vec2.cross(rA, P);\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * Vec2.cross(rB, P);\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return length - this.m_maxLength < Settings.linearSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WeldJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWeldJoint.TYPE = 'weld-joint';\n\nWeldJoint._super = Joint;\nWeldJoint.prototype = create(WeldJoint._super.prototype);\n\n/**\n * @typedef {Object} WeldJointDef\n *\n * Weld joint definition. You need to specify local anchor points where they are\n * attached and the relative body angle. The position of the anchor points is\n * important for computing the reaction torque.\n * \n * @prop {float} frequencyHz The mass-spring-damper frequency in Hertz. Rotation\n *       only. Disable softness with a value of 0.\n * @prop {float} dampingRatio The damping ratio. 0 = no damping, 1 = critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {float} referenceAngle The bodyB angle minus bodyA angle in the\n *       reference state (radians).\n */\nvar DEFAULTS = {\n  frequencyHz : 0.0,\n  dampingRatio : 0.0,\n}\n\n/**\n * A weld joint essentially glues two bodies together. A weld joint may distort\n * somewhat because the island constraint solver is approximate.\n *\n * @param {WeldJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WeldJoint(def, bodyA, bodyB, anchor) {\n  if (!(this instanceof WeldJoint)) {\n    return new WeldJoint(def, bodyA, bodyB, anchor);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WeldJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_referenceAngle = Math.isFinite(def.referenceAngle) ? def.referenceAngle : bodyB.getAngle() - bodyA.getAngle();\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_impulse = Vec3();\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_rA; // Vec2\n  this.m_rB; // Vec2\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n  this.m_mass = new Mat33();\n\n  // Point-to-point constraint\n  // C = p2 - p1\n  // Cdot = v2 - v1\n  // / = v2 + cross(w2, r2) - v1 - cross(w1, r1)\n  // J = [-I -r1_skew I r2_skew ]\n  // Identity used:\n  // w k % (rx i + ry j) = w * (-ry i + rx j)\n\n  // Angle constraint\n  // C = angle2 - angle1 - referenceAngle\n  // Cdot = w2 - w1\n  // J = [0 0 -1 0 0 1]\n  // K = invI1 + invI2\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWeldJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n};\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWeldJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n};\n\n/**\n * Get the reference angle.\n */\nWeldJoint.prototype.getReferenceAngle = function() {\n  return this.m_referenceAngle;\n};\n\n/**\n * Set/get frequency in Hz.\n */\nWeldJoint.prototype.setFrequency = function(hz) {\n  this.m_frequencyHz = hz;\n};\n\nWeldJoint.prototype.getFrequency = function() {\n  return this.m_frequencyHz;\n};\n\n/**\n * Set/get damping ratio.\n */\nWeldJoint.prototype.setDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n};\n\nWeldJoint.prototype.getDampingRatio = function() {\n  return this.m_dampingRatio;\n};\n\nWeldJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n};\n\nWeldJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n};\n\nWeldJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.neo(this.m_impulse.x, this.m_impulse.y).mul(inv_dt);\n};\n\nWeldJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_impulse.z;\n};\n\nWeldJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  this.m_rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  this.m_rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  // J = [-I -r1_skew I r2_skew]\n  // [ 0 -1 0 1]\n  // r_skew = [-ry; rx]\n\n  // Matlab\n  // K = [ mA+r1y^2*iA+mB+r2y^2*iB, -r1y*iA*r1x-r2y*iB*r2x, -r1y*iA-r2y*iB]\n  // [ -r1y*iA*r1x-r2y*iB*r2x, mA+r1x^2*iA+mB+r2x^2*iB, r1x*iA+r2x*iB]\n  // [ -r1y*iA-r2y*iB, r1x*iA+r2x*iB, iA+iB]\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + this.m_rA.y * this.m_rA.y * iA + this.m_rB.y * this.m_rB.y\n      * iB;\n  K.ey.x = -this.m_rA.y * this.m_rA.x * iA - this.m_rB.y * this.m_rB.x * iB;\n  K.ez.x = -this.m_rA.y * iA - this.m_rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + this.m_rA.x * this.m_rA.x * iA + this.m_rB.x * this.m_rB.x\n      * iB;\n  K.ez.y = this.m_rA.x * iA + this.m_rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    K.getInverse22(this.m_mass);\n\n    var invM = iA + iB; // float\n    var m = invM > 0.0 ? 1.0 / invM : 0.0; // float\n\n    var C = aB - aA - this.m_referenceAngle; // float\n\n    // Frequency\n    var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n    // Damping coefficient\n    var d = 2.0 * m * this.m_dampingRatio * omega; // float\n\n    // Spring stiffness\n    var k = m * omega * omega; // float\n\n    // magic formulas\n    var h = step.dt; // float\n    this.m_gamma = h * (d + h * k);\n    this.m_gamma = this.m_gamma != 0.0 ? 1.0 / this.m_gamma : 0.0;\n    this.m_bias = C * h * k * this.m_gamma;\n\n    invM += this.m_gamma;\n    this.m_mass.ez.z = invM != 0.0 ? 1.0 / invM : 0.0;\n  } else if (K.ez.z == 0.0) {\n    K.getInverse22(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  } else {\n    K.getSymInverse33(this.m_mass);\n    this.m_gamma = 0.0;\n    this.m_bias = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Scale impulses to support a variable time step.\n    this.m_impulse.mul(step.dtRatio);\n\n    var P = Vec2.neo(this.m_impulse.x, this.m_impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + this.m_impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + this.m_impulse.z);\n\n  } else {\n    this.m_impulse.setZero();\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solveVelocityConstraints = function(step) {\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  if (this.m_frequencyHz > 0.0) {\n    var Cdot2 = wB - wA; // float\n\n    var impulse2 = -this.m_mass.ez.z\n        * (Cdot2 + this.m_bias + this.m_gamma * this.m_impulse.z); // float\n    this.m_impulse.z += impulse2;\n\n    wA -= iA * impulse2;\n    wB += iB * impulse2;\n\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n\n    var impulse1 = Vec2.neg(Mat33.mulVec2(this.m_mass, Cdot1)); // Vec2\n    this.m_impulse.x += impulse1.x;\n    this.m_impulse.y += impulse1.y;\n\n    var P = Vec2.clone(impulse1); // Vec2\n\n    vA.subMul(mA, P);\n    wA -= iA * Vec2.cross(this.m_rA, P);\n\n    vB.addMul(mB, P);\n    wB += iB * Vec2.cross(this.m_rB, P);\n  } else {\n    var Cdot1 = Vec2.zero();\n    Cdot1.addCombine(1, vB, 1, Vec2.cross(wB, this.m_rB));\n    Cdot1.subCombine(1, vA, 1, Vec2.cross(wA, this.m_rA)); // Vec2\n    var Cdot2 = wB - wA; // float\n    var Cdot = Vec3(Cdot1.x, Cdot1.y, Cdot2); // Vec3\n\n    var impulse = Vec3.neg(Mat33.mulVec3(this.m_mass, Cdot)); // Vec3\n    this.m_impulse.add(impulse);\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    vA.subMul(mA, P);\n    wA -= iA * (Vec2.cross(this.m_rA, P) + impulse.z);\n\n    vB.addMul(mB, P);\n    wB += iB * (Vec2.cross(this.m_rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_velocity.v = vA;\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v = vB;\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWeldJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA), qB = Rot.neo(aB);\n\n  var mA = this.m_invMassA, mB = this.m_invMassB; // float\n  var iA = this.m_invIA, iB = this.m_invIB; // float\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n\n  var positionError, angularError; // float\n\n  var K = new Mat33();\n  K.ex.x = mA + mB + rA.y * rA.y * iA + rB.y * rB.y * iB;\n  K.ey.x = -rA.y * rA.x * iA - rB.y * rB.x * iB;\n  K.ez.x = -rA.y * iA - rB.y * iB;\n  K.ex.y = K.ey.x;\n  K.ey.y = mA + mB + rA.x * rA.x * iA + rB.x * rB.x * iB;\n  K.ez.y = rA.x * iA + rB.x * iB;\n  K.ex.z = K.ez.x;\n  K.ey.z = K.ez.y;\n  K.ez.z = iA + iB;\n\n  if (this.m_frequencyHz > 0.0) {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA); // Vec2\n\n    positionError = C1.length();\n    angularError = 0.0;\n\n    var P = Vec2.neg(K.solve22(C1)); // Vec2\n\n    cA.subMul(mA, P);\n    aA -= iA * Vec2.cross(rA, P);\n\n    cB.addMul(mB, P);\n    aB += iB * Vec2.cross(rB, P);\n  } else {\n    var C1 = Vec2.zero();\n    C1.addCombine(1, cB, 1, rB);\n    C1.subCombine(1, cA, 1, rA);\n\n    var C2 = aB - aA - this.m_referenceAngle; // float\n\n    positionError = C1.length();\n    angularError = Math.abs(C2);\n\n    var C = Vec3(C1.x, C1.y, C2);\n\n    var impulse = Vec3();\n    if (K.ez.z > 0.0) {\n      impulse = Vec3.neg(K.solve33(C));\n    } else {\n      var impulse2 = Vec2.neg(K.solve22(C1));\n      impulse.set(impulse2.x, impulse2.y, 0.0);\n    }\n\n    var P = Vec2.neo(impulse.x, impulse.y);\n\n    cA.subMul(mA, P);\n    aA -= iA * (Vec2.cross(rA, P) + impulse.z);\n\n    cB.addMul(mB, P);\n    aB += iB * (Vec2.cross(rB, P) + impulse.z);\n  }\n\n  this.m_bodyA.c_position.c = cA;\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c = cB;\n  this.m_bodyB.c_position.a = aB;\n\n  return positionError <= Settings.linearSlop\n      && angularError <= Settings.angularSlop;\n}\n","/*\n * Copyright (c) 2016-2018 Ali Shakiba http://shakiba.me/planck.js\n * Copyright (c) 2006-2011 Erin Catto  http://www.box2d.org\n *\n * This software is provided 'as-is', without any express or implied\n * warranty.  In no event will the authors be held liable for any damages\n * arising from the use of this software.\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n * 1. The origin of this software must not be misrepresented; you must not\n * claim that you wrote the original software. If you use this software\n * in a product, an acknowledgment in the product documentation would be\n * appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n * misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nvar _DEBUG = typeof DEBUG === 'undefined' ? false : DEBUG;\nvar _ASSERT = typeof ASSERT === 'undefined' ? false : ASSERT;\n\nmodule.exports = WheelJoint;\n\nvar options = require('../util/options');\nvar create = require('../util/create');\nvar Settings = require('../Settings');\n\nvar Math = require('../common/Math');\nvar Vec2 = require('../common/Vec2');\nvar Vec3 = require('../common/Vec3');\nvar Mat22 = require('../common/Mat22');\nvar Mat33 = require('../common/Mat33');\nvar Rot = require('../common/Rot');\nvar Sweep = require('../common/Sweep');\nvar Transform = require('../common/Transform');\nvar Velocity = require('../common/Velocity');\nvar Position = require('../common/Position');\n\nvar Joint = require('../Joint');\n\nWheelJoint.TYPE = 'wheel-joint';\n\nWheelJoint._super = Joint;\nWheelJoint.prototype = create(WheelJoint._super.prototype);\n\n/**\n * @typedef {Object} WheelJointDef\n *\n * Wheel joint definition. This requires defining a line of motion using an axis\n * and an anchor point. The definition uses local anchor points and a local axis\n * so that the initial configuration can violate the constraint slightly. The\n * joint translation is zero when the local anchor points coincide in world\n * space. Using local anchors and a local axis helps when saving and loading a\n * game.\n * \n * @prop {boolean} enableMotor Enable/disable the joint motor.\n * @prop {float} maxMotorTorque The maximum motor torque, usually in N-m.\n * @prop {float} motorSpeed The desired motor speed in radians per second.\n * @prop {float} frequencyHz Suspension frequency, zero indicates no suspension.\n * @prop {float} dampingRatio Suspension damping ratio, one indicates critical\n *       damping.\n *\n * @prop {Vec2} localAnchorA The local anchor point relative to bodyA's origin.\n * @prop {Vec2} localAnchorB The local anchor point relative to bodyB's origin.\n * @prop {Vec2} localAxisA The local translation axis in bodyA.\n */\nvar DEFAULTS = {\n  enableMotor : false,\n  maxMotorTorque : 0.0,\n  motorSpeed : 0.0,\n  frequencyHz : 2.0,\n  dampingRatio : 0.7,\n};\n\n/**\n * A wheel joint. This joint provides two degrees of freedom: translation along\n * an axis fixed in bodyA and rotation in the plane. In other words, it is a\n * point to line constraint with a rotational motor and a linear spring/damper.\n * This joint is designed for vehicle suspensions.\n *\n * @param {WheelJointDef} def\n * @param {Body} bodyA\n * @param {Body} bodyB\n */\nfunction WheelJoint(def, bodyA, bodyB, anchor, axis) {\n  if (!(this instanceof WheelJoint)) {\n    return new WheelJoint(def, bodyA, bodyB, anchor, axis);\n  }\n\n  def = options(def, DEFAULTS);\n  Joint.call(this, def, bodyA, bodyB);\n  bodyA = this.m_bodyA;\n  bodyB = this.m_bodyB;\n\n  this.m_type = WheelJoint.TYPE;\n\n  this.m_localAnchorA = anchor ? bodyA.getLocalPoint(anchor) : def.localAnchorA || Vec2.zero();\n  this.m_localAnchorB = anchor ? bodyB.getLocalPoint(anchor) : def.localAnchorB || Vec2.zero();\n  this.m_localAxis = axis ? bodyA.getLocalVector(axis) : def.localAxisA || Vec2.neo(1.0, 0.0);\n\n  this.m_localXAxisA = this.m_localAxis;\n  this.m_localYAxisA = Vec2.cross(1.0, this.m_localXAxisA);\n\n  this.m_mass = 0.0;\n  this.m_impulse = 0.0;\n  this.m_motorMass = 0.0;\n  this.m_motorImpulse = 0.0;\n  this.m_springMass = 0.0;\n  this.m_springImpulse = 0.0;\n\n  this.m_maxMotorTorque = def.maxMotorTorque;\n  this.m_motorSpeed = def.motorSpeed;\n  this.m_enableMotor = def.enableMotor;\n\n  this.m_frequencyHz = def.frequencyHz;\n  this.m_dampingRatio = def.dampingRatio;\n\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n\n  // Solver temp\n  this.m_localCenterA; // Vec2\n  this.m_localCenterB; // Vec2\n  this.m_invMassA; // float\n  this.m_invMassB; // float\n  this.m_invIA; // float\n  this.m_invIB; // float\n\n  this.m_ax = Vec2.zero();\n  this.m_ay = Vec2.zero(); // Vec2\n  this.m_sAx;\n  this.m_sBx; // float\n  this.m_sAy;\n  this.m_sBy; // float\n\n  // Linear constraint (point-to-line)\n  // d = pB - pA = xB + rB - xA - rA\n  // C = dot(ay, d)\n  // Cdot = dot(d, cross(wA, ay)) + dot(ay, vB + cross(wB, rB) - vA - cross(wA,\n  // rA))\n  // = -dot(ay, vA) - dot(cross(d + rA, ay), wA) + dot(ay, vB) + dot(cross(rB,\n  // ay), vB)\n  // J = [-ay, -cross(d + rA, ay), ay, cross(rB, ay)]\n\n  // Spring linear constraint\n  // C = dot(ax, d)\n  // Cdot = = -dot(ax, vA) - dot(cross(d + rA, ax), wA) + dot(ax, vB) +\n  // dot(cross(rB, ax), vB)\n  // J = [-ax -cross(d+rA, ax) ax cross(rB, ax)]\n\n  // Motor rotational constraint\n  // Cdot = wB - wA\n  // J = [0 0 -1 0 0 1]\n}\n\n/**\n * The local anchor point relative to bodyA's origin.\n */\nWheelJoint.prototype.getLocalAnchorA = function() {\n  return this.m_localAnchorA;\n}\n\n/**\n * The local anchor point relative to bodyB's origin.\n */\nWheelJoint.prototype.getLocalAnchorB = function() {\n  return this.m_localAnchorB;\n}\n\n/**\n * The local joint axis relative to bodyA.\n */\nWheelJoint.prototype.getLocalAxisA = function() {\n  return this.m_localXAxisA;\n}\n\n/**\n * Get the current joint translation, usually in meters.\n */\nWheelJoint.prototype.getJointTranslation = function() {\n  var bA = this.m_bodyA;\n  var bB = this.m_bodyB;\n\n  var pA = bA.getWorldPoint(this.m_localAnchorA); // Vec2\n  var pB = bB.getWorldPoint(this.m_localAnchorB); // Vec2\n  var d = Vec2.sub(pB, pA); // Vec2\n  var axis = bA.getWorldVector(this.m_localXAxisA); // Vec2\n\n  var translation = Vec2.dot(d, axis); // float\n  return translation;\n}\n\n/**\n * Get the current joint translation speed, usually in meters per second.\n */\nWheelJoint.prototype.getJointSpeed = function() {\n  var wA = this.m_bodyA.m_angularVelocity;\n  var wB = this.m_bodyB.m_angularVelocity;\n  return wB - wA;\n}\n\n/**\n * Is the joint motor enabled?\n */\nWheelJoint.prototype.isMotorEnabled = function() {\n  return this.m_enableMotor;\n}\n\n/**\n * Enable/disable the joint motor.\n */\nWheelJoint.prototype.enableMotor = function(flag) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_enableMotor = flag;\n}\n\n/**\n * Set the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.setMotorSpeed = function(speed) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_motorSpeed = speed;\n}\n\n/**\n * Get the motor speed, usually in radians per second.\n */\nWheelJoint.prototype.getMotorSpeed = function() {\n  return this.m_motorSpeed;\n}\n\n/**\n * Set/Get the maximum motor force, usually in N-m.\n */\nWheelJoint.prototype.setMaxMotorTorque = function(torque) {\n  this.m_bodyA.setAwake(true);\n  this.m_bodyB.setAwake(true);\n  this.m_maxMotorTorque = torque;\n}\n\nWheelJoint.prototype.getMaxMotorTorque = function() {\n  return this.m_maxMotorTorque;\n}\n\n/**\n * Get the current motor torque given the inverse time step, usually in N-m.\n */\nWheelJoint.prototype.getMotorTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\n/**\n * Set/Get the spring frequency in hertz. Setting the frequency to zero disables\n * the spring.\n */\nWheelJoint.prototype.setSpringFrequencyHz = function(hz) {\n  this.m_frequencyHz = hz;\n}\n\nWheelJoint.prototype.getSpringFrequencyHz = function() {\n  return this.m_frequencyHz;\n}\n\n/**\n * Set/Get the spring damping ratio\n */\nWheelJoint.prototype.setSpringDampingRatio = function(ratio) {\n  this.m_dampingRatio = ratio;\n}\n\nWheelJoint.prototype.getSpringDampingRatio = function() {\n  return this.m_dampingRatio;\n}\n\nWheelJoint.prototype.getAnchorA = function() {\n  return this.m_bodyA.getWorldPoint(this.m_localAnchorA);\n}\n\nWheelJoint.prototype.getAnchorB = function() {\n  return this.m_bodyB.getWorldPoint(this.m_localAnchorB);\n}\n\nWheelJoint.prototype.getReactionForce = function(inv_dt) {\n  return Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax).mul(inv_dt);\n}\n\nWheelJoint.prototype.getReactionTorque = function(inv_dt) {\n  return inv_dt * this.m_motorImpulse;\n}\n\nWheelJoint.prototype.initVelocityConstraints = function(step) {\n  this.m_localCenterA = this.m_bodyA.m_sweep.localCenter;\n  this.m_localCenterB = this.m_bodyB.m_sweep.localCenter;\n  this.m_invMassA = this.m_bodyA.m_invMass;\n  this.m_invMassB = this.m_bodyB.m_invMass;\n  this.m_invIA = this.m_bodyA.m_invI;\n  this.m_invIB = this.m_bodyB.m_invI;\n\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  // Compute the effective masses.\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA); // Vec2\n\n  // Point to line constraint\n  {\n    this.m_ay = Rot.mulVec2(qA, this.m_localYAxisA);\n    this.m_sAy = Vec2.cross(Vec2.add(d, rA), this.m_ay);\n    this.m_sBy = Vec2.cross(rB, this.m_ay);\n\n    this.m_mass = mA + mB + iA * this.m_sAy * this.m_sAy + iB * this.m_sBy\n        * this.m_sBy;\n\n    if (this.m_mass > 0.0) {\n      this.m_mass = 1.0 / this.m_mass;\n    }\n  }\n\n  // Spring constraint\n  this.m_springMass = 0.0;\n  this.m_bias = 0.0;\n  this.m_gamma = 0.0;\n  if (this.m_frequencyHz > 0.0) {\n    this.m_ax = Rot.mulVec2(qA, this.m_localXAxisA);\n    this.m_sAx = Vec2.cross(Vec2.add(d, rA), this.m_ax);\n    this.m_sBx = Vec2.cross(rB, this.m_ax);\n\n    var invMass = mA + mB + iA * this.m_sAx * this.m_sAx + iB * this.m_sBx\n        * this.m_sBx; // float\n\n    if (invMass > 0.0) {\n      this.m_springMass = 1.0 / invMass;\n\n      var C = Vec2.dot(d, this.m_ax); // float\n\n      // Frequency\n      var omega = 2.0 * Math.PI * this.m_frequencyHz; // float\n\n      // Damping coefficient\n      var d = 2.0 * this.m_springMass * this.m_dampingRatio * omega; // float\n\n      // Spring stiffness\n      var k = this.m_springMass * omega * omega; // float\n\n      // magic formulas\n      var h = step.dt; // float\n      this.m_gamma = h * (d + h * k);\n      if (this.m_gamma > 0.0) {\n        this.m_gamma = 1.0 / this.m_gamma;\n      }\n\n      this.m_bias = C * h * k * this.m_gamma;\n\n      this.m_springMass = invMass + this.m_gamma;\n      if (this.m_springMass > 0.0) {\n        this.m_springMass = 1.0 / this.m_springMass;\n      }\n    }\n  } else {\n    this.m_springImpulse = 0.0;\n  }\n\n  // Rotational motor\n  if (this.m_enableMotor) {\n    this.m_motorMass = iA + iB;\n    if (this.m_motorMass > 0.0) {\n      this.m_motorMass = 1.0 / this.m_motorMass;\n    }\n  } else {\n    this.m_motorMass = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  if (step.warmStarting) {\n    // Account for variable time step.\n    this.m_impulse *= step.dtRatio;\n    this.m_springImpulse *= step.dtRatio;\n    this.m_motorImpulse *= step.dtRatio;\n\n    var P = Vec2.combine(this.m_impulse, this.m_ay, this.m_springImpulse, this.m_ax);\n    var LA = this.m_impulse * this.m_sAy + this.m_springImpulse * this.m_sAx + this.m_motorImpulse;\n    var LB = this.m_impulse * this.m_sBy + this.m_springImpulse * this.m_sBx + this.m_motorImpulse;\n\n    vA.subMul(this.m_invMassA, P);\n    wA -= this.m_invIA * LA;\n\n    vB.addMul(this.m_invMassB, P);\n    wB += this.m_invIB * LB;\n\n  } else {\n    this.m_impulse = 0.0;\n    this.m_springImpulse = 0.0;\n    this.m_motorImpulse = 0.0;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solveVelocityConstraints = function(step) {\n  var mA = this.m_invMassA;\n  var mB = this.m_invMassB; // float\n  var iA = this.m_invIA;\n  var iB = this.m_invIB; // float\n\n  var vA = this.m_bodyA.c_velocity.v;\n  var wA = this.m_bodyA.c_velocity.w;\n  var vB = this.m_bodyB.c_velocity.v;\n  var wB = this.m_bodyB.c_velocity.w;\n\n  // Solve spring constraint\n  {\n    var Cdot = Vec2.dot(this.m_ax, vB) - Vec2.dot(this.m_ax, vA) + this.m_sBx\n        * wB - this.m_sAx * wA; // float\n    var impulse = -this.m_springMass\n        * (Cdot + this.m_bias + this.m_gamma * this.m_springImpulse); // float\n    this.m_springImpulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ax); // Vec2\n    var LA = impulse * this.m_sAx; // float\n    var LB = impulse * this.m_sBx; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  // Solve rotational motor constraint\n  {\n    var Cdot = wB - wA - this.m_motorSpeed; // float\n    var impulse = -this.m_motorMass * Cdot; // float\n\n    var oldImpulse = this.m_motorImpulse; // float\n    var maxImpulse = step.dt * this.m_maxMotorTorque; // float\n    this.m_motorImpulse = Math.clamp(this.m_motorImpulse + impulse,\n        -maxImpulse, maxImpulse);\n    impulse = this.m_motorImpulse - oldImpulse;\n\n    wA -= iA * impulse;\n    wB += iB * impulse;\n  }\n\n  // Solve point to line constraint\n  {\n    var Cdot = Vec2.dot(this.m_ay, vB) - Vec2.dot(this.m_ay, vA) + this.m_sBy\n        * wB - this.m_sAy * wA; // float\n    var impulse = -this.m_mass * Cdot; // float\n    this.m_impulse += impulse;\n\n    var P = Vec2.mul(impulse, this.m_ay); // Vec2\n    var LA = impulse * this.m_sAy; // float\n    var LB = impulse * this.m_sBy; // float\n\n    vA.subMul(mA, P);\n    wA -= iA * LA;\n\n    vB.addMul(mB, P);\n    wB += iB * LB;\n  }\n\n  this.m_bodyA.c_velocity.v.set(vA);\n  this.m_bodyA.c_velocity.w = wA;\n  this.m_bodyB.c_velocity.v.set(vB);\n  this.m_bodyB.c_velocity.w = wB;\n}\n\nWheelJoint.prototype.solvePositionConstraints = function(step) {\n  var cA = this.m_bodyA.c_position.c;\n  var aA = this.m_bodyA.c_position.a;\n  var cB = this.m_bodyB.c_position.c;\n  var aB = this.m_bodyB.c_position.a;\n\n  var qA = Rot.neo(aA);\n  var qB = Rot.neo(aB);\n\n  var rA = Rot.mulVec2(qA, Vec2.sub(this.m_localAnchorA, this.m_localCenterA));\n  var rB = Rot.mulVec2(qB, Vec2.sub(this.m_localAnchorB, this.m_localCenterB));\n  var d = Vec2.zero();\n  d.addCombine(1, cB, 1, rB);\n  d.subCombine(1, cA, 1, rA);\n\n  var ay = Rot.mulVec2(qA, this.m_localYAxisA);\n\n  var sAy = Vec2.cross(Vec2.add(d, rA), ay); // float\n  var sBy = Vec2.cross(rB, ay); // float\n\n  var C = Vec2.dot(d, ay); // float\n\n  var k = this.m_invMassA + this.m_invMassB + this.m_invIA * this.m_sAy\n      * this.m_sAy + this.m_invIB * this.m_sBy * this.m_sBy; // float\n\n  var impulse; // float\n  if (k != 0.0) {\n    impulse = -C / k;\n  } else {\n    impulse = 0.0;\n  }\n\n  var P = Vec2.mul(impulse, ay); // Vec2\n  var LA = impulse * sAy; // float\n  var LB = impulse * sBy; // float\n\n  cA.subMul(this.m_invMassA, P);\n  aA -= this.m_invIA * LA;\n  cB.addMul(this.m_invMassB, P);\n  aB += this.m_invIB * LB;\n\n  this.m_bodyA.c_position.c.set(cA);\n  this.m_bodyA.c_position.a = aA;\n  this.m_bodyB.c_position.c.set(cB);\n  this.m_bodyB.c_position.a = aB;\n\n  return Math.abs(C) <= Settings.linearSlop;\n}\n","var stats = require('./util/stats');\nvar math = require('./util/math');\n\nfunction Texture(image, ratio) {\n  if (typeof image === 'object') {\n    this.src(image, ratio);\n  }\n}\n\nTexture.prototype.pipe = function() {\n  return new Texture(this);\n};\n\n/**\n * Signatures: (image), (x, y, w, h), (w, h)\n */\nTexture.prototype.src = function(x, y, w, h) {\n  if (typeof x === 'object') {\n    var image = x, ratio = y || 1;\n\n    this._image = image;\n    this._sx = this._dx = 0;\n    this._sy = this._dy = 0;\n    this._sw = this._dw = image.width / ratio;\n    this._sh = this._dh = image.height / ratio;\n\n    this.width = image.width / ratio;\n    this.height = image.height / ratio;\n\n    this.ratio = ratio;\n\n  } else {\n    if (typeof w === 'undefined') {\n      w = x, h = y;\n    } else {\n      this._sx = x, this._sy = y;\n    }\n    this._sw = this._dw = w;\n    this._sh = this._dh = h;\n\n    this.width = w;\n    this.height = h;\n  }\n  return this;\n};\n\n/**\n * Signatures: (x, y, w, h), (x, y)\n */\nTexture.prototype.dest = function(x, y, w, h) {\n  this._dx = x, this._dy = y;\n  this._dx = x, this._dy = y;\n  if (typeof w !== 'undefined') {\n    this._dw = w, this._dh = h;\n    this.width = w, this.height = h;\n  }\n  return this;\n};\n\nTexture.prototype.draw = function(context, x1, y1, x2, y2, x3, y3, x4, y4) {\n  var image = this._image;\n  if (image === null || typeof image !== 'object') {\n    return;\n  }\n\n  var sx = this._sx, sy = this._sy;\n  var sw = this._sw, sh = this._sh;\n  var dx = this._dx, dy = this._dy;\n  var dw = this._dw, dh = this._dh;\n\n  if (typeof x3 !== 'undefined') {\n    x1 = math.limit(x1, 0, this._sw), x2 = math.limit(x2, 0, this._sw - x1);\n    y1 = math.limit(y1, 0, this._sh), y2 = math.limit(y2, 0, this._sh - y1);\n    sx += x1, sy += y1, sw = x2, sh = y2;\n    dx = x3, dy = y3, dw = x4, dh = y4;\n\n  } else if (typeof x2 !== 'undefined') {\n    dx = x1, dy = y1, dw = x2, dh = y2;\n\n  } else if (typeof x1 !== 'undefined') {\n    dw = x1, dh = y1;\n  }\n\n  var ratio = this.ratio || 1;\n  sx *= ratio, sy *= ratio, sw *= ratio, sh *= ratio;\n\n  try {\n    if (typeof image.draw === 'function') {\n      image.draw(context, sx, sy, sw, sh, dx, dy, dw, dh);\n    } else {\n      stats.draw++;\n      context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);\n    }\n  } catch (ex) {\n    if (!image._draw_failed) {\n      console.log('Unable to draw: ', image);\n      console.log(ex);\n      image._draw_failed = true;\n    }\n  }\n};\n\nmodule.exports = Texture;\n","var create = require('./create');\nvar native = Math;\n\nmodule.exports = create(Math);\n\nmodule.exports.random = function(min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  return min == max ? min : native.random() * (max - min) + min;\n};\n\nmodule.exports.rotate = function(num, min, max) {\n  if (typeof min === 'undefined') {\n    max = 1, min = 0;\n  } else if (typeof max === 'undefined') {\n    max = min, min = 0;\n  }\n  if (max > min) {\n    num = (num - min) % (max - min);\n    return num + (num < 0 ? max : min);\n  } else {\n    num = (num - max) % (min - max);\n    return num + (num <= 0 ? min : max);\n  }\n};\n\nmodule.exports.limit = function(num, min, max) {\n  if (num < min) {\n    return min;\n  } else if (num > max) {\n    return max;\n  } else {\n    return num;\n  }\n};\n\nmodule.exports.length = function(x, y) {\n  return native.sqrt(x * x + y * y);\n};","function Matrix(a, b, c, d, e, f) {\n  this.reset(a, b, c, d, e, f);\n};\n\nMatrix.prototype.toString = function() {\n  return '[' + this.a + ', ' + this.b + ', ' + this.c + ', ' + this.d + ', '\n      + this.e + ', ' + this.f + ']';\n};\n\nMatrix.prototype.clone = function() {\n  return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n};\n\nMatrix.prototype.reset = function(a, b, c, d, e, f) {\n  this._dirty = true;\n  if (typeof a === 'object') {\n    this.a = a.a, this.d = a.d;\n    this.b = a.b, this.c = a.c;\n    this.e = a.e, this.f = a.f;\n  } else {\n    this.a = a || 1, this.d = d || 1;\n    this.b = b || 0, this.c = c || 0;\n    this.e = e || 0, this.f = f || 0;\n  }\n  return this;\n};\n\nMatrix.prototype.identity = function() {\n  this._dirty = true;\n  this.a = 1;\n  this.b = 0;\n  this.c = 0;\n  this.d = 1;\n  this.e = 0;\n  this.f = 0;\n  return this;\n};\n\nMatrix.prototype.rotate = function(angle) {\n  if (!angle) {\n    return this;\n  }\n\n  this._dirty = true;\n\n  var u = angle ? Math.cos(angle) : 1;\n  // android bug may give bad 0 values\n  var v = angle ? Math.sin(angle) : 0;\n\n  var a = u * this.a - v * this.b;\n  var b = u * this.b + v * this.a;\n  var c = u * this.c - v * this.d;\n  var d = u * this.d + v * this.c;\n  var e = u * this.e - v * this.f;\n  var f = u * this.f + v * this.e;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.translate = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n  this.e += x;\n  this.f += y;\n  return this;\n};\n\nMatrix.prototype.scale = function(x, y) {\n  if (!(x - 1) && !(y - 1)) {\n    return this;\n  }\n  this._dirty = true;\n  this.a *= x;\n  this.b *= y;\n  this.c *= x;\n  this.d *= y;\n  this.e *= x;\n  this.f *= y;\n  return this;\n};\n\nMatrix.prototype.skew = function(x, y) {\n  if (!x && !y) {\n    return this;\n  }\n  this._dirty = true;\n\n  var a = this.a + this.b * x;\n  var b = this.b + this.a * y;\n  var c = this.c + this.d * x;\n  var d = this.d + this.c * y;\n  var e = this.e + this.f * x;\n  var f = this.f + this.e * y;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n  return this;\n};\n\nMatrix.prototype.concat = function(m) {\n  this._dirty = true;\n\n  var n = this;\n\n  var a = n.a * m.a + n.b * m.c;\n  var b = n.b * m.d + n.a * m.b;\n  var c = n.c * m.a + n.d * m.c;\n  var d = n.d * m.d + n.c * m.b;\n  var e = n.e * m.a + m.e + n.f * m.c;\n  var f = n.f * m.d + m.f + n.e * m.b;\n\n  this.a = a;\n  this.b = b;\n  this.c = c;\n  this.d = d;\n  this.e = e;\n  this.f = f;\n\n  return this;\n};\n\nMatrix.prototype.inverse = Matrix.prototype.reverse = function() {\n  if (this._dirty) {\n    this._dirty = false;\n    this.inversed = this.inversed || new Matrix();\n    var z = this.a * this.d - this.b * this.c;\n    this.inversed.a = this.d / z;\n    this.inversed.b = -this.b / z;\n    this.inversed.c = -this.c / z;\n    this.inversed.d = this.a / z;\n    this.inversed.e = (this.c * this.f - this.e * this.d) / z;\n    this.inversed.f = (this.e * this.b - this.a * this.f) / z;\n  }\n  return this.inversed;\n};\n\nMatrix.prototype.map = function(p, q) {\n  q = q || {};\n  q.x = this.a * p.x + this.c * p.y + this.e;\n  q.y = this.b * p.x + this.d * p.y + this.f;\n  return q;\n};\n\nMatrix.prototype.mapX = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.a * x + this.c * y + this.e;\n};\n\nMatrix.prototype.mapY = function(x, y) {\n  if (typeof x === 'object')\n    y = x.y, x = x.x;\n  return this.b * x + this.d * y + this.f;\n};\n\nmodule.exports = Matrix;\n","var planck = require('../lib/');\nvar Stage = require('stage-js/platform/web');\n\nmodule.exports = planck;\n\n// x, y, width, height: camera position\n// hz, speed: frequency and speed of simulation\n// background: background color\n// step: function, is always called\n// paint: function, is called only after repaint\n\nplanck.testbed = function(opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = null;\n  }\n\n  Stage(function(stage, canvas) {\n\n    stage.on(Stage.Mouse.START, function() {\n      window.focus();\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    });\n\n    stage.MAX_ELAPSE = 1000 / 30;\n    var Vec2 = planck.Vec2;\n\n    var testbed = {};\n    testbed.canvas = canvas;\n\n    var paused = false;\n    stage.on('resume', function() {\n      paused = false;\n      testbed._resume && testbed._resume();\n    });\n    stage.on('pause', function() {\n      paused = true;\n      testbed._pause && testbed._pause();\n    });\n    testbed.isPaused = function() {\n      return paused;\n    };\n    testbed.togglePause = function() {\n      paused ? testbed.resume() : testbed.pause();\n    };\n    testbed.pause = function() {\n      stage.pause();\n    };\n    testbed.resume = function() {\n      stage.resume();\n      testbed.focus();\n    };\n    testbed.focus = function() {\n      document.activeElement && document.activeElement.blur();\n      canvas.focus();\n    };\n\n    testbed.debug = false;\n    testbed.width = 80;\n    testbed.height = 60;\n    testbed.x = 0;\n    testbed.y = -10;\n    testbed.ratio = 16;\n    testbed.hz = 60;\n    testbed.speed = 1;\n    testbed.activeKeys = {};\n    testbed.background = '#222222';\n\n    var statusText = '';\n    var statusMap = {};\n\n    function statusSet(name, value) {\n      if (typeof value !== 'function' && typeof value !== 'object') {\n        statusMap[name] = value;\n      }\n    }\n\n    function statusMerge(obj) {\n      for (var key in obj) {\n        statusSet(key, obj[key]);\n      }\n    }\n\n    testbed.status = function(a, b) {\n      if (typeof b !== 'undefined') {\n        statusSet(a, b);\n      } else if (a && typeof a === 'object') {\n        statusMerge(a);\n      } else if (typeof a === 'string') {\n        statusText = a;\n      }\n\n      testbed._status && testbed._status(statusText, statusMap);\n    };\n\n    testbed.info = function(text) {\n      testbed._info && testbed._info(text);\n    };\n\n    var lastDrawHash = \"\", drawHash = \"\";\n\n    (function() {\n      var drawingTexture = new Stage.Texture();\n      stage.append(Stage.image(drawingTexture));\n\n      var buffer = [];\n      stage.tick(function() {\n        buffer.length = 0;\n      }, true);\n\n      drawingTexture.draw = function(ctx) {\n        ctx.save();\n        ctx.transform(1, 0, 0, -1, -testbed.x, -testbed.y);\n        ctx.lineWidth = 2  / testbed.ratio;\n        ctx.lineCap = 'round';\n        for (var drawing = buffer.shift(); drawing; drawing = buffer.shift()) {\n          drawing(ctx, testbed.ratio);\n        }\n        ctx.restore();\n      };\n\n      testbed.drawPoint = function(p, r, color) {\n        buffer.push(function (ctx, ratio) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, 5  / ratio, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"point\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawCircle = function(p, r, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.arc(p.x, p.y, r, 0, 2 * Math.PI);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"circle\" + p.x + ',' + p.y + ',' + r + ',' + color;\n      };\n\n      testbed.drawSegment = function(a, b, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(a.x, a.y);\n          ctx.lineTo(b.x, b.y);\n          ctx.strokeStyle = color;\n          ctx.stroke();\n        });\n        drawHash += \"segment\" + a.x + ',' + a.y + ',' + b.x + ',' + b.y + ',' + color;\n      };\n\n      testbed.drawPolygon = function(points, color) {\n        if (!points || !points.length) {\n          return;\n        }\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(points[0].x, points[0].y);\n          for (var i = 1; i < points.length; i++) {\n            ctx.lineTo(points[i].x, points[i].y);\n          }\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"segment\";\n        for (var i = 1; i < points.length; i++) {\n          drawHash += points[i].x + ',' + points[i].y + ',';\n        }\n        drawHash += color;\n      };\n\n      testbed.drawAABB = function(aabb, color) {\n        buffer.push(function (ctx) {\n          ctx.beginPath();\n          ctx.moveTo(aabb.lowerBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.lowerBound.y);\n          ctx.lineTo(aabb.upperBound.x, aabb.upperBound.y);\n          ctx.lineTo(aabb.lowerBound.x, aabb.upperBound.y);\n          ctx.strokeStyle = color;\n          ctx.closePath();\n          ctx.stroke();\n        });\n        drawHash += \"aabb\";\n        drawHash += aabb.lowerBound.x + ',' + aabb.lowerBound.y + ',';\n        drawHash += aabb.upperBound.x + ',' + aabb.upperBound.y + ',';\n        drawHash += color;\n      };\n\n      testbed.color = function(r, g, b) {\n        r = r * 256 | 0;\n        g = g * 256 | 0;\n        b = b * 256 | 0;\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n      };\n\n    })();\n\n    var world = callback(testbed);\n\n    var viewer = new Viewer(world, testbed);\n\n    var lastX = 0, lastY = 0;\n    stage.tick(function(dt, t) {\n      // update camera position\n      if (lastX !== testbed.x || lastY !== testbed.y) {\n        viewer.offset(-testbed.x, -testbed.y);\n        lastX = testbed.x, lastY = testbed.y;\n      }\n    });\n\n    viewer.tick(function(dt, t) {\n      // call testbed step, if provided\n      if (typeof testbed.step === 'function') {\n        testbed.step(dt, t);\n      }\n\n      if (targetBody) {\n        testbed.drawSegment(targetBody.getPosition(), mouseMove, 'rgba(255,255,255,0.2)');\n      }\n\n      if (lastDrawHash !== drawHash) {\n        lastDrawHash = drawHash;\n        stage.touch();\n      }\n      drawHash = \"\";\n\n      return true;\n    });\n\n    // stage.empty();\n    stage.background(testbed.background);\n    stage.viewbox(testbed.width, testbed.height);\n    stage.pin('alignX', -0.5);\n    stage.pin('alignY', -0.5);\n    stage.prepend(viewer);\n\n    function findBody(point) {\n      var body;\n      var aabb = planck.AABB(point, point);\n      world.queryAABB(aabb, function(fixture) {\n        if (body) {\n          return;\n        }\n        if (!fixture.getBody().isDynamic() || !fixture.testPoint(point)) {\n          return;\n        }\n        body = fixture.getBody();\n        return true;\n      });\n      return body;\n    }\n\n    var mouseGround = world.createBody();\n    var mouseJoint;\n\n    var targetBody;\n    var mouseMove = {x:0, y:0};\n\n    viewer.attr('spy', true).on(Stage.Mouse.START, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (targetBody) {\n        return;\n      }\n\n      var body = findBody(point);\n      if (!body) {\n        return;\n      }\n\n      if (testbed.mouseForce) {\n        targetBody = body;\n\n      } else {\n        mouseJoint = planck.MouseJoint({maxForce: 1000}, mouseGround, body, Vec2(point));\n        world.createJoint(mouseJoint);\n      }\n\n    }).on(Stage.Mouse.MOVE, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        mouseJoint.setTarget(point);\n      }\n\n      mouseMove.x = point.x;\n      mouseMove.y = point.y;\n    }).on(Stage.Mouse.END, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        var force = Vec2.sub(point, targetBody.getPosition());\n        targetBody.applyForceToCenter(force.mul(testbed.mouseForce), true);\n        targetBody = null;\n      }\n\n    }).on(Stage.Mouse.CANCEL, function(point) {\n      point = { x: point.x, y: -point.y };\n      if (mouseJoint) {\n        world.destroyJoint(mouseJoint);\n        mouseJoint = null;\n      }\n      if (targetBody) {\n        targetBody = null;\n      }\n    });\n\n    window.addEventListener(\"keydown\", function(e) {\n      switch (e.keyCode) {\n        case 'P'.charCodeAt(0):\n          testbed.togglePause();\n          break;\n      }\n    }, false);\n\n    var downKeys = {};\n    window.addEventListener(\"keydown\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = true;\n      updateActiveKeys(keyCode, true);\n      testbed.keydown && testbed.keydown(keyCode, String.fromCharCode(keyCode));\n    });\n    window.addEventListener(\"keyup\", function(e) {\n      var keyCode = e.keyCode;\n      downKeys[keyCode] = false;\n      updateActiveKeys(keyCode, false);\n      testbed.keyup && testbed.keyup(keyCode, String.fromCharCode(keyCode));\n    });\n\n    var activeKeys = testbed.activeKeys;\n    function updateActiveKeys(keyCode, down) {\n      var char = String.fromCharCode(keyCode)\n      if (/\\w/.test(char)) {\n        activeKeys[char] = down;\n      }\n      activeKeys.right = downKeys[39] || activeKeys['D'];\n      activeKeys.left = downKeys[37] || activeKeys['A'];\n      activeKeys.up = downKeys[38] || activeKeys['W'];\n      activeKeys.down = downKeys[40] || activeKeys['S'];\n      activeKeys.fire = downKeys[32] || downKeys[13] ;\n    }\n\n  });\n\n};\n\nViewer._super = Stage;\nViewer.prototype = Stage._create(Viewer._super.prototype);\n\nfunction Viewer(world, opts) {\n  Viewer._super.call(this);\n  this.label('Planck');\n\n  opts = opts || {};\n\n  var options = this._options = {};\n  this._options.speed = opts.speed || 1;\n  this._options.hz = opts.hz || 60;\n  if (Math.abs(this._options.hz) < 1) {\n    this._options.hz = 1 / this._options.hz;\n  }\n  this._options.ratio = opts.ratio || 16;\n  this._options.lineWidth = 2 / this._options.ratio;\n\n  this._world = world;\n\n  var timeStep = 1 / this._options.hz;\n  var elapsedTime = 0;\n  this.tick(function(dt) {\n    dt = dt * 0.001 * options.speed;\n    elapsedTime += dt;\n    while (elapsedTime > timeStep) {\n      world.step(timeStep);\n      elapsedTime -= timeStep;\n    }\n    this.renderWorld();\n    return true;\n  }, true);\n\n  world.on('remove-fixture', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n\n  world.on('remove-joint', function (obj) {\n    obj.ui && obj.ui.remove();\n  });\n}\n\nViewer.prototype.renderWorld = function(world) {\n  var world = this._world;\n  var viewer = this;\n\n  for (var b = world.getBodyList(); b; b = b.getNext()) {\n    for (var f = b.getFixtureList(); f; f = f.getNext()) {\n\n      if (!f.ui) {\n        if (f.render && f.render.stroke) {\n          this._options.strokeStyle = f.render.stroke;\n        } else if (b.render && b.render.stroke) {\n          this._options.strokeStyle = b.render.stroke;\n        } else if (b.isDynamic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.9)';\n        } else if (b.isKinematic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.7)';\n        } else if (b.isStatic()) {\n          this._options.strokeStyle = 'rgba(255,255,255,0.5)';\n        }\n\n        if (f.render && f.render.fill) {\n          this._options.fillStyle = f.render.fill;\n        } else if (b.render && b.render.fill) {\n          this._options.fillStyle = b.render.fill;\n        } else {\n          this._options.fillStyle = '';\n        }\n\n        var type = f.getType();\n        var shape = f.getShape();\n        if (type == 'circle') {\n          f.ui = viewer.drawCircle(shape, this._options);\n        }\n        if (type == 'edge') {\n          f.ui = viewer.drawEdge(shape, this._options);\n        }\n        if (type == 'polygon') {\n          f.ui = viewer.drawPolygon(shape, this._options);\n        }\n        if (type == 'chain') {\n          f.ui = viewer.drawChain(shape, this._options);\n        }\n\n        if (f.ui) {\n          f.ui.appendTo(viewer);\n        }\n      }\n\n      if (f.ui) {\n        var p = b.getPosition(), r = b.getAngle();\n        if (f.ui.__lastX !== p.x || f.ui.__lastY !== p.y || f.ui.__lastR !== r) {\n          f.ui.__lastX = p.x;\n          f.ui.__lastY = p.y;\n          f.ui.__lastR = r;\n          f.ui.offset(p.x, -p.y);\n          f.ui.rotate(-r);\n        }\n      }\n\n    }\n  }\n\n  for (var j = world.getJointList(); j; j = j.getNext()) {\n    var type = j.getType();\n    var a = j.getAnchorA();\n    var b = j.getAnchorB();\n\n    if (!j.ui) {\n      this._options.strokeStyle = 'rgba(255,255,255,0.2)';\n\n      j.ui = viewer.drawJoint(j, this._options);\n      j.ui.pin('handle', 0.5);\n      if (j.ui) {\n        j.ui.appendTo(viewer);\n      }\n    }\n\n    if (j.ui) {\n      var cx = (a.x + b.x) * 0.5;\n      var cy = (-a.y + -b.y) * 0.5;\n      var dx = a.x - b.x;\n      var dy = -a.y - -b.y;\n      var d = Math.sqrt(dx * dx + dy * dy);\n      j.ui.width(d);\n      j.ui.rotate(Math.atan2(dy, dx));\n      j.ui.offset(cx, cy);\n    }\n  }\n\n}\n\nViewer.prototype.drawJoint = function(joint, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var length = 10;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture).stretch();\n  return image;\n};\n\nViewer.prototype.drawCircle = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var r = shape.m_radius;\n  var cx = r + lw;\n  var cy = r + lw;\n  var w = r * 2 + lw * 2;\n  var h = r * 2 + lw * 2;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(w, h, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n    }\n    ctx.lineTo(cx, cy);\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n  var image = Stage.image(texture)\n    .offset(shape.m_p.x - cx, -shape.m_p.y - cy);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawEdge = function(edge, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var v1 = edge.m_vertex1;\n  var v2 = edge.m_vertex2;\n\n  var dx = v2.x - v1.x;\n  var dy = v2.y - v1.y;\n\n  var length = Math.sqrt(dx * dx + dy * dy);\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(length + 2 * lw, 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    ctx.moveTo(lw, lw);\n    ctx.lineTo(lw + length, lw);\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var minX = Math.min(v1.x, v2.x);\n  var minY = Math.min(-v1.y, -v2.y);\n\n  var image = Stage.image(texture);\n  image.rotate(-Math.atan2(dy, dx));\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawPolygon = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    if (vertices.length > 2) {\n      ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n\nViewer.prototype.drawChain = function(shape, options) {\n  var lw = options.lineWidth;\n  var ratio = options.ratio;\n\n  var vertices = shape.m_vertices;\n\n  if (!vertices.length) {\n    return;\n  }\n\n  var minX = Infinity, minY = Infinity;\n  var maxX = -Infinity, maxY = -Infinity;\n  for (var i = 0; i < vertices.length; ++i) {\n    var v = vertices[i];\n    minX = Math.min(minX, v.x);\n    maxX = Math.max(maxX, v.x);\n    minY = Math.min(minY, -v.y);\n    maxY = Math.max(maxY, -v.y);\n  }\n\n  var width = maxX - minX;\n  var height = maxY - minY;\n\n  var texture = Stage.canvas(function(ctx) {\n\n    this.size(width + 2 * lw, height + 2 * lw, ratio);\n\n    ctx.scale(ratio, ratio);\n    ctx.beginPath();\n    for (var i = 0; i < vertices.length; ++i) {\n      var v = vertices[i];\n      var x = v.x - minX + lw;\n      var y = -v.y - minY + lw;\n      if (i == 0)\n        ctx.moveTo(x, y);\n      else\n        ctx.lineTo(x, y);\n    }\n\n    // TODO: if loop\n    if (vertices.length > 2) {\n      // ctx.closePath();\n    }\n\n    if (options.fillStyle) {\n      ctx.fillStyle = options.fillStyle;\n      ctx.fill();\n      ctx.closePath();\n    }\n\n    ctx.lineCap = 'round';\n    ctx.lineWidth = options.lineWidth;\n    ctx.strokeStyle = options.strokeStyle;\n    ctx.stroke();\n  });\n\n  var image = Stage.image(texture);\n  image.offset(minX - lw, minY - lw);\n  var node = Stage.create().append(image);\n  return node;\n};\n","module.exports = require('../lib/');\n\nmodule.exports.internal = {};\n\nrequire('../lib/canvas');\nmodule.exports.internal.Image = require('../lib/image');\nrequire('../lib/anim');\nrequire('../lib/str');\nrequire('../lib/layout');\nrequire('../lib/addon/tween');\nmodule.exports.Mouse = require('../lib/addon/mouse');\nmodule.exports.Math = require('../lib/util/math');\nmodule.exports._extend = require('../lib/util/extend');\nmodule.exports._create = require('../lib/util/create');\n\nrequire('../lib/loader/web');","module.exports = require('./core');\nmodule.exports.Matrix = require('./matrix');\nmodule.exports.Texture = require('./texture');\nrequire('./atlas');\nrequire('./tree');\nrequire('./event');\nrequire('./pin');\n\nrequire('./loop');\nrequire('./root');","module.exports = function() {\n  var count = 0;\n  function fork(fn, n) {\n    count += n = (typeof n === 'number' && n >= 1 ? n : 1);\n    return function() {\n      fn && fn.apply(this, arguments);\n      if (n > 0) {\n        n--, count--, call();\n      }\n    };\n  }\n  var then = [];\n  function call() {\n    if (count === 0) {\n      while (then.length) {\n        setTimeout(then.shift(), 0);\n      }\n    }\n  }\n  fork.then = function(fn) {\n    if (count === 0) {\n      setTimeout(fn, 0);\n    } else {\n      then.push(fn);\n    }\n  };\n  return fork;\n};","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('./core');\nvar Texture = require('./texture');\n\nvar extend = require('./util/extend');\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nvar string = require('./util/string');\n\n// name : atlas\nvar _atlases_map = {};\n// [atlas]\nvar _atlases_arr = [];\n\n// TODO: print subquery not found error\n// TODO: index textures\n\nClass.atlas = function(def) {\n  var atlas = is.fn(def.draw) ? def : new Atlas(def);\n  if (def.name) {\n    _atlases_map[def.name] = atlas;\n  }\n  _atlases_arr.push(atlas);\n\n  deprecated(def, 'imagePath');\n  deprecated(def, 'imageRatio');\n\n  var url = def.imagePath;\n  var ratio = def.imageRatio || 1;\n  if (is.string(def.image)) {\n    url = def.image;\n  } else if (is.hash(def.image)) {\n    url = def.image.src || def.image.url;\n    ratio = def.image.ratio || ratio;\n  }\n  url && Class.preload(function(done) {\n    url = Class.resolve(url);\n    DEBUG && console.log('Loading atlas: ' + url);\n    var imageloader = Class.config('image-loader');\n\n    imageloader(url, function(image) {\n      DEBUG && console.log('Image loaded: ' + url);\n      atlas.src(image, ratio);\n      done();\n\n    }, function(err) {\n      DEBUG && console.log('Error loading atlas: ' + url, err);\n      done();\n    });\n  });\n\n  return atlas;\n};\n\nAtlas._super = Texture;\nAtlas.prototype = create(Atlas._super.prototype);\n\nfunction Atlas(def) {\n  Atlas._super.call(this);\n\n  var atlas = this;\n\n  deprecated(def, 'filter');\n  deprecated(def, 'cutouts');\n  deprecated(def, 'sprites');\n  deprecated(def, 'factory');\n\n  var map = def.map || def.filter;\n  var ppu = def.ppu || def.ratio || 1;\n  var trim = def.trim || 0;\n  var textures = def.textures;\n  var factory = def.factory;\n  var cutouts = def.cutouts || def.sprites;\n\n  function make(def) {\n    if (!def || is.fn(def.draw)) {\n      return def;\n    }\n\n    def = extend({}, def);\n\n    if (is.fn(map)) {\n      def = map(def);\n    }\n\n    if (ppu != 1) {\n      def.x *= ppu, def.y *= ppu;\n      def.width *= ppu, def.height *= ppu;\n      def.top *= ppu, def.bottom *= ppu;\n      def.left *= ppu, def.right *= ppu;\n    }\n\n    if (trim != 0) {\n      def.x += trim, def.y += trim;\n      def.width -= 2 * trim, def.height -= 2 * trim;\n      def.top -= trim, def.bottom -= trim;\n      def.left -= trim, def.right -= trim;\n    }\n\n    var texture = atlas.pipe();\n    texture.top = def.top, texture.bottom = def.bottom;\n    texture.left = def.left, texture.right = def.right;\n    texture.src(def.x, def.y, def.width, def.height);\n    return texture;\n  }\n\n  function find(query) {\n    if (textures) {\n      if (is.fn(textures)) {\n        return textures(query);\n      } else if (is.hash(textures)) {\n        return textures[query];\n      }\n    }\n    if (cutouts) { // deprecated\n      var result = null, n = 0;\n      for (var i = 0; i < cutouts.length; i++) {\n        if (string.startsWith(cutouts[i].name, query)) {\n          if (n === 0) {\n            result = cutouts[i];\n          } else if (n === 1) {\n            result = [ result, cutouts[i] ];\n          } else {\n            result.push(cutouts[i]);\n          }\n          n++;\n        }\n      }\n      if (n === 0 && is.fn(factory)) {\n        result = function(subquery) {\n          return factory(query + (subquery ? subquery : ''));\n        };\n      }\n      return result;\n    }\n  }\n\n  this.select = function(query) {\n    if (!query) {\n      // TODO: if `textures` is texture def, map or fn?\n      return new Selection(this.pipe());\n    }\n    var found = find(query);\n    if (found) {\n      return new Selection(found, find, make);\n    }\n  };\n\n};\n\nvar nfTexture = new Texture();\nnfTexture.x = nfTexture.y = nfTexture.width = nfTexture.height = 0;\nnfTexture.pipe = nfTexture.src = nfTexture.dest = function() {\n  return this;\n};\nnfTexture.draw = function() {\n};\n\nvar nfSelection = new Selection(nfTexture);\n\nfunction Selection(result, find, make) {\n  function link(result, subquery) {\n    if (!result) {\n      return nfTexture;\n\n    } else if (is.fn(result.draw)) {\n      return result;\n\n    } else if (is.hash(result) && is.number(result.width)\n        && is.number(result.height) && is.fn(make)) {\n      return make(result);\n\n    } else if (is.hash(result) && is.defined(subquery)) {\n      return link(result[subquery]);\n\n    } else if (is.fn(result)) {\n      return link(result(subquery));\n\n    } else if (is.array(result)) {\n      return link(result[0]);\n\n    } else if (is.string(result) && is.fn(find)) {\n      return link(find(result));\n    }\n  }\n\n  this.one = function(subquery) {\n    return link(result, subquery);\n  };\n\n  this.array = function(arr) {\n    var array = is.array(arr) ? arr : [];\n    if (is.array(result)) {\n      for (var i = 0; i < result.length; i++) {\n        array[i] = link(result[i]);\n      }\n    } else {\n      array[0] = link(result);\n    }\n    return array;\n  };\n}\n\nClass.texture = function(query) {\n  if (!is.string(query)) {\n    return new Selection(query);\n  }\n\n  var result = null, atlas, i;\n\n  if ((i = query.indexOf(':')) > 0 && query.length > i + 1) {\n    atlas = _atlases_map[query.slice(0, i)];\n    result = atlas && atlas.select(query.slice(i + 1));\n  }\n\n  if (!result && (atlas = _atlases_map[query])) {\n    result = atlas.select();\n  }\n\n  for (i = 0; !result && i < _atlases_arr.length; i++) {\n    result = _atlases_arr[i].select(query);\n  }\n\n  if (!result) {\n    console.error('Texture not found: ' + query);\n    result = nfSelection;\n  }\n\n  return result;\n};\n\nfunction deprecated(hash, name, msg) {\n  if (name in hash)\n    console.log(msg ? msg.replace('%name', name) : '\\'' + name\n        + '\\' field of texture atlas is deprecated.');\n};\n\nmodule.exports = Atlas;\n","module.exports.startsWith = function(str, sub) {\n  return typeof str === 'string' && typeof sub === 'string'\n      && str.substring(0, sub.length) == sub;\n};","var Class = require('./core');\nvar is = require('./util/is');\n\nvar iid = 0;\n\n// TODO: do not clear next/prev/parent on remove\n\nClass.prototype._label = '';\n\nClass.prototype._visible = true;\n\nClass.prototype._parent = null;\nClass.prototype._next = null;\nClass.prototype._prev = null;\n\nClass.prototype._first = null;\nClass.prototype._last = null;\n\nClass.prototype._attrs = null;\nClass.prototype._flags = null;\n\nClass.prototype.toString = function() {\n  return '[' + this._label + ']';\n};\n\n/**\n * @deprecated Use label()\n */\nClass.prototype.id = function(id) {\n  return this.label(id);\n};\n\nClass.prototype.label = function(label) {\n  if (typeof label === 'undefined') {\n    return this._label;\n  }\n  this._label = label;\n  return this;\n};\n\nClass.prototype.attr = function(name, value) {\n  if (typeof value === 'undefined') {\n    return this._attrs !== null ? this._attrs[name] : undefined;\n  }\n  (this._attrs !== null ? this._attrs : this._attrs = {})[name] = value;\n  return this;\n};\n\nClass.prototype.visible = function(visible) {\n  if (typeof visible === 'undefined') {\n    return this._visible;\n  }\n  this._visible = visible;\n  this._parent && (this._parent._ts_children = ++iid);\n  this._ts_pin = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.hide = function() {\n  return this.visible(false);\n};\n\nClass.prototype.show = function() {\n  return this.visible(true);\n};\n\nClass.prototype.parent = function() {\n  return this._parent;\n};\n\nClass.prototype.next = function(visible) {\n  var next = this._next;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.prev = function(visible) {\n  var prev = this._prev;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.first = function(visible) {\n  var next = this._first;\n  while (next && visible && !next._visible) {\n    next = next._next;\n  }\n  return next;\n};\n\nClass.prototype.last = function(visible) {\n  var prev = this._last;\n  while (prev && visible && !prev._visible) {\n    prev = prev._prev;\n  }\n  return prev;\n};\n\nClass.prototype.visit = function(visitor, data) {\n  var reverse = visitor.reverse;\n  var visible = visitor.visible;\n  if (visitor.start && visitor.start(this, data)) {\n    return;\n  }\n  var child, next = reverse ? this.last(visible) : this.first(visible);\n  while (child = next) {\n    next = reverse ? child.prev(visible) : child.next(visible);\n    if (child.visit(visitor, data)) {\n      return true;\n    }\n  }\n  return visitor.end && visitor.end(this, data);\n};\n\nClass.prototype.append = function(child, more) {\n  if (is.array(child))\n    for (var i = 0; i < child.length; i++)\n      append(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      append(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    append(this, child);\n\n  return this;\n};\n\nClass.prototype.prepend = function(child, more) {\n  if (is.array(child))\n    for (var i = child.length - 1; i >= 0; i--)\n      prepend(this, child[i]);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      prepend(this, arguments[i]);\n\n  else if (typeof child !== 'undefined')\n    prepend(this, child);\n\n  return this;\n};\n\nClass.prototype.appendTo = function(parent) {\n  append(parent, this);\n  return this;\n};\n\nClass.prototype.prependTo = function(parent) {\n  prepend(parent, this);\n  return this;\n};\n\nClass.prototype.insertNext = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = 0; i < sibling.length; i++)\n      insertAfter(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = 0; i < arguments.length; i++)\n      insertAfter(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertAfter(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertPrev = function(sibling, more) {\n  if (is.array(sibling))\n    for (var i = sibling.length - 1; i >= 0; i--)\n      insertBefore(sibling[i], this);\n\n  else if (typeof more !== 'undefined') // deprecated\n    for (var i = arguments.length - 1; i >= 0; i--)\n      insertBefore(arguments[i], this);\n\n  else if (typeof sibling !== 'undefined')\n    insertBefore(sibling, this);\n\n  return this;\n};\n\nClass.prototype.insertAfter = function(prev) {\n  insertAfter(this, prev);\n  return this;\n};\n\nClass.prototype.insertBefore = function(next) {\n  insertBefore(this, next);\n  return this;\n};\n\nfunction append(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._last) {\n    parent._last._next = child;\n    child._prev = parent._last;\n  }\n\n  child._parent = parent;\n  parent._last = child;\n\n  if (!parent._first) {\n    parent._first = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n}\n\nfunction prepend(parent, child) {\n  _ensure(child);\n  _ensure(parent);\n\n  child.remove();\n\n  if (parent._first) {\n    parent._first._prev = child;\n    child._next = parent._first;\n  }\n\n  child._parent = parent;\n  parent._first = child;\n\n  if (!parent._last) {\n    parent._last = child;\n  }\n\n  child._parent._flag(child, true);\n\n  child._ts_parent = ++iid;\n  parent._ts_children = ++iid;\n  parent.touch();\n};\n\nfunction insertBefore(self, next) {\n  _ensure(self);\n  _ensure(next);\n\n  self.remove();\n\n  var parent = next._parent;\n  var prev = next._prev;\n\n  next._prev = self;\n  prev && (prev._next = self) || parent && (parent._first = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nfunction insertAfter(self, prev) {\n  _ensure(self);\n  _ensure(prev);\n\n  self.remove();\n\n  var parent = prev._parent;\n  var next = prev._next;\n\n  prev._next = self;\n  next && (next._prev = self) || parent && (parent._last = self);\n\n  self._parent = parent;\n  self._prev = prev;\n  self._next = next;\n\n  self._parent._flag(self, true);\n\n  self._ts_parent = ++iid;\n  self.touch();\n};\n\nClass.prototype.remove = function(child, more) {\n  if (typeof child !== 'undefined') {\n    if (is.array(child)) {\n      for (var i = 0; i < child.length; i++)\n        _ensure(child[i]).remove();\n\n    } else if (typeof more !== 'undefined') {\n      for (var i = 0; i < arguments.length; i++)\n        _ensure(arguments[i]).remove();\n\n    } else {\n      _ensure(child).remove();\n    }\n    return this;\n  }\n\n  if (this._prev) {\n    this._prev._next = this._next;\n  }\n  if (this._next) {\n    this._next._prev = this._prev;\n  }\n\n  if (this._parent) {\n    if (this._parent._first === this) {\n      this._parent._first = this._next;\n    }\n    if (this._parent._last === this) {\n      this._parent._last = this._prev;\n    }\n\n    this._parent._flag(this, false);\n\n    this._parent._ts_children = ++iid;\n    this._parent.touch();\n  }\n\n  this._prev = this._next = this._parent = null;\n  this._ts_parent = ++iid;\n  // this._parent.touch();\n\n  return this;\n};\n\nClass.prototype.empty = function() {\n  var child, next = this._first;\n  while (child = next) {\n    next = child._next;\n    child._prev = child._next = child._parent = null;\n\n    this._flag(child, false);\n  }\n\n  this._first = this._last = null;\n\n  this._ts_children = ++iid;\n  this.touch();\n  return this;\n};\n\nClass.prototype.touch = function() {\n  this._ts_touch = ++iid;\n  this._parent && this._parent.touch();\n  return this;\n};\n\n/**\n * Deep flags used for optimizing event distribution.\n */\nClass.prototype._flag = function(obj, name) {\n  if (typeof name === 'undefined') {\n    return this._flags !== null && this._flags[obj] || 0;\n  }\n  if (typeof obj === 'string') {\n    if (name) {\n      this._flags = this._flags || {};\n      if (!this._flags[obj] && this._parent) {\n        this._parent._flag(obj, true);\n      }\n      this._flags[obj] = (this._flags[obj] || 0) + 1;\n\n    } else if (this._flags && this._flags[obj] > 0) {\n      if (this._flags[obj] == 1 && this._parent) {\n        this._parent._flag(obj, false);\n      }\n      this._flags[obj] = this._flags[obj] - 1;\n    }\n  }\n  if (typeof obj === 'object') {\n    if (obj._flags) {\n      for ( var type in obj._flags) {\n        if (obj._flags[type] > 0) {\n          this._flag(type, name);\n        }\n      }\n    }\n  }\n  return this;\n};\n\n/**\n * @private\n */\nClass.prototype.hitTest = function(hit) {\n  if (this.attr('spy')) {\n    return true;\n  }\n  return hit.x >= 0 && hit.x <= this._pin._width && hit.y >= 0\n      && hit.y <= this._pin._height;\n};\n\nfunction _ensure(obj) {\n  if (obj && obj instanceof Class) {\n    return obj;\n  }\n  throw 'Invalid node: ' + obj;\n};\n\nmodule.exports = Class;\n","require('./util/event')(require('./core').prototype, function(obj, name, on) {\n  obj._flag(name, on);\n});\n","module.exports = function(prototype, callback) {\n\n  prototype._listeners = null;\n\n  prototype.on = prototype.listen = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      this._listeners = {};\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i];\n        this._listeners[type] = this._listeners[type] || [];\n        this._listeners[type].push(listener);\n        if (typeof callback === 'function') {\n          callback(this, type, true);\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.off = function(types, listener) {\n    if (!types || !types.length || typeof listener !== 'function') {\n      return this;\n    }\n    if (this._listeners === null) {\n      return this;\n    }\n    var isarray = typeof types !== 'string' && typeof types.join === 'function';\n    if (types = (isarray ? types.join(' ') : types).match(/\\S+/g)) {\n      for (var i = 0; i < types.length; i++) {\n        var type = types[i], all = this._listeners[type], index;\n        if (all && (index = all.indexOf(listener)) >= 0) {\n          all.splice(index, 1);\n          if (!all.length) {\n            delete this._listeners[type];\n          }\n          if (typeof callback === 'function') {\n            callback(this, type, false);\n          }\n        }\n      }\n    }\n    return this;\n  };\n\n  prototype.listeners = function(type) {\n    return this._listeners && this._listeners[type];\n  };\n\n  prototype.publish = function(name, args) {\n    var listeners = this.listeners(name);\n    if (!listeners || !listeners.length) {\n      return 0;\n    }\n    for (var l = 0; l < listeners.length; l++) {\n      listeners[l].apply(this, args);\n    }\n    return listeners.length;\n  };\n\n  prototype.trigger = function(name, args) {\n    this.publish(name, args);\n    return this;\n  };\n\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar stats = require('./util/stats');\nvar create = require('./util/create');\nvar extend = require('./util/extend');\n\nRoot._super = Class;\nRoot.prototype = create(Root._super.prototype);\n\nClass.root = function(request, render) {\n  return new Root(request, render);\n};\n\nfunction Root(request, render) {\n  Root._super.call(this);\n  this.label('Root');\n\n  var paused = true;\n\n  var self = this;\n  var lastTime = 0;\n  var loop = function(now) {\n    if (paused === true) {\n      return;\n    }\n\n    stats.tick = stats.node = stats.draw = 0;\n\n    var last = lastTime || now;\n    var elapsed = now - last;\n    lastTime = now;\n\n    var ticked = self._tick(elapsed, now, last);\n    if (self._mo_touch != self._ts_touch) {\n      self._mo_touch = self._ts_touch;\n      render(self);\n      request(loop);\n    } else if (ticked) {\n      request(loop);\n    } else {\n      paused = true;\n    }\n\n    stats.fps = elapsed ? 1000 / elapsed : 0;\n  };\n\n  this.start = function() {\n    return this.resume();\n  };\n\n  this.resume = function() {\n    if (paused) {\n      this.publish('resume');\n      paused = false;\n      request(loop);\n    }\n    return this;\n  };\n\n  this.pause = function() {\n    if (!paused) {\n      this.publish('pause');\n    }\n    paused = true;\n    return this;\n  };\n\n  this.touch_root = this.touch;\n  this.touch = function() {\n    this.resume();\n    return this.touch_root();\n  };\n};\n\nRoot.prototype.background = function(color) {\n  // to be implemented by loaders\n  return this;\n};\n\nRoot.prototype.viewport = function(width, height, ratio) {\n  if (typeof width === 'undefined') {\n    return extend({}, this._viewport);\n  }\n  this._viewport = {\n    width : width,\n    height : height,\n    ratio : ratio || 1\n  };\n  this.viewbox();\n  var data = extend({}, this._viewport);\n  this.visit({\n    start : function(node) {\n      if (!node._flag('viewport')) {\n        return true;\n      }\n      node.publish('viewport', [ data ]);\n    }\n  });\n  return this;\n};\n\n// TODO: static/fixed viewbox\nRoot.prototype.viewbox = function(width, height, mode) {\n  if (typeof width === 'number' && typeof height === 'number') {\n    this._viewbox = {\n      width : width,\n      height : height,\n      mode : /^(in|out|in-pad|out-crop)$/.test(mode) ? mode : 'in-pad'\n    };\n  }\n\n  var box = this._viewbox;\n  var size = this._viewport;\n  if (size && box) {\n    this.pin({\n      width : box.width,\n      height : box.height\n    });\n    this.scaleTo(size.width, size.height, box.mode);\n  } else if (size) {\n    this.pin({\n      width : size.width,\n      height : size.height\n    });\n  }\n\n  return this;\n};\n","var Class = require('./core');\nvar Texture = require('./texture');\n\nClass.canvas = function(type, attributes, callback) {\n  if (typeof type === 'string') {\n    if (typeof attributes === 'object') {\n    } else {\n      if (typeof attributes === 'function') {\n        callback = attributes;\n      }\n      attributes = {};\n    }\n  } else {\n    if (typeof type === 'function') {\n      callback = type;\n    }\n    attributes = {};\n    type = '2d';\n  }\n\n  var canvas = document.createElement('canvas');\n  var context = canvas.getContext(type, attributes);\n  var texture = new Texture(canvas);\n\n  texture.context = function() {\n    return context;\n  };\n\n  texture.size = function(width, height, ratio) {\n    ratio = ratio || 1;\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    this.src(canvas, ratio);\n    return this;\n  };\n\n  texture.canvas = function(fn) {\n    if (typeof fn === 'function') {\n      fn.call(this, context);\n    } else if (typeof fn === 'undefined' && typeof callback === 'function') {\n      callback.call(this, context);\n    }\n    return this;\n  };\n\n  if (typeof callback === 'function') {\n    callback.call(texture, context);\n  }\n\n  return texture;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar repeat = require('./util/repeat');\nvar create = require('./util/create');\n\nmodule.exports = Image;\n\nClass.image = function(image) {\n  var img = new Image();\n  image && img.image(image);\n  return img;\n};\n\nImage._super = Class;\nImage.prototype = create(Image._super.prototype);\n\nfunction Image() {\n  Image._super.call(this);\n  this.label('Image');\n  this._textures = [];\n  this._image = null;\n};\n\n/**\n * @deprecated Use image\n */\nImage.prototype.setImage = function(a, b, c) {\n  return this.image(a, b, c);\n};\n\nImage.prototype.image = function(image) {\n  this._image = Class.texture(image).one();\n  this.pin('width', this._image ? this._image.width : 0);\n  this.pin('height', this._image ? this._image.height : 0);\n  this._textures[0] = this._image.pipe();\n  this._textures.length = 1;\n  return this;\n};\n\nImage.prototype.tile = function(inner) {\n  this._repeat(false, inner);\n  return this;\n};\n\nImage.prototype.stretch = function(inner) {\n  this._repeat(true, inner);\n  return this;\n};\n\nImage.prototype._repeat = function(stretch, inner) {\n  var self = this;\n  this.untick(this._repeatTicker);\n  this.tick(this._repeatTicker = function() {\n    if (this._mo_stretch == this._pin._ts_transform) {\n      return;\n    }\n    this._mo_stretch = this._pin._ts_transform;\n    var width = this.pin('width');\n    var height = this.pin('height');\n    this._textures.length = repeat(this._image, width, height, stretch, inner,\n        insert);\n  });\n\n  function insert(i, sx, sy, sw, sh, dx, dy, dw, dh) {\n    var repeat = self._textures.length > i ? self._textures[i]\n        : self._textures[i] = self._image.pipe();\n    repeat.src(sx, sy, sw, sh);\n    repeat.dest(dx, dy, dw, dh);\n  }\n};\n","module.exports = function(img, owidth, oheight, stretch, inner, insert) {\n\n  var width = img.width;\n  var height = img.height;\n  var left = img.left;\n  var right = img.right;\n  var top = img.top;\n  var bottom = img.bottom;\n\n  left = typeof left === 'number' && left === left ? left : 0;\n  right = typeof right === 'number' && right === right ? right : 0;\n  top = typeof top === 'number' && top === top ? top : 0;\n  bottom = typeof bottom === 'number' && bottom === bottom ? bottom : 0;\n\n  width = width - left - right;\n  height = height - top - bottom;\n\n  if (!inner) {\n    owidth = Math.max(owidth - left - right, 0);\n    oheight = Math.max(oheight - top - bottom, 0);\n  }\n\n  var i = 0;\n\n  if (top > 0 && left > 0)\n    insert(i++, 0, 0, left, top, 0, 0, left, top);\n  if (bottom > 0 && left > 0)\n    insert(i++, 0, height + top, left, bottom, 0, oheight + top, left, bottom);\n  if (top > 0 && right > 0)\n    insert(i++, width + left, 0, right, top, owidth + left, 0, right, top);\n  if (bottom > 0 && right > 0)\n    insert(i++, width + left, height + top, right, bottom, owidth + left,\n        oheight + top, right, bottom);\n\n  if (stretch) {\n    if (top > 0)\n      insert(i++, left, 0, width, top, left, 0, owidth, top);\n    if (bottom > 0)\n      insert(i++, left, height + top, width, bottom, left, oheight + top,\n          owidth, bottom);\n    if (left > 0)\n      insert(i++, 0, top, left, height, 0, top, left, oheight);\n    if (right > 0)\n      insert(i++, width + left, top, right, height, owidth + left, top, right,\n          oheight);\n    // center\n    insert(i++, left, top, width, height, left, top, owidth, oheight);\n\n  } else { // tile\n    var l = left, r = owidth, w;\n    while (r > 0) {\n      w = Math.min(width, r), r -= width;\n      var t = top, b = oheight, h;\n      while (b > 0) {\n        h = Math.min(height, b), b -= height;\n        insert(i++, left, top, w, h, l, t, w, h);\n        if (r <= 0) {\n          if (left)\n            insert(i++, 0, top, left, h, 0, t, left, h);\n          if (right)\n            insert(i++, width + left, top, right, h, l + w, t, right, h);\n        }\n        t += h;\n      }\n      if (top)\n        insert(i++, left, 0, w, top, l, 0, w, top);\n      if (bottom)\n        insert(i++, left, height + top, w, bottom, l, t, w, bottom);\n      l += w;\n    }\n  }\n\n  return i;\n};","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar math = require('./util/math');\n\nClass.anim = function(frames, fps) {\n  var anim = new Anim();\n  anim.frames(frames).gotoFrame(0);\n  fps && anim.fps(fps);\n  return anim;\n};\n\nAnim._super = Class;\nAnim.prototype = create(Anim._super.prototype);\n\n// TODO: replace with atlas fps or texture time\nClass.Anim = {\n  FPS : 15\n};\n\nfunction Anim() {\n  Anim._super.call(this);\n  this.label('Anim');\n\n  this._textures = [];\n\n  this._fps = Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n\n  this._time = -1;\n  this._repeat = 0;\n\n  this._index = 0;\n  this._frames = [];\n\n  var lastTime = 0;\n  this.tick(function(t, now, last) {\n    if (this._time < 0 || this._frames.length <= 1) {\n      return;\n    }\n\n    // ignore old elapsed\n    var ignore = lastTime != last;\n    lastTime = now;\n    if (ignore) {\n      return true;\n    }\n\n    this._time += t;\n    if (this._time < this._ft) {\n      return true;\n    }\n    var n = this._time / this._ft | 0;\n    this._time -= n * this._ft;\n    this.moveFrame(n);\n    if (this._repeat > 0 && (this._repeat -= n) <= 0) {\n      this.stop();\n      this._callback && this._callback();\n      return false;\n    }\n    return true;\n  }, false);\n};\n\nAnim.prototype.fps = function(fps) {\n  if (typeof fps === 'undefined') {\n    return this._fps;\n  }\n  this._fps = fps > 0 ? fps : Class.Anim.FPS;\n  this._ft = 1000 / this._fps;\n  return this;\n};\n\n/**\n * @deprecated Use frames\n */\nAnim.prototype.setFrames = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nAnim.prototype.frames = function(frames) {\n  this._index = 0;\n  this._frames = Class.texture(frames).array();\n  this.touch();\n  return this;\n};\n\nAnim.prototype.length = function() {\n  return this._frames ? this._frames.length : 0;\n};\n\nAnim.prototype.gotoFrame = function(frame, resize) {\n  this._index = math.rotate(frame, this._frames.length) | 0;\n  resize = resize || !this._textures[0];\n  this._textures[0] = this._frames[this._index];\n  if (resize) {\n    this.pin('width', this._textures[0].width);\n    this.pin('height', this._textures[0].height);\n  }\n  this.touch();\n  return this;\n};\n\nAnim.prototype.moveFrame = function(move) {\n  return this.gotoFrame(this._index + move);\n};\n\nAnim.prototype.repeat = function(repeat, callback) {\n  this._repeat = repeat * this._frames.length - 1;\n  this._callback = callback;\n  this.play();\n  return this;\n};\n\nAnim.prototype.play = function(frame) {\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n    this._time = 0;\n  } else if (this._time < 0) {\n    this._time = 0;\n  }\n\n  this.touch();\n  return this;\n};\n\nAnim.prototype.stop = function(frame) {\n  this._time = -1;\n  if (typeof frame !== 'undefined') {\n    this.gotoFrame(frame);\n  }\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\nvar is = require('./util/is');\n\nClass.string = function(frames) {\n  return new Str().frames(frames);\n};\n\nStr._super = Class;\nStr.prototype = create(Str._super.prototype);\n\nfunction Str() {\n  Str._super.call(this);\n  this.label('String');\n  this._textures = [];\n};\n\n/**\n * @deprecated Use frames\n */\nStr.prototype.setFont = function(a, b, c) {\n  return this.frames(a, b, c);\n};\n\nStr.prototype.frames = function(frames) {\n  this._textures = [];\n  if (typeof frames == 'string') {\n    frames = Class.texture(frames);\n    this._item = function(value) {\n      return frames.one(value);\n    };\n  } else if (typeof frames === 'object') {\n    this._item = function(value) {\n      return frames[value];\n    };\n  } else if (typeof frames === 'function') {\n    this._item = frames;\n  }\n  return this;\n};\n\n/**\n * @deprecated Use value\n */\nStr.prototype.setValue = function(a, b, c) {\n  return this.value(a, b, c);\n};\n\nStr.prototype.value = function(value) {\n  if (typeof value === 'undefined') {\n    return this._value;\n  }\n  if (this._value === value) {\n    return this;\n  }\n  this._value = value;\n\n  if (value === null) {\n    value = '';\n  } else if (typeof value !== 'string' && !is.array(value)) {\n    value = value.toString();\n  }\n\n  this._spacing = this._spacing || 0;\n\n  var width = 0, height = 0;\n  for (var i = 0; i < value.length; i++) {\n    var image = this._textures[i] = this._item(value[i]);\n    width += i > 0 ? this._spacing : 0;\n    image.dest(width, 0);\n    width = width + image.width;\n    height = Math.max(height, image.height);\n  }\n  this.pin('width', width);\n  this.pin('height', height);\n  this._textures.length = value.length;\n  return this;\n};\n","var Class = require('./core');\nrequire('./pin');\nrequire('./loop');\n\nvar create = require('./util/create');\n\nClass.row = function(align) {\n  return Class.create().row(align).label('Row');\n};\n\nClass.prototype.row = function(align) {\n  this.sequence('row', align);\n  return this;\n};\n\nClass.column = function(align) {\n  return Class.create().column(align).label('Row');\n};\n\nClass.prototype.column = function(align) {\n  this.sequence('column', align);\n  return this;\n};\n\nClass.sequence = function(type, align) {\n  return Class.create().sequence(type, align).label('Sequence');\n};\n\nClass.prototype.sequence = function(type, align) {\n\n  this._padding = this._padding || 0;\n  this._spacing = this._spacing || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_seq == this._ts_touch) {\n      return;\n    }\n    this._mo_seq = this._ts_touch;\n\n    var alignChildren = (this._mo_seqAlign != this._ts_children);\n    this._mo_seqAlign = this._ts_children;\n\n    var width = 0, height = 0;\n\n    var child, next = this.first(true);\n    var first = true;\n    while (child = next) {\n      next = child.next(true);\n\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n\n      if (type == 'column') {\n        !first && (height += this._spacing);\n        child.pin('offsetY') != height && child.pin('offsetY', height);\n        width = Math.max(width, w);\n        height = height + h;\n        alignChildren && child.pin('alignX', align);\n\n      } else if (type == 'row') {\n        !first && (width += this._spacing);\n        child.pin('offsetX') != width && child.pin('offsetX', width);\n        width = width + w;\n        height = Math.max(height, h);\n        alignChildren && child.pin('alignY', align);\n      }\n      first = false;\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.box = function() {\n  return Class.create().box().label('Box');\n};\n\nClass.prototype.box = function() {\n  this._padding = this._padding || 0;\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    if (this._mo_box == this._ts_touch) {\n      return;\n    }\n    this._mo_box = this._ts_touch;\n\n    var width = 0, height = 0;\n    var child, next = this.first(true);\n    while (child = next) {\n      next = child.next(true);\n      child.matrix(true);\n      var w = child.pin('boxWidth');\n      var h = child.pin('boxHeight');\n      width = Math.max(width, w);\n      height = Math.max(height, h);\n    }\n    width += 2 * this._padding;\n    height += 2 * this._padding;\n    this.pin('width') != width && this.pin('width', width);\n    this.pin('height') != height && this.pin('height', height);\n  });\n  return this;\n};\n\nClass.layer = function() {\n  return Class.create().layer().label('Layer');\n};\n\nClass.prototype.layer = function() {\n\n  this.untick(this._layoutTiker);\n  this.tick(this._layoutTiker = function() {\n    var parent = this.parent();\n    if (parent) {\n      var width = parent.pin('width');\n      if (this.pin('width') != width) {\n        this.pin('width', width);\n      }\n      var height = parent.pin('height');\n      if (this.pin('height') != height) {\n        this.pin('height', height);\n      }\n    }\n  }, true);\n  return this;\n};\n\n// TODO: move padding to pin\nClass.prototype.padding = function(pad) {\n  this._padding = pad;\n  return this;\n};\n\nClass.prototype.spacing = function(space) {\n  this._spacing = space;\n  return this;\n};\n","var Easing = require('./easing');\nvar Class = require('../core');\nvar Pin = require('../pin');\n\nClass.prototype.tween = function(duration, delay, append) {\n  if (typeof duration !== 'number') {\n    append = duration, delay = 0, duration = 0;\n  } else if (typeof delay !== 'number') {\n    append = delay, delay = 0;\n  }\n\n  if (!this._tweens) {\n    this._tweens = [];\n    var ticktime = 0;\n    this.tick(function(elapsed, now, last) {\n      if (!this._tweens.length) {\n        return;\n      }\n\n      // ignore old elapsed\n      var ignore = ticktime != last;\n      ticktime = now;\n      if (ignore) {\n        return true;\n      }\n\n      var head = this._tweens[0];\n\n      var next = head.tick(this, elapsed, now, last);\n\n      if (next && head === this._tweens[0]) {\n        this._tweens.shift();\n      }\n\n      if (typeof next === 'function') {\n        try {\n          next.call(this);\n        } catch (e) {\n          console.log(e);\n        }\n      }\n\n      if (typeof next === 'object') {\n        this._tweens.unshift(next);\n      }\n\n      return true;\n    }, true);\n  }\n\n  this.touch();\n  if (!append) {\n    this._tweens.length = 0;\n  }\n  var tween = new Tween(this, duration, delay);\n  this._tweens.push(tween);\n  return tween;\n};\n\nfunction Tween(owner, duration, delay) {\n  this._end = {};\n  this._duration = duration || 400;\n  this._delay = delay || 0;\n\n  this._owner = owner;\n  this._time = 0;\n};\n\nTween.prototype.tick = function(node, elapsed, now, last) {\n  this._time += elapsed;\n\n  if (this._time < this._delay) {\n    return;\n  }\n\n  var time = this._time - this._delay;\n\n  if (!this._start) {\n    this._start = {};\n    for ( var key in this._end) {\n      this._start[key] = this._owner.pin(key);\n    }\n  }\n\n  var p, over;\n  if (time < this._duration) {\n    p = time / this._duration;\n    over = false;\n  } else {\n    p = 1;\n    over = true;\n  }\n\n  if (typeof this._easing == 'function') {\n    p = this._easing(p);\n  }\n\n  var q = 1 - p;\n\n  for ( var key in this._end) {\n    this._owner.pin(key, this._start[key] * q + this._end[key] * p);\n  }\n\n  if (over) {\n    return this._next || this._done || true;\n  }\n};\n\nTween.prototype.tween = function(duration, delay) {\n  return this._next = new Tween(this._owner, duration, delay);\n};\n\nTween.prototype.duration = function(duration) {\n  this._duration = duration;\n  return this;\n};\n\nTween.prototype.delay = function(delay) {\n  this._delay = delay;\n  return this;\n};\n\nTween.prototype.ease = function(easing) {\n  this._easing = Easing(easing);\n  return this;\n};\n\nTween.prototype.done = function(fn) {\n  this._done = fn;\n  return this;\n};\n\nTween.prototype.hide = function() {\n  this.done(function() {\n    this.hide();\n  });\n  return this;\n};\n\nTween.prototype.remove = function() {\n  this.done(function() {\n    this.remove();\n  });\n  return this;\n};\n\nTween.prototype.pin = function(a, b) {\n  if (typeof a === 'object') {\n    for ( var attr in a) {\n      pinning(this._owner, this._end, attr, a[attr]);\n    }\n  } else if (typeof b !== 'undefined') {\n    pinning(this._owner, this._end, a, b);\n  }\n  return this;\n};\n\nfunction pinning(node, map, key, value) {\n  if (typeof node.pin(key) === 'number') {\n    map[key] = value;\n  } else if (typeof node.pin(key + 'X') === 'number'\n      && typeof node.pin(key + 'Y') === 'number') {\n    map[key + 'X'] = value;\n    map[key + 'Y'] = value;\n  }\n}\n\nPin._add_shortcuts(Tween);\n\n/**\n * @deprecated Use .done(fn) instead.\n */\nTween.prototype.then = function(fn) {\n  this.done(fn);\n  return this;\n};\n\n/**\n * @deprecated NOOP\n */\nTween.prototype.clear = function(forward) {\n  return this;\n};\n\nmodule.exports = Tween;","function _identity(x) {\n  return x;\n};\nvar _cache = {};\nvar _modes = {};\nvar _easings = {};\n\nfunction Easing(token) {\n  if (typeof token === 'function') {\n    return token;\n  }\n  if (typeof token !== 'string') {\n    return _identity;\n  }\n  var fn = _cache[token];\n  if (fn) {\n    return fn;\n  }\n  var match = /^(\\w+)(-(in|out|in-out|out-in))?(\\((.*)\\))?$/i.exec(token);\n  if (!match || !match.length) {\n    return _identity;\n  }\n  var easing = _easings[match[1]];\n  var mode = _modes[match[3]];\n  var params = match[5];\n  if (easing && easing.fn) {\n    fn = easing.fn;\n  } else if (easing && easing.fc) {\n    fn = easing.fc.apply(easing.fc, params\n        && params.replace(/\\s+/, '').split(','));\n  } else {\n    fn = _identity;\n  }\n  if (mode) {\n    fn = mode.fn(fn);\n  }\n  // TODO: It can be a memory leak with different `params`.\n  _cache[token] = fn;\n  return fn;\n};\n\nEasing.add = function(data) {\n  // TODO: create a map of all { name-mode : data }\n  var names = (data.name || data.mode).split(/\\s+/);\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n    if (name) {\n      (data.name ? _easings : _modes)[name] = data;\n    }\n  }\n};\n\nEasing.add({\n  mode : 'in',\n  fn : function(f) {\n    return f;\n  }\n});\n\nEasing.add({\n  mode : 'out',\n  fn : function(f) {\n    return function(t) {\n      return 1 - f(1 - t);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'in-out',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (f(2 * t) / 2) : (1 - f(2 * (1 - t)) / 2);\n    };\n  }\n});\n\nEasing.add({\n  mode : 'out-in',\n  fn : function(f) {\n    return function(t) {\n      return (t < 0.5) ? (1 - f(2 * (1 - t)) / 2) : (f(2 * t) / 2);\n    };\n  }\n});\n\nEasing.add({\n  name : 'linear',\n  fn : function(t) {\n    return t;\n  }\n});\n\nEasing.add({\n  name : 'quad',\n  fn : function(t) {\n    return t * t;\n  }\n});\n\nEasing.add({\n  name : 'cubic',\n  fn : function(t) {\n    return t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quart',\n  fn : function(t) {\n    return t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'quint',\n  fn : function(t) {\n    return t * t * t * t * t;\n  }\n});\n\nEasing.add({\n  name : 'sin sine',\n  fn : function(t) {\n    return 1 - Math.cos(t * Math.PI / 2);\n  }\n});\n\nEasing.add({\n  name : 'exp expo',\n  fn : function(t) {\n    return t == 0 ? 0 : Math.pow(2, 10 * (t - 1));\n  }\n});\n\nEasing.add({\n  name : 'circle circ',\n  fn : function(t) {\n    return 1 - Math.sqrt(1 - t * t);\n  }\n});\n\nEasing.add({\n  name : 'bounce',\n  fn : function(t) {\n    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625\n        * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625\n        * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t\n        + .984375;\n  }\n});\n\nEasing.add({\n  name : 'poly',\n  fc : function(e) {\n    return function(t) {\n      return Math.pow(t, e);\n    };\n  }\n});\n\nEasing.add({\n  name : 'elastic',\n  fc : function(a, p) {\n    p = p || 0.45;\n    a = a || 1;\n    var s = p / (2 * Math.PI) * Math.asin(1 / a);\n    return function(t) {\n      return 1 + a * Math.pow(2, -10 * t)\n          * Math.sin((t - s) * (2 * Math.PI) / p);\n    };\n  }\n});\n\nEasing.add({\n  name : 'back',\n  fc : function(s) {\n    s = typeof s !== 'undefined' ? s : 1.70158;\n    return function(t) {\n      return t * t * ((s + 1) * t - s);\n    };\n  }\n});\n\nmodule.exports = Easing;\n","if (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nrequire('../core')._load(function(stage, elem) {\n  Mouse.subscribe(stage, elem);\n});\n\n// TODO: capture mouse\n\nMouse.CLICK = 'click';\nMouse.START = 'touchstart mousedown';\nMouse.MOVE = 'touchmove mousemove';\nMouse.END = 'touchend mouseup';\nMouse.CANCEL = 'touchcancel mousecancel';\n\nMouse.subscribe = function(stage, elem) {\n  if (stage.mouse) {\n    return;\n  }\n\n  stage.mouse = new Mouse(stage, elem);\n\n  // `click` events are synthesized from start/end events on same nodes\n  // `mousecancel` events are synthesized on blur or mouseup outside element\n\n  elem.addEventListener('touchstart', handleStart);\n  elem.addEventListener('touchend', handleEnd);\n  elem.addEventListener('touchmove', handleMove);\n  elem.addEventListener('touchcancel', handleCancel);\n\n  elem.addEventListener('mousedown', handleStart);\n  elem.addEventListener('mouseup', handleEnd);\n  elem.addEventListener('mousemove', handleMove);\n\n  document.addEventListener('mouseup', handleCancel);\n  window.addEventListener(\"blur\", handleCancel);\n\n  var clicklist = [], cancellist = [];\n\n  function handleStart(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    // DEBUG && console.log('Mouse Start: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    stage.mouse.lookup('click', clicklist);\n    stage.mouse.lookup('mousecancel', cancellist);\n  }\n\n  function handleMove(event) {\n    event.preventDefault();\n    stage.mouse.locate(event);\n    stage.mouse.publish(event.type, event);\n  }\n\n  function handleEnd(event) {\n    event.preventDefault();\n    // up/end location is not available, last one is used instead\n    // DEBUG && console.log('Mouse End: ' + event.type + ' ' + mouse);\n    stage.mouse.publish(event.type, event);\n\n    if (clicklist.length) {\n      // DEBUG && console.log('Mouse Click: ' + clicklist.length);\n      stage.mouse.publish('click', event, clicklist);\n    }\n    cancellist.length = 0;\n  }\n\n  function handleCancel(event) {\n    if (cancellist.length) {\n      // DEBUG && console.log('Mouse Cancel: ' + event.type);\n      stage.mouse.publish('mousecancel', event, cancellist);\n    }\n    clicklist.length = 0;\n  }\n};\n\nfunction Mouse(stage, elem) {\n  if (!(this instanceof Mouse)) {\n    // old-style mouse subscription\n    return;\n  }\n\n  var ratio = stage.viewport().ratio || 1;\n\n  stage.on('viewport', function(size) {\n    ratio = size.ratio || ratio;\n  });\n\n  this.x = 0;\n  this.y = 0;\n  this.toString = function() {\n    return (this.x | 0) + 'x' + (this.y | 0);\n  };\n  this.locate = function(event) {\n    locateElevent(elem, event, this);\n    this.x *= ratio;\n    this.y *= ratio;\n  };\n  this.lookup = function(type, collect) {\n    this.type = type;\n    this.root = stage;\n    this.event = null;\n    collect.length = 0;\n    this.collect = collect;\n\n    this.root.visit(this.visitor, this);\n  };\n  this.publish = function(type, event, targets) {\n    this.type = type;\n    this.root = stage;\n    this.event = event;\n    this.collect = false;\n    this.timeStamp = Date.now();\n\n    if (type !== 'mousemove' && type !== 'touchmove') {\n      DEBUG && console.log(this.type + ' ' + this);\n    }\n\n    if (targets) {\n      while (targets.length)\n        if (this.visitor.end(targets.shift(), this))\n          break;\n      targets.length = 0;\n    } else {\n      this.root.visit(this.visitor, this);\n    }\n  };\n  this.visitor = {\n    reverse : true,\n    visible : true,\n    start : function(node, mouse) {\n      return !node._flag(mouse.type);\n    },\n    end : function(node, mouse) {\n      // mouse: event/collect, type, root\n      rel.raw = mouse.event;\n      rel.type = mouse.type;\n      rel.timeStamp = mouse.timeStamp;\n      rel.abs.x = mouse.x;\n      rel.abs.y = mouse.y;\n\n      var listeners = node.listeners(mouse.type);\n      if (!listeners) {\n        return;\n      }\n      node.matrix().inverse().map(mouse, rel);\n      if (!(node === mouse.root || node.hitTest(rel))) {\n        return;\n      }\n      if (mouse.collect) {\n        mouse.collect.push(node);\n      }\n      if (mouse.event) {\n        var cancel = false;\n        for (var l = 0; l < listeners.length; l++) {\n          cancel = listeners[l].call(node, rel) ? true : cancel;\n        }\n        return cancel;\n      }\n    }\n  };\n};\n\n// TODO: define per mouse object with get-only x and y\nvar rel = {}, abs = {};\n\ndefineValue(rel, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(rel, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0) + ' (' + this.abs + ')';\n});\ndefineValue(rel, 'abs', abs);\ndefineValue(abs, 'clone', function(obj) {\n  obj = obj || {}, obj.x = this.x, obj.y = this.y;\n  return obj;\n});\ndefineValue(abs, 'toString', function() {\n  return (this.x | 0) + 'x' + (this.y | 0);\n});\n\nfunction defineValue(obj, name, value) {\n  Object.defineProperty(obj, name, {\n    value : value\n  });\n}\n\nfunction locateElevent(el, ev, loc) {\n  // pageX/Y if available?\n  if (ev.touches && ev.touches.length) {\n    loc.x = ev.touches[0].clientX;\n    loc.y = ev.touches[0].clientY;\n  } else {\n    loc.x = ev.clientX;\n    loc.y = ev.clientY;\n  }\n  var rect = el.getBoundingClientRect();\n  loc.x -= rect.left;\n  loc.y -= rect.top;\n  loc.x -= el.clientLeft | 0;\n  loc.y -= el.clientTop | 0;\n  return loc;\n};\n\nmodule.exports = Mouse;\n","/**\n * Default loader for web.\n */\n\nif (typeof DEBUG === 'undefined')\n  DEBUG = true;\n\nvar Class = require('../core');\n\nClass._supported = (function() {\n  var elem = document.createElement('canvas');\n  return (elem.getContext && elem.getContext('2d')) ? true : false;\n})();\n\nwindow.addEventListener('load', function() {\n  DEBUG && console.log('On load.');\n  if (Class._supported) {\n    Class.start();\n  }\n  // TODO if not supported\n}, false);\n\nClass.config({\n  'app-loader' : AppLoader,\n  'image-loader' : ImageLoader\n});\n\nfunction AppLoader(app, configs) {\n  configs = configs || {};\n  var canvas = configs.canvas, context = null, full = false;\n  var width = 0, height = 0, ratio = 1;\n\n  if (typeof canvas === 'string') {\n    canvas = document.getElementById(canvas);\n  }\n\n  if (!canvas) {\n    canvas = document.getElementById('cutjs')\n        || document.getElementById('stage');\n  }\n\n  if (!canvas) {\n    full = true;\n    DEBUG && console.log('Creating Canvas...');\n    canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.top = '0';\n    canvas.style.left = '0';\n\n    var body = document.body;\n    body.insertBefore(canvas, body.firstChild);\n  }\n\n  context = canvas.getContext('2d');\n\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = context.webkitBackingStorePixelRatio\n      || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio\n      || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  ratio = devicePixelRatio / backingStoreRatio;\n\n  var requestAnimationFrame = window.requestAnimationFrame\n      || window.msRequestAnimationFrame || window.mozRequestAnimationFrame\n      || window.webkitRequestAnimationFrame || window.oRequestAnimationFrame\n      || function(callback) {\n        return window.setTimeout(callback, 1000 / 60);\n      };\n\n  DEBUG && console.log('Creating stage...');\n  var root = Class.root(requestAnimationFrame, render);\n\n  function render() {\n    context.setTransform(1, 0, 0, 1, 0, 0);\n    context.clearRect(0, 0, width, height);\n    root.render(context);\n  }\n\n  root.background = function(color) {\n    canvas.style.backgroundColor = color;\n    return this;\n  };\n\n  app(root, canvas);\n\n  resize();\n  window.addEventListener('resize', resize, false);\n  window.addEventListener('orientationchange', resize, false);\n\n  function resize() {\n\n    if (full) {\n      // screen.availWidth/Height?\n      width = (window.innerWidth > 0 ? window.innerWidth : screen.width);\n      height = (window.innerHeight > 0 ? window.innerHeight : screen.height);\n\n      canvas.style.width = width + 'px';\n      canvas.style.height = height + 'px';\n\n    } else {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    }\n\n    width *= ratio;\n    height *= ratio;\n\n    if (canvas.width === width && canvas.height === height) {\n      return;\n    }\n\n    canvas.width = width;\n    canvas.height = height;\n\n    DEBUG && console.log('Resize: ' + width + ' x ' + height + ' / ' + ratio);\n\n    root.viewport(width, height, ratio);\n\n    render();\n  }\n}\n\nfunction ImageLoader(src, success, error) {\n  DEBUG && console.log('Loading image: ' + src);\n  var image = new Image();\n  image.onload = function() {\n    success(image);\n  };\n  image.onerror = error;\n  image.src = src;\n}\n"],"sourceRoot":""}